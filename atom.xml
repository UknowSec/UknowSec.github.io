<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uknow’s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uknow.top/"/>
  <updated>2016-09-01T15:03:54.778Z</updated>
  <id>http://uknow.top/</id>
  
  <author>
    <name>uknow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web安全与攻击技术-基础知识</title>
    <link href="http://uknow.top/undefined/Web%E5%AE%89%E5%85%A8%E4%B8%8E%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8620160901/"/>
    <id>http://uknow.top/undefined/Web安全与攻击技术-基础知识20160901/</id>
    <published>2016-09-01T06:29:17.000Z</published>
    <updated>2016-09-01T15:03:54.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="0x01-HTTP协议"><a href="#0x01-HTTP协议" class="headerlink" title="0x01 HTTP协议"></a>0x01 HTTP协议</h2><p>超文本传送协议（Hypertext Transport Protocol , HTTP）是分布式、协作式、超媒体系统应用之间的通信协议，是万维网（World Wide Web）交换信息的基础。HTTP是一个客户端终端（用户）和服务端（网站）请求和应答的标准（TCP）。通过使用Web浏览器、网络爬虫或者其他工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80），称这个客户端为用户代理程序。通常，有HTTP客户端发起一个请求，创建一个到服务器指定端口（默认端口为80端口）的TCP连接。HTTO服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，如“HTTP/1.1 200 OK”及返回的内容（请求的文件、错误信息、或者其他信息）。</p>
<h3 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h3><p>（1）OPTIONS：该办法可使服务器传回该资源所支持的所有HTTP请求方法。用‘*’来代替资源名称，向Web服务器发送OPTIONS请求，可以测试服务器功能是否正常运作。<br>（2）HEAD:与GET方法一样，都是向服务器发出指定资源的请求。只不过服务器将不传回资源的本文部分。它的好处在于，使用这个方法可以在不必传输全部内容的情况下，就可以获取其中“关于该资源的信息”（元信息或称元数据）<br>（3）GET:向指定资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，如在Web Application中，其中一个原因就是GET可能会被网络蜘蛛等随意访问。<br>（4）POST:向指定资源提交数据，请求服务器进行处理（如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。<br>（5）PUT：向指向资源位置上传其最新内容。<br>（6）DELETE：请求服务器删除Request-URI所标识的资源。<br>（7）TRACE：回显服务器收到的请求，主要用于测试或诊断。<br>（8）CONNECT:HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。通常用于SSL加密服务器的链接（经由非加密的HTTP代理服务器）。<br>以下是一个典型的HTTP GET 请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.1</div><div class="line">User-Agent: Mozilla/4.0(compatible; MSIE 8.0; Windows NT 6.0)</div><div class="line">Host: www.bit.edu.cn</div><div class="line">Accept: text/html</div><div class="line">Accept-Language: zh-CN</div><div class="line">Accept-Rncoding: gzip,deflate</div><div class="line">Cache-Control: no-cache</div><div class="line">Cookie: SessionId= ICONFPDBEPOBLFFGBKKNCGAL</div><div class="line">Connection: Keep-Alive</div></pre></td></tr></table></figure></p>
<p>其中，请求的第一行都是由3个以空格间隔的项目组成，分别是请求方法、请求路径、和HTTP版本。其他一些常见的消息头如下。<br>（1）Referer消息头用于表示发出请求的原始URL。<br>（2）User-Agent消息头提供与浏览器或其他请求的客户端软件有关的信息。<br>（3）Host消息头用于指定出现被访问的完整URL中的主机名称。<br>（4）Cookie消息头用于提交服务器向客户端发布的其他参数。</p>
<h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><p>HTTP状态码（HTTP Status Code）是用以表示网页服务器HTTP响应状态的3位柱子代码。所有HTTP响应的第一行都是状态行，以次是当前HTTP版本号，3位数字组成的状态代码，以及描述状态的短语，彼此由空格分隔。<br>状态代码的第一数字代表当前响应的类型。<br>（1）1xx消息————请求已被服务器接收，继续处理。<br>（2）2xx成功————请求已成功被服务器接收、理解、并接受。<br>（3）3xx重定向————需要后续操作才能完成这一请求。<br>（4）4xx请求错误————请求含有词法错误或者无法被执行。<br>（5）5xx服务器错误————服务器在处理某个正确请求时发生错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK </div><div class="line">Date: Mon,04 Mar 2013 07:53:16 GMT</div><div class="line">Server: Apache/2.2.23 (Unix) mod_jk/1.2.14</div><div class="line">Content-Length: 31300</div><div class="line">Keep-Alive: timeout=5,max=99</div><div class="line">Connection: Keep-Alive</div><div class="line">Content-Type: text-html</div></pre></td></tr></table></figure></p>
<p>每个HTTP响应的第一行由3个以空格间隔的项目组成，分别为HTTP版本、状态码和原因短语。其他一些常见的消息头如下：<br>（1）Server消息头包含一个旗标，指明所使用的Web服务器软件。有时还包括其他信息，如所安装的模块和服务器操作系统。其中包括的信息可能并不准确。<br>（2）Set-Cookie消息头向浏览器发送另一个Cookie,它将在最后向服务器发送的请求中由Cookie消息头返回。<br>（3）Progma消息头指示浏览器是否将响应保存在缓存中。<br>（4）Expires消息头指出响应内容过期日期。<br>（5）Content-Length消息头规定消息主题的字节长度。<br>（6）Content-Type消息头表示这个消息主题中包含一个HTML文档。</p>
<h3 id="HTTP-Cookie"><a href="#HTTP-Cookie" class="headerlink" title="HTTP Cookie"></a>HTTP Cookie</h3><p>HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。所以Cookie就是用来绕开HTTO的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含的信息，借此维护用户跟服务器会话中的状态。</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>超文本传输安全协议（Hypertext Transfer Protocol Secure, HTTPS）是超文本传输协议和SSL/TLS的组合，用以提供加密通信及对网络服务器身份的鉴定。HTTPS连接经常被用于万维网上的交易支付和企业信息系统的敏感信息的传输。<br>HTTPS可为浏览器和服务器间传输的数据提供机密性与完整性保护功能。有助于防止信息泄漏，并且可以保证用户处理的服务器的安全性。但是HTTPS并不能抵御直接针对某个应用程序服务器或客户端组件的攻击，而许多成功的攻击都属于这种类型。因此无论服务器是否使用HTTPS，大多数Web应用程序安全漏洞仍然存在。</p>
<h2 id="0x02-B-S功能及会话"><a href="#0x02-B-S功能及会话" class="headerlink" title="0x02 B/S功能及会话"></a>0x02 B/S功能及会话</h2><h3 id="服务端功能"><a href="#服务端功能" class="headerlink" title="服务端功能"></a>服务端功能</h3><p>Web应用程序主要向用户提供动态生成的内容。当用户请求一个动态资源时，服务器会建立响应并在服务器端执行相应的脚本生成内容，然后将内容返回给用户。在形式上服务器类似于计算机程序，接受输入并处理输入，最后向用户返回输出结果。<br>HTTP请求通常使用以下3种方式向应用程序传递参数。<br>（1）通过URL里的查询字符串。<br>（2）通过在请求主题中使用POST方法。<br>（3）通过HTTP Cookie。</p>
<h3 id="客户端功能"><a href="#客户端功能" class="headerlink" title="客户端功能"></a>客户端功能</h3><p>服务器端应用程序要接收用户输入与操作，并向用户返回其结果，它必须提供一个客户端界面。由于所有的Web应用都通过Web浏览器访问，因此这些界面共享一个技术核心。近些年来客户端技术不断发生变化，以下介绍一些常见的客户端技术。</p>
<h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><p>超文本标记语言（Hyper Text Markup Language, HTML）是为“网页创建和其他可在网页浏览器中看到的信息”设计的一种标记语言。<br>超链接是HTML中常见的一个标签，事实上服务器与客户端之间大量的通信都由用户单击超链接驱动。<br>虽然超链接具有极大的方便性，但许多Web程序还需要采用更灵活的形式收集输入，HTML表单是一种常见的机制，它允许用户提交任意的输入。</p>
<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><p>层叠样式表（Cascading Style Sheets）,又称串样式列表，一种用来为结构化文档（如HTML文档或XML应用）添加样式（字体、间距和颜色等）的计算机语言，由W3C定义和维护。CSS目前最新版本为CSS3,是能够真正做到网页表现与内容分离的一种样式是设计语言。相对于传统HTML的表现而言，CSS能够对网页中的对象的位置排版进行像素级的精髓控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力，并能够进行初步交互涉及，是目前基于文本展示最优秀的表现设计语言。CSS能够根据不同使用者的理解能力，简化或者优化写法，针对各类人群，有较强的易读性。</p>
<h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><p>JavaScript是一种由Netscape的LiveScript发展而来的原型化继承的面向对象的动态类型的区分大小写的客户端脚本语言，主要目的是为了解决服务器端语言，例如，Perl遗留的速度问题，为客户提供更流畅的浏览效果。<br>JavaScript是一种相对简单但功能强大的编程语言，使用它可以方便地以各种仅使用HTML无法实现的方法对Web界面进行扩展。JavaScript常用于执行以下任务。<br>（1）确定用户输入，然后将其提交给服务器避免数据包含错误而提交不必要的请求。<br>（2）根据用户的输入动态修改用户界面，以减少客户端与服务器端通信次数。<br>（3）查询并更新浏览器内的文档对象模型（Document Object Model, DOM）,控制浏览器行为。</p>
<h4 id="浏览器扩展技术"><a href="#浏览器扩展技术" class="headerlink" title="浏览器扩展技术"></a>浏览器扩展技术</h4><p>除了JavaScript技术外，一些Web应用程序还使用浏览器扩展技术，使用定制代码从各个方面扩展浏览器的内置功能。这些扩展可通过适当的浏览器执行或需要在客户端安装可执行程序。以下列出常见的一些后客户端技术。<br>（1）Java applet<br>（2）ActiveX控件<br>（3）Flash对象<br>（4）Silverlight对象</p>
<h3 id="状态与会话"><a href="#状态与会话" class="headerlink" title="状态与会话"></a>状态与会话</h3><p>HTTP协议本身是无状态的，客户端只需简单地想服务器请求，服务器响应请求返回响应消息。无论是客户端还是服务器都没有记录信息，每一次请求都是独立的。随着Web应用的发展，按需生成动态信息变得越来越重要。其中，Cookie就是为了解决HTTP无状态的而产生的，后来又出现Session，一种在客户端和服务器端保持状态的解决方案。<br>Session基址是一种服务器机制，服务器一般采用类似于散列表的存储结构保存信息。<br>与Cookie机制不同的是，Session采取的是在服务器端保持状态，而Cookie是在客户端保持状态。同时，服务器端需要在客户端保存一个标识。所以Session机制通常需要借助于Cookie来保存Session标识。</p>
<h2 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h2><h3 id="URL-编码"><a href="#URL-编码" class="headerlink" title="URL 编码"></a>URL 编码</h3><p>统一资源定位符（Uniform/Universal Resource Locator）也被称为网页地址，如同在网络上的门牌，是因特网上标准的资源的地址（Address）。它最初由蒂姆·伯纳斯·李发明用来作为万维网的地址。现在它已经被万维网联盟编制为因特网标准RFC1738。<br>在因特网的历史上，统一资源定位符的发明是一个非常基础的步骤。统一资源定位符的语法是一般的、可扩展的，它使用ASCII代码的一部分来表示因特网的地址。统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议。<br>统一资源定位符的标准格式如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">协议类型：//服务器地址（必要时要加上端口号）/路径/文件名</div></pre></td></tr></table></figure></p>
<p>URL只允许使用US-ASCII字符集中的可打印字符（ASCII代码在0x20~0x7e范围内）。而且由于其在URL方案或HTTP协议内具有特殊含义，这个范围内的一些字符也不能在URL中使用。URL编码方案对扩展ASCII字符集中的任何有问题的字符进行编码，使其可以通过HTTP安全传输。任何URL编码的字符都是以%为前缀，其后是这个字符的两位十六进制ASCII代码。</p>
<h3 id="Unicode-编码"><a href="#Unicode-编码" class="headerlink" title="Unicode 编码"></a>Unicode 编码</h3><p>Unicode是一种为支持全世界所使用的各种编码系统而设计的字符编码标准，它采用各种编码方案，其中一些可用于表示Web应用程序中不常见的字符。<br>16位Unicode编码的工作原理与URL编码类似。为通过HTTP进行传输，16位Unicode编码的字符以%u为前缀，其后是这个字符的十六进制Unicode码点。</p>
<h3 id="HTML-编码"><a href="#HTML-编码" class="headerlink" title="HTML 编码"></a>HTML 编码</h3><p>HTML编码是一种用于表示问题字符以将其安全并入HTML文档的方案。许多字符在HTML中具有特殊含义（如HTML元字符），并被用于定义文档结构而非其内容。为了安全使用这些字符，并将其用在文档的内容中，就必须对其进行HTML编码。<br>当攻击Web应用程序时，HTML编码主要在探查跨站脚本漏洞时发挥作用。</p>
<h3 id="Base64-编码"><a href="#Base64-编码" class="headerlink" title="Base64 编码"></a>Base64 编码</h3><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个位元为一个单元，对应某个可打印字符。三个字节有24个位元，对应于4个Base64单元，即3个字节需要用4个可打印字符来表示。Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email，email via MIME,在XML中存储复杂数据。<br>如果最后的输入数据块不能构成3段输出数据，就用一个或两个等号补足输出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h1&gt;&lt;h2 id=&quot;0x01-HTTP协议&quot;&gt;&lt;a href=&quot;#0x01-HTTP协议&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016-08-28</title>
    <link href="http://uknow.top/undefined/2016-08-2820160828/"/>
    <id>http://uknow.top/undefined/2016-08-2820160828/</id>
    <published>2016-08-28T14:21:30.000Z</published>
    <updated>2016-08-28T15:21:39.015Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>昨天晚上结识一个今年大四的南京大表哥。跟他聊了很多，有感遂写下这篇博文。</p>
<h2 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h2><p>明天就是大二了，大一一年感觉自己有点混。学习上混，自己想接触的领域也比较混。大一经历了很多，第一次来到南京这个陌生的城市。第一次接触到“信息安全”的名词，第一个想以后从事这个行业的决定。我自己现在也不知道这是个冲动还是我兴趣使然，内心使然。正如TK教主曾经说的：“如果你对于安全这个行业仅仅是为了赚一口饭，那无异于一个性冷淡拍AV。如果你是真正的对于一种技术的追崇，让你会无限的提高，永远对于他有一种新鲜感。”兴趣使然，我依旧坚持自己的选择。我毅不忘初心，亦望始终可得。大一懒懒散散的过去了，从我初了解到这个领域的时候。都是一些小打小闹，在各大论坛也说不得是摸爬滚打。我自己甚至也不知道自己有没有在这过去一年之中学到了技术上的一些东西，结识到一些有益的朋友。这一年自己接触到技术上的问题很浅显，之前一个跟我聊天的学长也提醒过我：“这是一个浮躁的行业，浮躁的人喜欢急功近利，刚刚追求表面”在我听到这句话时，的确给我狠狠的以一巴掌。急功近利地去挖掘漏洞而不了解他的原理，急功近利地去使用他人写的工具而不能自己了解而后改善之，急功近利地卖弄而不能脚踏实地地学习等。大一的暑假也是匆匆忙忙简简单单学习了一下python和PHP的内容，另外也做了一些CTF关于WEB方面的练习，结识了一些打CTF比赛的小伙伴。之前也是踌躇满志地想在暑假提高自己的能力，然后我并没感觉到效果。又是一个新的学期，在这个学期第一天的前夕。还是给自己定下一些目标和计划吧。首先应该是四级吧，先每天做几个题目把它给搞定吧。然后就是上个学期我在图书馆推荐了不少关于安全类的书籍差不多应该可以到馆了吧，尽力去借来看看。还有Python和PHP的内容继续进行学习吧。关于自己专业课方面尽力学好，期末不挂科吧。最后昨天晚上那大四学长跟我说自己拉人组Team的问题，这个可能真的是我之前不敢想的一个事情，但是他给我了不少的鼓励。我也是跃跃欲试的，但是感觉心有余而力不足吧。我个人的能力还是不行的，这种Team在学校搞起来怕也很难发展并不能得到相关方面的支持。还是自己先学习好技术吧，待到时机成熟，也说不定。言至此。</p>
<h2 id="0x02-结语"><a href="#0x02-结语" class="headerlink" title="0x02 结语"></a>0x02 结语</h2><p>这篇博文算是我大一的一个学期的总结和大二新的计划和目标的先行书吧，望以此勉之。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;昨天晚上结识一个今年大四的南京大表哥。跟他聊了很多，有感遂写下这篇博文。&lt;/p&gt;
&lt;h2 id=&quot;0
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title> 2016年X-NUCA全国高校网安联赛--赛前指导练习题web进阶篇Writeup </title>
    <link href="http://uknow.top/undefined/2016%E5%B9%B4X-NUCA%E5%85%A8%E5%9B%BD%E9%AB%98%E6%A0%A1%E7%BD%91%E5%AE%89%E8%81%94%E8%B5%9B-%E8%B5%9B%E5%89%8D%E6%8C%87%E5%AF%BC%E7%BB%83%E4%B9%A0%E9%A2%98web%E8%BF%9B%E9%98%B6%E7%AF%87Writeup20160813/"/>
    <id>http://uknow.top/undefined/2016年X-NUCA全国高校网安联赛-赛前指导练习题web进阶篇Writeup20160813/</id>
    <published>2016-08-13T08:42:44.000Z</published>
    <updated>2016-08-13T11:46:24.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>第一次写Writeup，尝试一下吧！</p>
<h2 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h2><h3 id="捉迷藏"><a href="#捉迷藏" class="headerlink" title="捉迷藏"></a>捉迷藏</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>捉迷藏<br>描述：从页面中找到隐藏的flag<br><a href="http://218.76.35.75:20111" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" alt=""><br>F12审查元素发现有一个Index.php的链接，把背景去掉。点击链接得到flag</p>
<h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p>flag{th!5!5n0tth3fl@g}</p>
<h3 id="简单问答"><a href="#简单问答" class="headerlink" title="简单问答"></a>简单问答</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><p>简单问答<br>描述：这几个小问题实在是太简单了，相信你一定能获得满分<br><a href="http://218.76.35.75:20112" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>审查元素将按钮键的disabled改为abled。<br>利用burpsuite抓取数据包，修改参数提交得到flag<br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png" alt=""></p>
<h4 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag"></a>Flag</h4><p>flag{W3ll_d0n3}</p>
<h3 id="后台后台后台"><a href="#后台后台后台" class="headerlink" title="后台后台后台"></a>后台后台后台</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><p>后台后台后台<br>描述：登录这个网站很容易，请进入后台寻找flag<br><a href="http://218.76.35.75:20113" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><p>利用burpsuite抓取数据包，把cookie中的Member参数修改为Admin的base64的编码，得到flag.<br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%875.png" alt=""></p>
<h4 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag"></a>Flag</h4><p>flag{C00ki3_n0m_n0m_n0m}</p>
<h3 id="php是最好的语言"><a href="#php是最好的语言" class="headerlink" title="php是最好的语言"></a>php是最好的语言</h3><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><p>php是最好的语言<br>描述：据说php是最好的语言，perfect？来试试看<br><a href="http://218.76.35.75:20114" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><p>payload如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://218.76.35.75:20114/?foo=&#123;&quot;bar1&quot;:&quot;2017f&quot;,&quot;bar2&quot;:[[1,1],1,1,1,1]&#125;&amp;cat[0]=123&amp;cat[1][]=1&amp;dog=%00htctf2016</div></pre></td></tr></table></figure></p>
<h4 id="Flag-3"><a href="#Flag-3" class="headerlink" title="Flag"></a>Flag</h4><p>flag{php_i5_n0t_b4d}</p>
<h3 id="忘记密码了"><a href="#忘记密码了" class="headerlink" title="忘记密码了"></a>忘记密码了</h3><h4 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h4><p>忘记密码了<br>描述：在这个网站，记录了小伙伴们的密码。 可是slash的密码怎么也找不到了，你能帮忙找出来么<br><a href="http://218.76.35.75:20115/" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><p>把bob和sam的MD5解出来分别是bob317和sam429,利用脚本爆破密码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line">import hashlib</div><div class="line"></div><div class="line">r=requests.session()</div><div class="line"></div><div class="line">url=&quot;http://218.76.35.75:20115/index.php&quot;</div><div class="line">for i in xrange(1000):</div><div class="line"></div><div class="line">    header=&#123;&quot;User-Agent&quot;:&quot;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:47.0) Gecko/20100101 Firefox/47.0&quot;&#125;</div><div class="line"></div><div class="line">    param=hashlib.md5(&quot;slash&quot;+str(i)).hexdigest()</div><div class="line"></div><div class="line">    tmpurl=url+&quot;?page=&quot;+param</div><div class="line"></div><div class="line">    print tmpurl</div><div class="line"></div><div class="line">    result=r.get(tmpurl,headers=header)</div><div class="line"></div><div class="line">    content=result.content</div><div class="line"></div><div class="line">    if &apos;flag&apos; in content or &apos;Flag&apos; in content or &apos;FLAG&apos; in content:</div><div class="line"></div><div class="line">        print content</div><div class="line"></div><div class="line">        print i</div><div class="line"></div><div class="line">        break</div></pre></td></tr></table></figure></p>
<p>得到结果<br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%876.png" alt=""></p>
<h4 id="Flag-4"><a href="#Flag-4" class="headerlink" title="Flag"></a>Flag</h4><p>flag{n1ce_te4m_n1ce_Rock}</p>
<h3 id="php是最好的语言-1"><a href="#php是最好的语言-1" class="headerlink" title="php是最好的语言"></a>php是最好的语言</h3><h4 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h4><p>http 头注入<br>描述：换个浏览器试试？</p>
<p><a href="http://218.76.35.75:20121" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h4><p>抓包得到数据包，Referer处加*号。sqlmap -r xx.txt。得到flag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /heetian.php HTTP/1.1</div><div class="line">Host: 218.76.35.75:20121</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Referer: http://www.google.com/search?hl=en&amp;q=*</div><div class="line">Cookie: PHPSESSID=gr7gtgjm8v0q5a9j3ampntgmp0; User=JohnTan101; Member=Tm9ybWFs</div><div class="line">Connection: close</div><div class="line">Upgrade-Insecure-Requests: 1</div></pre></td></tr></table></figure></p>
<h4 id="Flag-5"><a href="#Flag-5" class="headerlink" title="Flag"></a>Flag</h4><p>flag{Y0ugetT82f00000laev}</p>
<h3 id="简单的文件上传"><a href="#简单的文件上传" class="headerlink" title="简单的文件上传"></a>简单的文件上传</h3><h4 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h4><p>简单的文件上传<br>描述：上传php 文件就给你flag<br><a href="http://218.76.35.75:20122/" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h4><p>上传一个php文件，抓包将Content-Type改为 image/jpeg上传，得到flag.<br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%877.png" alt=""></p>
<h4 id="Flag-6"><a href="#Flag-6" class="headerlink" title="Flag"></a>Flag</h4><p>flag{Upl00d30668ss9h97aFil3}</p>
<h3 id="简单的JS"><a href="#简单的JS" class="headerlink" title="简单的JS"></a>简单的JS</h3><h4 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h4><p>简单的JS<br>描述：执行后的结果就是flag 的url<br><a href="http://218.76.35.75:20123/" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h4><p>打开解题链接</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%878.png" alt=""></p>
<p>还有一个明显提示 evilurl is flag </p>
<p>看不出什么其他的，直接查看源码</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%879.png" alt=""></p>
<p>在这里可以看到定义一个p，eval以后写到页面，但是好像并没有输出什么，猜测可能这里没有执行成功，JS 问题可以直接查看控制台</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8710.png" alt=""></p>
<p>可以看到报语法错误，</p>
<p>我们把这个语句copy下来，自己调试好</p>
<p>没修改之前，明显的有报错</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8711.png" alt=""></p>
<p>我们把它第二行的空格和第一行的换行符删掉，然后执行eval，看下P 到底是什么</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8712.png" alt=""></p>
<p>题目提示执行后的结果就是flag的url</p>
<p>访问这个url试试</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8713.png" alt=""></p>
<p>页面没有输出什么，再抓包看看</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8714.png" alt=""></p>
<p>可以看到flag已经写在cookie里了。</p>
<h4 id="Flag-7"><a href="#Flag-7" class="headerlink" title="Flag"></a>Flag</h4><p>flag{COOk1els60SecU5e}</p>
<h3 id="试试xss"><a href="#试试xss" class="headerlink" title="试试xss"></a>试试xss</h3><h4 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h4><p>描述：alert document.domain</p>
<p><a href="http://218.76.35.75:20125/" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h4><p>打开就一个输入框，输入字母啥的没啥反应。。。。</p>
<p>被谁吃了。。。</p>
<p>既然提示xss，就试试特殊符号吧，比如“&lt;&gt;”</p>
<p>加个’的时候，多了一个img标签，什么鬼。。。。。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8715.png" alt=""></p>
<p>当我输入’aaaaaaaaaaaa的时候。。。。</p>
<p>aaaaaaaaaaaa居然直接成了img的一个属性名，可怕。。。。</p>
<p>这样就简单了，瞬间就想到onerror，既然hint 是alertdocument.domain，那就用这个吧</p>
<p>直接’ onerror=alert(document.domain)这样不就可以了，试试先。。。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8716.png" alt=""></p>
<p>居然没弹出来。。。。</p>
<p>为什么！！！！！</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8717.png" alt=""></p>
<p>查看下源码。。。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8718.png" alt=""></p>
<p>至少知道了我们输入的内容并没有被实体编码。。。</p>
<p>但是onerror事件没有发生，就说明img标签的src并没有出错。。。</p>
<p>再看看刚才我们输入的内容</p>
<p>onerror=alert(document.domain)</p>
<p>如果在’前面加一个不存在的路径，那后面的onerror事件不就可以出发了么。。。</p>
<p>试试再说。。。。</p>
<p>输入heetian.jpg’ onerror=alert(document.domain)</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8719.png" alt=""></p>
<p>终于出来了。。。</p>
<h4 id="Flag-8"><a href="#Flag-8" class="headerlink" title="Flag"></a>Flag</h4><p>flag{D0Gum6Ntd0M11n}</p>
<h3 id="简单的文件包含"><a href="#简单的文件包含" class="headerlink" title="简单的文件包含"></a>简单的文件包含</h3><h4 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h4><p>简单的文件包含<br>描述：Flag 在/flag<br><a href="http://218.76.35.75:20126/" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h4><p>打开解题链接，可以看到4个超链接，然后就没有然后了。。。</p>
<p>一个一个访问看看。。。。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8720.png" alt=""></p>
<p>考过3级（没考过）的渣渣表示看不懂</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8721.png" alt=""></p>
<p>其他链接也是如此，就只有一句英文的名言(看起来似乎是名言… 我也不知道是不是，知道的告诉我下…，先谢谢了…)。。。。</p>
<p>抓包也没看到什么可疑的东西</p>
<p>再看看题目提示吧，没准就有就用。。。</p>
<p>标题是文件包含，也说了flag的位置。。。</p>
<p>再回来看看前面的4个超链接</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8722.png" alt=""></p>
<p>这种url形式的，看起来有点像是文件包含，直接修改page值为/flag 看看</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8723.png" alt=""></p>
<p>居然不在这里。。。提示又说在/flag ，可以试试多加几个../../../../../试试~~~~</p>
<p>不过在这之前还是先查看源码和响应包吧….</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8724.png" alt=""></p>
<p>有注释。。。</p>
<p>访问这个页面。。。得到flag。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8725.png" alt=""></p>
<h4 id="Flag-9"><a href="#Flag-9" class="headerlink" title="Flag"></a>Flag</h4><p>flag{F11elNcLud3Get}</p>
<h3 id="简单的验证"><a href="#简单的验证" class="headerlink" title="简单的验证"></a>简单的验证</h3><h4 id="题目-10"><a href="#题目-10" class="headerlink" title="题目"></a>题目</h4><p>简单的验证<br>描述：你不是amdin，没有权限查看flag<br><a href="http://218.76.35.75:20127" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-10"><a href="#解题思路-10" class="headerlink" title="解题思路"></a>解题思路</h4><p>和题目5差不多，把cookie里面user改成admin之后，爆破guess值，最后是573<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">r=requests.session()</div><div class="line"></div><div class="line">url=&quot;http://218.76.35.75:20127/index.php&quot;</div><div class="line">for i in xrange(1000,0,-1):</div><div class="line"></div><div class="line">    header=&#123;&quot;Cookie&quot;:&quot;user=admin;guess=&quot;+str(i)&#125;</div><div class="line"></div><div class="line">    print header</div><div class="line"></div><div class="line">    result=r.get(url,headers=header)</div><div class="line"></div><div class="line">    content=result.content</div><div class="line"></div><div class="line">    if &apos;flag&apos; in content or &apos;Flag&apos; in content or &apos;FLAG&apos; in content:</div><div class="line"></div><div class="line">        print content</div><div class="line"></div><div class="line">        print i</div><div class="line"></div><div class="line">        break</div></pre></td></tr></table></figure></p>
<p>运行结果<br><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8726.png" alt=""></p>
<h4 id="Flag-10"><a href="#Flag-10" class="headerlink" title="Flag"></a>Flag</h4><p>flag{EaSy70Ch1ngG00kie}</p>
<h3 id="注入那么简单"><a href="#注入那么简单" class="headerlink" title="注入那么简单"></a>注入那么简单</h3><h4 id="题目-11"><a href="#题目-11" class="headerlink" title="题目"></a>题目</h4><p>注入那么简单<br>描述：注入、猜表、拿分，就是这么简单<br><a href="http://218.76.35.75:20101" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-11"><a href="#解题思路-11" class="headerlink" title="解题思路"></a>解题思路</h4><p>题目要求是注入，可输入的参数为name </p>
<p>首先尝试name=guest 存在返回。</p>
<p>再次尝试name=guest’or’1’=’1,返回3列，说明没有做过多的过滤，这里，我们尝试用order by 来获得列。</p>
<p>Name=guest’order by 1 %23 有返回，依次递增数字到4时报错，说明有3列。</p>
<p>题目提示，说要猜表，构造如下语句，来获得flag</p>
<p><a href="http://218.76.35.75:20101/?name=guest%27union%20select%201,flag,3%20from%20flag%23" target="_blank" rel="external">http://218.76.35.75:20101/?name=guest%27union%20select%201,flag,3%20from%20flag%23</a></p>
<h4 id="Flag-11"><a href="#Flag-11" class="headerlink" title="Flag"></a>Flag</h4><p>flag{thisisforunionsqlinjection}</p>
<h3 id="你能进来么"><a href="#你能进来么" class="headerlink" title="你能进来么"></a>你能进来么</h3><h4 id="题目-12"><a href="#题目-12" class="headerlink" title="题目"></a>题目</h4><p>你能进来么<br>描述：图片上传功能真的好强大<br><a href="http://218.76.35.75:20103" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-12"><a href="#解题思路-12" class="headerlink" title="解题思路"></a>解题思路</h4><p>上传一个图片马直接拿到flag</p>
<h4 id="Flag-12"><a href="#Flag-12" class="headerlink" title="Flag"></a>Flag</h4><p>flag{uploadwithinclude}</p>
<h3 id="好简单的题目"><a href="#好简单的题目" class="headerlink" title="好简单的题目"></a>好简单的题目</h3><h4 id="题目-13"><a href="#题目-13" class="headerlink" title="题目"></a>题目</h4><p>好简单的题目<br>描述：我要dir溢出你，信不信<br><a href="http://218.76.35.75:20105" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-13"><a href="#解题思路-13" class="headerlink" title="解题思路"></a>解题思路</h4><p>这个题目，原本就是一个不可能的命题，谁都不可能dir命令能溢出服务器，猜测出题者考察命令执行，并且，页面上也为目标Ip的输入，我们输入127.0.0.1 返回Ping的结果</p>
<p>猜测，目标IP后面可以加上连接符，执行多条语句。</p>
<p>这里有个小小的障碍，linux下的连接符有多个。如&amp;&amp;,||,;,| 我们需要都测试后面命令为简单的ls 即可</p>
<p>127.0.0.1111|ls</p>
<p>可以看到有md5字符串返回。猜测为文件夹。<br><a href="http://218.76.35.75:20105/3f83e03a1e4e65573ef11cca25048808/" target="_blank" rel="external">http://218.76.35.75:20105/3f83e03a1e4e65573ef11cca25048808/</a><br>访问即可获得flag</p>
<h4 id="Flag-13"><a href="#Flag-13" class="headerlink" title="Flag"></a>Flag</h4><p>flag{dirpwnitdoyouknow}</p>
<h3 id="没那么简单"><a href="#没那么简单" class="headerlink" title="没那么简单"></a>没那么简单</h3><h4 id="题目-14"><a href="#题目-14" class="headerlink" title="题目"></a>题目</h4><p>没那么简单<br>（50位解决者）<br>描述：我认为这是一个sql注入，你发现了吗<br><a href="http://218.76.35.75:20108" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-14"><a href="#解题思路-14" class="headerlink" title="解题思路"></a>解题思路</h4><p>发现存在robots.txt 文件</p>
<p>访问该地址。得到upload.zip</p>
<p>Upload.zip为index.php</p>
<p>查看Index.php后。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%9B%BE%E7%89%8727.png" alt=""></p>
<p>发现对大多数的字符进行了过滤。该过滤方式为黑名单判断，我们只需要找到程序中，为过滤完全的字符，进行payload编写即可。</p>
<p>查找wooyun或者其他地方的资料库，可以知道.%0a 同样可以用来做空格的代替。</p>
<p>那么我们只需要构造如下参数提交</p>
<p>username=admind’%a0union%a0select%a0’4124bc0a9335c27f086f24ba207a4912’%a0from%a0admin%a0where%a0’1’=’1&amp;password=aa<br>即可得到flag</p>
<h4 id="Flag-14"><a href="#Flag-14" class="headerlink" title="Flag"></a>Flag</h4><p>flag{robotsfilehassomehappything}</p>
<h3 id="有趣的注入"><a href="#有趣的注入" class="headerlink" title="有趣的注入"></a>有趣的注入</h3><h4 id="题目-15"><a href="#题目-15" class="headerlink" title="题目"></a>题目</h4><p>有趣的注入<br>描述：在渗透测试中，任何细节都不能错过。sql注入是渗透测试中最常使用的攻击技术。这里有一个简单的网站，请帮忙找到flag。<br><a href="http://218.76.35.75:20116" target="_blank" rel="external">题目链接</a></p>
<h4 id="解题思路-15"><a href="#解题思路-15" class="headerlink" title="解题思路"></a>解题思路</h4><p>1.文件包含（需要开一下脑洞，猜一猜文件名）</p>
<p>根据提示，可以得到一个目录：</p>
<p><a href="http://218.76.35.75:20116/flagishere/" target="_blank" rel="external">http://218.76.35.75:20116/flagishere/</a><br>2.访问这个目录，是一个登录界面，这道题目考的是注入，只不过考点是sql注入的绕过。后端代码中检测了并且拦截了各种sql的关键字。</p>
<p>但是，可以使用“||”来代替关键词 OR</p>
<p>用户名和密码输入admin’||’1’=’1即可绕过检测登录，获得flag</p>
<h4 id="Flag-15"><a href="#Flag-15" class="headerlink" title="Flag"></a>Flag</h4><p>flag{s0_e4sy<em>sq1i</em>:)}</p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这次CTF的Writeup，有的解题思路是题目给出的，一部分是自己的想法。自己的水平还是有些不够吧！这里只写了一些题目的Writeup，有的题目的链接已经失效了。<br>有的题目是真的不知道做，思路也看不大懂。就这样吧，后面如果可以的话，再更新吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;第一次写Writeup，尝试一下吧！&lt;/p&gt;
&lt;h2 id=&quot;0x01-正文&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中那些脑洞大开的编码和加密</title>
    <link href="http://uknow.top/undefined/CTF%E4%B8%AD%E9%82%A3%E4%BA%9B%E8%84%91%E6%B4%9E%E5%A4%A7%E5%BC%80%E7%9A%84%E7%BC%96%E7%A0%81%E5%92%8C%E5%8A%A0%E5%AF%8620160812/"/>
    <id>http://uknow.top/undefined/CTF中那些脑洞大开的编码和加密20160812/</id>
    <published>2016-08-12T11:38:30.000Z</published>
    <updated>2016-08-12T12:06:00.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF中那些脑洞大开的编码和加密"><a href="#CTF中那些脑洞大开的编码和加密" class="headerlink" title="CTF中那些脑洞大开的编码和加密"></a>CTF中那些脑洞大开的编码和加密</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>正文开始之前先闲扯几句吧，玩CTF的小伙伴也许会遇到类似这样的问题:表哥，你知道这是什么加密吗？其实CTF中脑洞密码题(非现代加密方式)一般都是各种古典密码的变形，一般出题者会对密文进行一些处理，但是会给留一些线索，所以写此文的目的是想给小伙伴做题时给一些参考，当然常在CTF里出现的编码也可以了解一下。本来是想尽快写出参考的文章，无奈期间被各种事情耽搁导致文章断断续续写了2个月，文章肯定有许多没有提及到，欢迎小伙伴补充，总之，希望对小伙伴们有帮助吧！</p>
<h2 id="0x01-目录"><a href="#0x01-目录" class="headerlink" title="0x01 目录"></a>0x01 目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">常见编码:</div><div class="line">    1.ASCII编码</div><div class="line">    2.Base64/32/16编码</div><div class="line">    3.shellcode编码</div><div class="line">    4.Quoted-printable编码</div><div class="line">    5.XXencode编码</div><div class="line">    6.UUencode编码</div><div class="line">    7.URL编码</div><div class="line">    8.Unicode编码</div><div class="line">    9.Escape/Unescape编码</div><div class="line">    10.HTML实体编码</div><div class="line">    11.敲击码(Tap code)</div><div class="line">    12.莫尔斯电码(Morse Code)</div><div class="line">    13.编码的故事</div><div class="line"> </div><div class="line">各种文本加密</div><div class="line"> </div><div class="line">换位加密:</div><div class="line">    1.栅栏密码(Rail-fence Cipher)</div><div class="line">    2.曲路密码(Curve Cipher)</div><div class="line">    3.列移位密码(Columnar Transposition Cipher)</div><div class="line">     </div><div class="line">替换加密:</div><div class="line">    1.埃特巴什码(Atbash Cipher)</div><div class="line">    2.凯撒密码(Caesar Cipher)</div><div class="line">    3.ROT5/13/18/47</div><div class="line">    4.简单换位密码(Simple Substitution Cipher)</div><div class="line">    5.希尔密码(Hill Cipher)</div><div class="line">    6.猪圈密码(Pigpen Cipher)</div><div class="line">    7.波利比奥斯方阵密码（Polybius Square Cipher)</div><div class="line">    8.夏多密码(曲折加密)</div><div class="line">    9.普莱菲尔密码(Playfair Cipher)</div><div class="line">    10.维吉尼亚密码(Vigenère Cipher)</div><div class="line">    11.自动密钥密码(Autokey Cipher)</div><div class="line">    12.博福特密码(Beaufort Cipher)</div><div class="line">    13.滚动密钥密码(Running Key Cipher)</div><div class="line">    14.Porta密码(Porta Cipher)</div><div class="line">    15.同音替换密码(Homophonic Substitution Cipher)</div><div class="line">    16.仿射密码(Affine Cipher)</div><div class="line">    17.培根密码(Baconian Cipher)</div><div class="line">    18.ADFGX和ADFGVX密码(ADFG/VX Cipher)</div><div class="line">    19.双密码(Bifid Cipher)</div><div class="line">    20.三分密码(Trifid Cipher)</div><div class="line">    21.四方密码(Four-Square Cipher)</div><div class="line">    22.棋盘密码（Checkerboard Cipher)</div><div class="line">    23.跨棋盘密码(Straddle Checkerboard Cipher)</div><div class="line">    24.分组摩尔斯替换密码(Fractionated Morse Cipher)</div><div class="line">    25.Bazeries密码(Bazeries Cipher)</div><div class="line">    26.Digrafid密码(Digrafid Cipher)</div><div class="line">    27.格朗普雷密码(Grandpré Cipher)</div><div class="line">    28.比尔密码(Beale ciphers)</div><div class="line">    29.键盘密码(Keyboard Cipher)</div><div class="line"> </div><div class="line">其他有趣的机械密码:</div><div class="line">    1.恩尼格玛密码</div><div class="line"> </div><div class="line">代码混淆加密:</div><div class="line">    1.asp混淆加密</div><div class="line">    2.php混淆加密</div><div class="line">    3.css/js混淆加密</div><div class="line">    4.VBScript.Encode混淆加密</div><div class="line">    5.ppencode</div><div class="line">    6.rrencode</div><div class="line">    7.jjencode/aaencode</div><div class="line">    8.JSfuck</div><div class="line">    9.jother</div><div class="line">    10.brainfuck编程语言</div><div class="line"> </div><div class="line">相关工具</div><div class="line"> </div><div class="line">参考网站</div></pre></td></tr></table></figure>
<h2 id="0x02-正文"><a href="#0x02-正文" class="headerlink" title="0x02 正文"></a>0x02 正文</h2><h3 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h3><h4 id="1-ASCII编码"><a href="#1-ASCII编码" class="headerlink" title="1.ASCII编码"></a>1.ASCII编码</h4><p>ASCII编码大致可以分作三部分组成：</p>
<p>第一部分是：ASCII非打印控制字符（参详ASCII码表中0-31）;</p>
<p>第二部分是：ASCII打印字符，也就是CTF中常用到的转换;</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3796563179.jpg" alt="ASCII.jpg"></p>
<p>第三部分是：扩展ASCII打印字符(第一第三部分详见<a href="http://www.asciima.com/" target="_blank" rel="external">ASCII码表</a>解释)。</p>
<p>编码转换示例</p>
<p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3369091416.png" alt="小葵.png"></p>
<p>ASCII编码对应十进制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">84 104 101 32 113 117 105 99 107 32 98 114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 116 104 101 32 108 97 122 121 32 100 111 103</div></pre></td></tr></table></figure>
<p>对应可以转换成二进制，八进制，十六进制等。</p>
<hr>
<h4 id="2-Base64-32-16编码"><a href="#2-Base64-32-16编码" class="headerlink" title="2.Base64/32/16编码"></a>2.Base64/32/16编码</h4><p>base64、base32、base16可以分别编码转化8位字节为6位、5位、4位。16,32,64分别表示用多少个字符来编码，这里我注重介绍base64。Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email，email via MIME,在XML中存储复杂数据。</p>
<p>编码原理：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因，这样就需要一张映射表，如下：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2533169055.png" alt="base64字母表.png"></p>
<p>举个例子(base64)：</p>
<blockquote>
<p>源文本：T   h   e</p>
<p>对应ascii码:84 104 101</p>
<p>8位binary：01010100 01101000 01100101</p>
<p>6位binary：010101 000110 100001 100101</p>
<p>高位补0：000010101 00000110 00100001 00100101</p>
<p>对应ascii码：21   6   33   37</p>
<p>查表：V  G  h  l</p>
</blockquote>
<p>利用Python base64模块，我们分别可以这样加密解密base64 32 16：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1167712558.png" alt="python加解base64.png"></p>
<hr>
<h4 id="3-shellcode编码"><a href="#3-shellcode编码" class="headerlink" title="3.shellcode编码"></a>3.shellcode编码</h4><p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>编码后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\x54\x68\x65\x7f\x71\x75\x69\x63\x6b\x7f\x62\x72\x6f\x77\x6e\x7f\x66\x6f\x78\x7f\x6a\x75\x6d\x70\x73\x7f\x6f\x76\x65\x72\x7f\x74\x68\x65\x7f\x6c\x61\x7a\x79\x7f\x64\x6f\x67</div></pre></td></tr></table></figure>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3876383071.png" alt="shellcode.png"></p>
<hr>
<h4 id="4-Quoted-printable-编码"><a href="#4-Quoted-printable-编码" class="headerlink" title="4.Quoted-printable 编码"></a>4.Quoted-printable 编码</h4><p>它是多用途互联网邮件扩展（MIME) 一种实现方式。有时候我们可以邮件头里面能够看到这样的编码，编码原理<a href="http://blog.chacuo.net/494.html" target="_blank" rel="external">参考</a>。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/27890106.png" alt="Quoted-printable 编码.png"></p>
<p>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p>
<p>编码后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">=E6=95=8F=E6=8D=B7=E7=9A=84=E6=A3=95=E8=89=B2=E7=8B=90=E7=8B=B8=E8=B7=B3=E8</div><div class="line">=BF=87=E4=BA=86=E6=87=92=E6=83=B0=E7=9A=84=E7=8B=97</div></pre></td></tr></table></figure>
<p>编码解码<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx" target="_blank" rel="external">链接</a></p>
<hr>
<h4 id="5-XXencode编码"><a href="#5-XXencode编码" class="headerlink" title="5.XXencode编码"></a>5.XXencode编码</h4><p>XXencode将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间。以所对应值的位置字符代替。它所选择的可打印字符是：+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz，一共64个字符。跟base64打印字符相比，就是UUencode多一个“-” 字符，少一个”/” 字符。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3058863885.png" alt="XXencode.png"></p>
<p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>编码后：<code>hJ4VZ653pOKBf647mPrRi64NjS0-eRKpkQm-jRaJm65FcNG-gMLdt64FjNkc+</code></p>
<p>编码解码<a href="http://web.chacuo.net/charsetxxencode" target="_blank" rel="external">链接</a></p>
<hr>
<h4 id="6-UUencode编码"><a href="#6-UUencode编码" class="headerlink" title="6.UUencode编码"></a>6.UUencode编码</h4><p>UUencode是一种二进制到文字的编码，最早在unix 邮件系统中使用，全称：Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p>
<p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>编码后：<code>M5&amp;amp;AE(&#39;%U:6-K(&amp;amp;)R;W=N(&amp;amp;9O&amp;gt;&quot;!J=6UP&amp;lt;R!O=F5R(&#39;1H92!L87IY(&amp;amp;1O9PH*</code></p>
<p>编码解码<a href="http://web.chacuo.net/charsetuuencode" target="_blank" rel="external">链接</a></p>
<hr>
<h4 id="7-URL编码"><a href="#7-URL编码" class="headerlink" title="7.URL编码"></a>7.URL编码</h4><p>url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p>
<p>源文本：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>编码后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%54%68%65%20%71%75%69%63%6b%20%62%72%6f%77%6e%20%66%6f%78%20%6a%75%6d%70%73%20%6f%76%65%72%20%74%68%65%20%6c%61%7a%79%20%64%6f%67</div></pre></td></tr></table></figure>
<p>编码解码<a href="http://web.chacuo.net/charseturlencode" target="_blank" rel="external">链接</a></p>
<hr>
<h4 id="8-Unicode编码"><a href="#8-Unicode编码" class="headerlink" title="8.Unicode编码"></a>8.Unicode编码</h4><p>Unicode编码有以下四种编码方式：</p>
<p>源文本：<code>The</code></p>
<p>&amp;#x [Hex]：<code>&amp;amp;#x0054;&amp;amp;#x0068;&amp;amp;#x0065;</code></p>
<p>&amp;# [Decimal]：<code>&amp;amp;#00084;&amp;amp;#00104;&amp;amp;#00101;</code></p>
<p>\U [Hex]：<code>\U0054\U0068\U0065</code></p>
<p>\U+ [Hex]：<code>\U+0054\U+0068\U+0065</code></p>
<p>编码解码<a href="http://www.mxcz.net/tools/Unicode.aspx" target="_blank" rel="external">链接</a></p>
<hr>
<h4 id="9-Escape-Unescape编码"><a href="#9-Escape-Unescape编码" class="headerlink" title="9.Escape/Unescape编码"></a>9.Escape/Unescape编码</h4><p>Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。</p>
<p>源文本：<code>The</code></p>
<p>编码后：<code>%u0054%u0068%u0065</code></p>
<hr>
<h4 id="10-HTML实体编码"><a href="#10-HTML实体编码" class="headerlink" title="10.HTML实体编码"></a>10.HTML实体编码</h4><p><img src="https://www.hackfun.org/usr/uploads/2016/07/299609014.png" alt="html实体编码.png"></p>
<p>完整编码手册<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="external">参考</a></p>
<hr>
<h4 id="11-敲击码"><a href="#11-敲击码" class="headerlink" title="11.敲击码"></a>11.敲击码</h4><p>敲击码(Tap code)是一种以非常简单的方式对文本信息进行编码的方法。因该编码对信息通过使用一系列的点击声音来编码而命名，敲击码是基于5×5方格波利比奥斯方阵来实现的，不同点是是用K字母被整合到C中。</p>
<p>敲击码表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  1  2  3  4  5</div><div class="line">1 A  B C/K D  E</div><div class="line">2 F  G  H  I  J </div><div class="line">3 L  M  N  O  P</div><div class="line">4 Q  R  S  T  U</div><div class="line">5 V  W  X  Y  Z</div></pre></td></tr></table></figure>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1657370061.jpg" alt="敲击码.jpg"></p>
<hr>
<h4 id="12-莫尔斯电码"><a href="#12-莫尔斯电码" class="headerlink" title="12.莫尔斯电码"></a>12.莫尔斯电码</h4><p>摩尔斯电码(Morse Code)是由美国人萨缪尔·摩尔斯在1836年发明的一种时通时断的且通过不同的排列顺序来表达不同英文字母、数字和标点符号的信号代码，摩尔斯电码主要由以下5种它的代码组成：</p>
<ol>
<li>点（.）</li>
<li>划（-）</li>
<li>每个字符间短的停顿（通常用空格表示停顿）</li>
<li>每个词之间中等的停顿（通常用<code>/</code>划分）</li>
<li>以及句子之间长的停顿</li>
</ol>
<p>摩尔斯电码字母和数字对应表：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt=""></p>
<p>源文本:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>编码后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- .... . / --.- ..- .. -.-. -.- / -... .-. --- .-- -. / ..-. --- -..- / .--- ..- -- .--. ... / --- ...- . .-. / - .... . / .-.. .- --.. -.-- / -.. --- --.</div></pre></td></tr></table></figure>
<p>在线编码解码<a href="http://rumkin.com/tools/cipher/morse.php" target="_blank" rel="external">传送门</a></p>
<p>摩尔斯电码除了能对字母数字编码以外还对一些标点符号，非英语字符进行了编码，而且还有一些特定意义的组合称为特殊符号，比如<code>·-·-·-·-·-</code>表达的意思是调用信号，表示“我有消息发送”。如果你感兴趣可以参考<a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81" target="_blank" rel="external">WiKi</a>。</p>
<hr>
<h4 id="13-编码的故事"><a href="#13-编码的故事" class="headerlink" title="13.编码的故事"></a>13.编码的故事</h4><p>推荐大家去看<a href="http://wenku.baidu.com/link?url=kTrscV5j5AsZq5zvBpr2jdkEJW8LqgrkkKsddwWA3YlXmgeqh_be95nMxqbFPOYoVBVy3A6lutlcXVDYLdZ-3iRawJpc0VZ71as07FnxtGS" target="_blank" rel="external">编码的故事</a>一文。</p>
<hr>
<h3 id="各种文本加密"><a href="#各种文本加密" class="headerlink" title="各种文本加密"></a>各种文本加密</h3><p>文本加密可以将正常文本内容打乱为不可连读的文字或符号(汉字 数字 字母 音乐符号 国际音标 盲文 韩文 日文 傣文 彝文 箭头符号 花朵符号 俄文)，换行等格式信息也会被清除，达到加密的作用。在进行文本加密时可以设定一个密码，这样只有知道密码的人才能解密文本。密码可以是数字、字母和下划线，最多九位。</p>
<p>加密示例：</p>
<p>源文本：<code>敏捷的棕色狐狸跳过了懒惰的狗</code></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/997899652.png" alt="文本加密.png"></p>
<p>编码解码<a href="http://www.qqxiuzi.cn/bianma/wenbenjiami.php" target="_blank" rel="external">链接</a></p>
<hr>
<h3 id="换位加密"><a href="#换位加密" class="headerlink" title="换位加密"></a>换位加密</h3><h4 id="1-栅栏密码"><a href="#1-栅栏密码" class="headerlink" title="1.栅栏密码"></a>1.栅栏密码</h4><p><strong>（1）介绍</strong></p>
<p>栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文，这里以2栏栅栏加密为例。</p>
<p>明文：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>去空格：<code>Thequickbrownfoxjumpsoverthelazydog</code></p>
<p>分组：<code>Th eq ui ck br ow nf ox ju mp so ve rt he la zy do g</code></p>
<p>第一组：<code>Teucbonojmsvrhlzdg</code></p>
<p>第二组：<code>hqikrwfxupoeteayo</code></p>
<p>密文：<code>Teucbonojmsvrhlzdghqikrwfxupoeteayo</code></p>
<p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="2-曲路密码"><a href="#2-曲路密码" class="headerlink" title="2.曲路密码"></a>2.曲路密码</h4><p>曲路密码(Curve Cipher)是一种换位密码，需要事先双方约定密钥(也就是曲路路径)。</p>
<p>明文：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>填入5行7列表(事先约定填充的行列数)</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2848330636.png" alt="曲路密码表.png"></p>
<p>加密的回路线(事先约定填充的行列数)</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/851589488.png" alt="曲路密码路径.png"></p>
<p>密文：<code>gesfc inpho dtmwu qoury zejre hbxva lookT</code></p>
<hr>
<h4 id="3-列移位密码"><a href="#3-列移位密码" class="headerlink" title="3.列移位密码"></a>3.列移位密码</h4><p><strong>（1）介绍</strong></p>
<p>列移位密码(Columnar Transposition Cipher)是一种比较简单，易于实现的换位密码，通过一个简单的规则将明文打乱混合成密文。下面我们以明文 The quick brown fox jumps over the lazy dog，密钥 how are u为例：</p>
<p>填入5行7列表(事先约定填充的行列数，如果明文不能填充完表格可以约定使用某个字母进行填充)</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/917477580.png" alt="列移位密码.png"></p>
<p>密钥：<code>how are u</code></p>
<p>按how are u在字母表中的出现的先后顺序进行编号，我们就有a为1,e为2，h为3，o为4，r为5，u为6，w为7，所以先写出a列，其次e列，以此类推写出的结果便是密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2703606324.png" alt="列移位密码示例.png"></p>
<p>密文：<code>qoury inpho Tkool hbxva uwmtd cfseg erjez</code></p>
<p>这里提供一个行列数相等的填充规则列移位密码加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/columnar-transposition/" target="_blank" rel="external">链接</a></p>
<p>另外由列移位密码变化来的密码也有其他的，比如<a href="http://www.thonky.com/kryptos/amsco-cipher" target="_blank" rel="external">Amsco密码</a>(Amsco Cipher)和<a href="http://www.thonky.com/kryptos/cadenus-cipher" target="_blank" rel="external">Cadenus密码</a>(Cadenus Cipher)。</p>
<h3 id="替换加密"><a href="#替换加密" class="headerlink" title="替换加密"></a>替换加密</h3><hr>
<h4 id="1-埃特巴什码"><a href="#1-埃特巴什码" class="headerlink" title="1.埃特巴什码"></a>1.埃特巴什码</h4><p><strong>（1）介绍</strong></p>
<p>埃特巴什码(Atbash Cipher)是一种以字母倒序排列作为特殊密钥的替换加密，也就是下面的对应关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZ</div><div class="line">ZYXWVUTSRQPONMLKJIHGFEDCBA</div></pre></td></tr></table></figure>
<p>明文：<code>the quick brown fox jumps over the lazy dog</code></p>
<p>密文：<code>gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt</code></p>
<p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="2-凯撒密码"><a href="#2-凯撒密码" class="headerlink" title="2.凯撒密码"></a>2.凯撒密码</h4><p><strong>（1）介绍</strong></p>
<p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推，更多<a href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="external">参考</a>。</p>
<p>加密实例：</p>
<p>明文：<code>The quick brown fox jumps over the lazy dog</code></p>
<p>偏移量：1</p>
<p>密文：<code>Uif rvjdl cspxo gpy kvnqt pwfs uif mbaz eph</code></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/193858221.png" alt="凯撒密码.png"></p>
<p>你也可以使用Python的pycipher模块来加解密，如果提示没有这个模块可以通过<code>pip install pycipher</code>或者其他方式来安装pycipher模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from pycipher import Caesar</div><div class="line">&gt;&gt;&gt; Caesar(key=1).encipher(&apos;The quick brown fox jumps over the lazy dog&apos;)</div><div class="line">&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;</div><div class="line">&gt;&gt;&gt; Caesar(key=1).decipher(&apos;UIFRVJDLCSPXOGPYKVNQTPWFSUIFMBAZEPH&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>参考表(这里是向后移位加密，向前移位解密)：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3176497054.jpg" alt="凯撒密码移位规律表.jpg"></p>
<p>加密解密<a href="http://planetcalc.com/1434/" target="_blank" rel="external">链接</a>(这个网站可以将26种情况一次性列举出来，比较方便)</p>
<hr>
<h4 id="3-ROT5-13-18-47"><a href="#3-ROT5-13-18-47" class="headerlink" title="3.ROT5/13/18/47"></a>3.ROT5/13/18/47</h4><p><strong>（1）介绍</strong></p>
<p>ROT5/13/18/47是一种简单的码元位置顺序替换暗码。此类编码具有可逆性，可以自我解密，主要用于应对快速浏览，或者是机器的读取。</p>
<blockquote>
<p>ROT5 是 rotate by 5 places 的简写，意思是旋转5个位置，其它皆同。下面分别说说它们的编码方式：</p>
<p>ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。</p>
<p>ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。</p>
<p>ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。</p>
<p>ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126，具体可参考ASCII编码，下面以rot13以例。</p>
</blockquote>
<p>明文：<code>the quick brown fox jumps over the lazy dog</code></p>
<p>密文：<code>gur dhvpx oebja sbk whzcf bire gur ynml qbt</code></p>
<p><a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="4-简单替换密码"><a href="#4-简单替换密码" class="headerlink" title="4.简单替换密码"></a>4.简单替换密码</h4><p><strong>（1）介绍</strong></p>
<p>简单换位密码(Simple Substitution Cipher)加密方式是以每个明文字母被与之唯一对应且不同的字母替换的方式实现的，它不同于恺撒密码，因为密码字母表的字母不是简单的移位，而是完全是混乱的。 比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">明文字母 : abcdefghijklmnopqrstuvwxyz</div><div class="line">明文字母 : phqgiumeaylnofdxjkrcvstzwb</div></pre></td></tr></table></figure>
<p>明文：<code>the quick brown fox jumps over the lazy dog</code></p>
<p>密文：<code>cei jvaql hkdtf udz yvoxr dsik cei npbw gdm</code></p>
<p><strong>（2）破解</strong></p>
<p>当密文数据足够多时这种密码我们可以通过字频分析方法破解或其他方法破解，比较好的在线词频分析网站<a href="http://quipqiup.com/index.php" target="_blank" rel="external">http://quipqiup.com/index.php</a>(翻= =墙)，这里推荐一篇通过”爬山算法”来破解简单替换密码<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-simple-substitution-cipher/" target="_blank" rel="external">文章</a>，基于文中的算法实现的工具来破解示例。</p>
<p>密文：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pmpafxaikkitprdsikcplifhwceigixkirradfeirdgkipgigudkcekiigpwrpucikceiginasikwduearrxiiqepcceindgmieinpwdfprduppcedoikiqiasafmfddfipfgmdafmfdteiki</div></pre></td></tr></table></figure>
<p>解密：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1310379174.png" alt="破解简单替换密码.png"></p>
<p>(ps:score值越小越准确)</p>
<p>密钥：<code>PHQGIUMEAVLNOFDXBKRCZSTJWY</code></p>
<p>明文：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AGAINPIERREWASOVERTAKENBYTHEDEPRESSIONHESODREADEDFORTHREEDAYSAFTERTHEDELIVERYOFHISSPEECHATTHELODGEHELAYONASOFAATHOMERECEIVINGNOONEANDGOINGNOWHERE</div></pre></td></tr></table></figure>
<p>将明文转换成可读句子：</p>
<p>again pierre was over taken by the depression he so dreaded for three day safter the delivery of his speech at the lodge he lay on a  sofa at home receiving no one and going no where</p>
<hr>
<h4 id="5-希尔密码"><a href="#5-希尔密码" class="headerlink" title="5.希尔密码"></a>5.希尔密码</h4><p><strong>（1）介绍</strong></p>
<p>希尔密码(Hill Cipher)是基于线性代数多重代换密码，由Lester S. Hill在1929年发明。每个字母转换成26进制数字：A=0, B=1, C=2…Z=25一串字母当成n维向量，跟一个n×n的矩阵相乘，再将得出的结果MOD26。更多<a href="https://en.wikipedia.org/wiki/Hill_cipher" target="_blank" rel="external">参考</a></p>
<p><strong>（2）加密</strong></p>
<p>明文：<code>ACT</code></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/372776651.png" alt="字母数字对应表.png"></p>
<p>明文对应矩阵：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/4249377796.png" alt="明文对应矩阵.png"></p>
<p>加密密钥：<code>GYBNQKURP</code></p>
<p>加密矩阵：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/288821138.png" alt="加密矩阵.png"></p>
<p>计算过程：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/215139299.png" alt="计算过程.png"></p>
<p>密文：<code>FIN</code></p>
<p><strong>（3）解密</strong></p>
<p>密文：<code>FIN</code></p>
<p>计算加密矩阵的逆矩阵：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1240506286.png" alt="计算加密矩阵的逆矩阵.png"></p>
<p>解密计算：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3797557104.png" alt="解密计算.png"></p>
<p>明文：<code>ACT</code></p>
<p>至于证明和求逆可以参考线性代数知识。</p>
<p><strong>（4）破解</strong></p>
<p>密码分析一门破解编码和密码的艺术。当我们尝试去攻破希尔密码你会发现频率分析实际上没有什么用处，特别在密钥长度增多的情况下。对于较长的二元矩阵（2×2的希尔密码）频率分析可能可能会有帮助，但是对于较短的密文分析是没有实际作用的。</p>
<p>这里推荐一篇关于用<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-hill-cipher/" target="_blank" rel="external">已知明文样本攻击的方式破解希尔密码</a>的文章，基础的希尔密码用<a href="https://en.wikipedia.org/wiki/Known-plaintext_attack" target="_blank" rel="external">已知明文攻击</a>的方式是可攻破的，由于加密完全是线性的，所以攻击者在截取到部分明文/密文字符对可以轻松建立一个线性系统，轻松搞定希尔密码，如果不能完全确定线性系统，那么只需要添加部分明文/密文对即可。已知明文攻击时最好的方式去破解写入密码，如果明文一无所知，那就进行推测猜出部分明文。基于已知明文样本攻击的方式破解希尔密码的算法的实现工具破解示例：</p>
<p>密文：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XUKEXWSLZJUAXUNKIGWFSOZRAWURORKXAOSLHROBXBTKCMUWDVPTFBLMKEFVWMUXTVTWUIDDJVZKBRMCWOIWYDXMLUFPVSHAGSVWUFWORCWUIDUJCNVTTBERTUNOJUZHVTWKORSVRZSVVFSQXOCMUWPYTRLGBMCYPOJCLRIYTVFCCMUWUFPOXCNMCIWMSKPXEDLYIQKDJWIWCJUMVRCJUMVRKXWURKPSEEIWZVXULEIOETOOFWKBIUXPXUGOWLFPWUSCH</div></pre></td></tr></table></figure>
<p>解密：</p>
<p>解密<a href="http://bobao.360.cn/ctf/learning/136.html" target="_blank" rel="external">脚本实例</a></p>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/hill-cipher/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="6-猪圈密码"><a href="#6-猪圈密码" class="headerlink" title="6.猪圈密码"></a>6.猪圈密码</h4><p><strong>（1）介绍</strong></p>
<p>猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码。更多<a href="https://en.wikipedia.org/wiki/Pigpen_cipher" target="_blank" rel="external">参考</a></p>
<p>明文字母和对应密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1221786711.jpg" alt="猪圈密码.jpg"></p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2324477870.png" alt="猪圈密码密文.png"></p>
<p>在线加密<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html" target="_blank" rel="external">传送门</a></p>
<p><strong>（2）变种</strong></p>
<p>圣堂武士密码(Templar Cipher)是共济会的“猪圈密码”的一个变种，一直被共济会圣殿骑士用。</p>
<p>明文字母和对应密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2277010040.png" alt="猪圈密码变种.png"></p>
<p><strong>（3）其他变种</strong></p>
<p>明文字母和对应密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/64095502.jpg" alt="猪圈密码变种1.jpg"></p>
<p>明文字母和对应密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/591779880.jpg" alt="猪圈密码变种2.jpg"></p>
<p>明文字母和对应密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/71234779.png" alt="猪圈密码变种3.png"></p>
<hr>
<h4 id="7-波利比奥斯方阵密码"><a href="#7-波利比奥斯方阵密码" class="headerlink" title="7.波利比奥斯方阵密码"></a>7.波利比奥斯方阵密码</h4><p><strong>（1）介绍</strong></p>
<p>波利比奥斯方阵密码（Polybius Square Cipher或称波利比奥斯棋盘）是棋盘密码的一种，是利用波利比奥斯方阵进行加密的密码方式，简单的来说就是把字母排列好，用坐标(行列)的形式表现出来。字母是密文，明文便是字母的坐标。更多<a href="https://en.wikipedia.org/wiki/Polybius_square" target="_blank" rel="external">参考</a></p>
<p>常见的排布方式：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3110003927.png" alt="波利比奥斯方阵密码.png"></p>
<p>加密实例：</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密文：<code>442315 4145241325 1242345233 213453 2445323543 442315 31115554 143422</code></p>
<hr>
<h4 id="8-夏多密码-曲折加密"><a href="#8-夏多密码-曲折加密" class="headerlink" title="8.夏多密码(曲折加密)"></a>8.夏多密码(曲折加密)</h4><p><strong>（1）介绍</strong></p>
<p>夏多密码是作者麦克斯韦·格兰特在中篇小说《死亡之链》塑造夏多这一英雄人物中所自创的密码，如下图所示：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3840747352.png" alt="夏多密码.png"></p>
<blockquote>
<p>注意，在以上所示的字母表密钥的底部，列有四个附加符号1，2，3，4.他们可以放在密文中的任何地方。每个附加符号指示，如何转动写有密文的纸张，再进行后续的加密或解密操作，直到出现另一个附加符号。可以把每个附加符号中的那根线看作是指示针，它指示了纸张的上端朝上，朝右，朝下，朝左。比如说：如果出现符号3，那么纸张就应该转动180度，使其上端朝下；</p>
<p>符号2表示纸张上端朝右，依次类推。</p>
</blockquote>
<p>源文本：<code>I AM IN DANGER SEND HELP(我有危险，速来增援)</code></p>
<p>密文：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/471514465.jpg" alt="夏多密码示例.jpg"></p>
<hr>
<h4 id="9-普莱菲尔密码"><a href="#9-普莱菲尔密码" class="headerlink" title="9.普莱菲尔密码"></a>9.普莱菲尔密码</h4><p>普莱菲尔密码(Playfair Cipher)是第一种用于实际的双字替换密码，用双字加密取代了简单代换密码的单字加密，很明显这样使得密文更难破译，因为使用简单替换密码的频率分析基本没有什么作用，虽然频率分析，通常仍然可以进行，但是有25×25=625种可能而不是25种可能，可以分为三个步骤，即编制密码表、整理明文、编写译文，下面我们以明文：</p>
<p><code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>和密钥<code>CULTURE</code>为例来讲解。普莱菲尔密码又称为单方密码(Single Cipher)之后又出现它的升级版Double Playfair，也就是<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">二方密码</a>(Two-square Cipher),在之后又有四方密码(Four-square Cipher)</p>
<p><strong>(1)编制密码表</strong></p>
<p>1.整理密钥字母<code>C U L T U R E</code>，去掉后面重复的字母得到：<code>C U L T R E</code></p>
<p>2.用上一步得到的字母自上而下来填补5乘5方表的纵列（也可横排），之后的空白按照相同的顺序用字母表中剩余的字母依次填补完整，得到如下的方格:</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2126539796.png" alt="普莱菲尔密码.png"></p>
<blockquote>
<p>这一步需要注意的要点：整理密钥字母时，如果出现”Z”，则需要去除，因为在英文里”Z”的使用频率最低，相应的如果是德文，则需将”I”与”J”当作一个字母来看待，而法语则去掉”W”或”K”。</p>
</blockquote>
<p><strong>(2)整理明文</strong></p>
<p>我们要遵循的原则是“两个一组”，得到是若干个两两成对的字母段，用到的是明文<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code>与字母”<code>X</code>“：</p>
<p>1.将明文两两一组按顺序排开，得到：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO G</code></p>
<p>2.对于末尾的单个字母要加上一个”<code>X</code>“使之成对：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p>
<blockquote>
<p>这一步需要注意的要点：对于相连字母相同者，每个后面都需要加”<code>X</code>“，例如<code>TOMORROW</code>，需要写成：<code>TO MO RX RX OW</code>。</p>
</blockquote>
<p><strong>(3)编写密文</strong></p>
<p>我们要得到的密文，当然，对于每个字母对，要严格遵循如下的原则：</p>
<blockquote>
<p>1.如果两个字母在同一行则要用它右邻的字母替换，如果已在最右边，则用该行最左边的替换，如明文为”<code>CE</code>“，依据上表，应替换为”<code>EG</code>“；<br>2.如果两个字母在同一列则要用它下边的字母替换，如果已在最下边，则用该行最上边的替换，如明文为”<code>OQ</code>“，依据上表，应替换为”<code>PS</code>“；<br>3.如果两个字母在不同的行或列，则应在密码表中找两个字母使四个字母组成一个矩形，明文占据两个顶点，需用另外两个顶点的字母替换，如明文为”<code>HX</code>“，可以替换为”<code>WI/J</code>“或”<code>I/JW</code>“（下面的例子将按照横向替换原则即同行优先）。</p>
</blockquote>
<p>按照上述原则，将明文<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code>加以转换得到<code>KU ND LH GT LF WU ES PW LH SI/J NP CG CR AG BU VZ QA I/JV</code>（/表示或者，不过一般用I不用J，所以分析密文时你看25个字母都有而只差一个字母没有用到可以考虑一下这种加密方式）将得到的字母改为大写并五个一组列好，得到密文<code>KUNDL HGTLF WUESP WLHSI NPCGC RAGBU VZQAI V</code>。</p>
<p>加密解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/playfair/" target="_blank" rel="external">传送门</a>(ps：这里加解密是横向编制密码表)</p>
<p>加密解密实例(ps：这里加解密也是横向编制密码表)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Playfair</div><div class="line">&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;</div><div class="line">&gt;&gt;&gt;Playfair(&apos;CULTREABDFGHIKMNOPQSVWXYZ&apos;).decipher(&apos;UKDNLHTGFLWUSEPWHLISNPCGCRGAUBVZAQIV&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXIUMPSOVERTHELAZYDOGX&apos;</div></pre></td></tr></table></figure>
<hr>
<h4 id="10-维吉尼亚密码"><a href="#10-维吉尼亚密码" class="headerlink" title="10.维吉尼亚密码"></a>10.维吉尼亚密码</h4><p><strong>（1）介绍</strong></p>
<p>维吉尼亚密码(Vigenère Cipher)是在单一恺撒密码的基础上扩展出多表代换密码，根据密钥(当密钥长度小于明文长度时可以循环使用)来决定用哪一行的密表来进行替换，以此来对抗字频统计，更多<a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" target="_blank" rel="external">参考</a>。</p>
<p>密表：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3162839359.png" alt="维吉尼亚密码.png"></p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p>
<p>加密过程：如果第一行为明文字母，第一列为密钥字母，那么明文字母’T’列和密钥字母’C’行的交点就是密文字母’V’，以此类推。</p>
<p>密文：<code>VBP JOZGM VCHQE JQR UNGGW QPPK NYI NUKR XFK</code></p>
<p><strong>（2）已知密钥加解密</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Vigenere</div><div class="line">&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;</div><div class="line">&gt;&gt;&gt;Vigenere(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>在线加密解密<a href="http://planetcalc.com/2468/" target="_blank" rel="external">传送门</a></p>
<p><strong>（3）未知密钥破解</strong></p>
<p>可以参考<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">维吉尼亚密码分析</a>这篇文章，破解维吉尼亚密码第一步是确定密钥长度，维吉尼亚密码分析这篇文章里介绍了使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数</a>算法来确定密钥长度，在确定密钥长度后就可以尝试确定密钥，通常我们可以使用<a href="https://en.wikipedia.org/wiki/Chi-squared_test" target="_blank" rel="external">卡方检验</a>来找到每个字母的偏移量，基于维吉尼亚密码分析一文中的算法实现的工具破解示例。</p>
<p>密文：<code>kiqpbkxspshwehospzqhoinlgapp</code></p>
<p>解密：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3380107861.png" alt="维吉尼亚密码破解.png"></p>
<p>(ps:结合左边的值，密钥以及解出明文可以确定kien 5或者klen 10为准确的结果)</p>
<p>明文：<code>DEFEND THE EAST WALL OF THE CASTLE</code></p>
<p><strong>（4）变种</strong></p>
<p>有几种密码和维吉尼亚密码相似，格罗斯费尔德密码(Gronsfeld cipher)实际上和维吉尼亚密码相同，除了使用了数字来代替字母以外没有什么区别。数字可以选择一种数列，如斐波那契数列，或者一些其他的伪随机序列。格罗斯费尔德密码密码分析过程和维吉尼亚密码大同小异，不过，自动密钥密码不能使用<a href="http://www.zybang.com/question/a0a1108423f63d10dbbf0c3e1bfdf3b3.html" target="_blank" rel="external">卡西斯基算法</a>(kasiski)来破译，因为自动密钥密码的密钥不重复循环使用，破译自动密钥密码最好的方法的就是从密文不断尝试和猜测其中明文或密钥的一部分。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/863670565.png" alt="格罗斯费尔德密码.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Gronsfeld</div><div class="line">&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;</div><div class="line">&gt;&gt;&gt;Gronsfeld([2,20,11,45,20,43,4]).decipher(&apos;VBPJOZGMVCHQEJQRUNGGWQPPKNYINUKRXFK&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://rumkin.com/tools/cipher/gronsfeld.php" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="11-自动密钥密码"><a href="#11-自动密钥密码" class="headerlink" title="11.自动密钥密码"></a>11.自动密钥密码</h4><p><strong>（1）介绍</strong></p>
<p>自动密钥密码(Autokey Cipher)是多表替换密码，与维吉尼亚密码密切相关，但使用不同的方法生成密钥，通常来说要比维吉尼亚密码更安全。自动密钥密码主要有两种，关键词自动密钥密码和原文自动密钥密码.下面我们以关键词自动密钥为例：</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>关键词：<code>CULTURE</code></p>
<p>自动生成密钥：<code>CULTURE THE QUICK BROWN FOX JUMPS OVER THE</code></p>
<p>接下来的加密过程和维吉尼亚密码类似，从密表可得：</p>
<p>密文：<code>VBP JOZGD IVEQV HYY AIICX CSNL FWW ZVDP WVK</code></p>
<p><strong>（2）已知关键词加解密</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Autokey</div><div class="line">&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;</div><div class="line">&gt;&gt;&gt;Autokey(&apos;CULTURE&apos;).decipher(&apos;VBPJOZGDIVEQVHYYAIICXCSNLFWWZVDPWVK&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/autokey/" target="_blank" rel="external">传送门</a></p>
<p><strong>（3）未知关键词破解</strong></p>
<p>推荐去看这篇<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-autokey-cipher/" target="_blank" rel="external">自动密钥密码分析文章</a>，基于文中的算法实现的工具来破解示例。</p>
<p>密文:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">isjiqymdebvuzrvwhmvysibugzhyinmiyeiklcvioimbninyksmmnjmgalvimlhspjxmgfiraqlhjcpvolqmnyynhpdetoxemgnoxl</div></pre></td></tr></table></figure>
<p>解密</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/4089722453.png" alt="自动密钥密码破解.png"></p>
<p>(ps:从klen 13可以看出使用的关键词为’FORTIFICATION’)</p>
<p>明文：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DESPITEBEINGMORESECURETHANTHEVIGENERECIPHERTHEAUTOKEYCIPHERISSTILLVERYEASYTOBREAKUSINGAUTOMATEDMETHODS</div></pre></td></tr></table></figure>
<p>将明文转换成可读句子：</p>
<p>despite being more secure than the vigenere cipher the autokey cipher is still very easy to break using automated methods</p>
<hr>
<h4 id="12-博福特密码"><a href="#12-博福特密码" class="headerlink" title="12.博福特密码"></a>12.博福特密码</h4><p><strong>（1）介绍</strong></p>
<p>博福特密码(Beaufort Cipher)，是一种类似于维吉尼亚密码的代换密码，由弗朗西斯·蒲福(Francis Beaufort)发明。它最知名的应用是Hagelin M-209密码机。博福特密码属于对等加密，即加密演算法与解密演算法相同。</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p>
<p>加密过程：如果第一行为明文字母，第一列为密文字母，那么沿明文字母’T’列出现密钥字母’C’的行号就是密文字母’J’，以此类推。</p>
<p>密文：<code>JNH DAJCS TUFYE ZOX CZICM OZHC BKA RUMV RDY</code></p>
<p><strong>（2）已知密钥加解密</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Beaufort</div><div class="line">&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;</div><div class="line">&gt;&gt;&gt;Beaufort(&apos;CULTURE&apos;).decipher(&apos;JNHDAJCSTUFYEZOXCZICMOZHCBKARUMVRDY&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/beaufort/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="13-滚动密钥密码"><a href="#13-滚动密钥密码" class="headerlink" title="13.滚动密钥密码"></a>13.滚动密钥密码</h4><p><strong>（1）介绍</strong></p>
<p>滚动密钥密码(Running Key Cipher)和维吉尼亚密码有着相同的加密机制，区别是密钥的选取，维吉尼亚使用的密钥简短，而且重复循环使用，与之相反，滚动密钥密码使用很长的密钥，比如引用一本书作为密钥。这样做的目的是不重复循环使用密钥，使密文更难破译，尽管如此，滚动密钥密码还是可以被攻破，因为有关于密钥和明文的统计分析模式可供利用，如果滚动密钥密码使用统计上的随机密钥来源，那么理论上是不可破译的，因为任何可能都可以成为密钥，并且所有的可能性都是相等的。</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密钥：选取C语言编程(1978版)第63页第1行”errors can occur in several places. A label has…”，去掉非字母部分作为密钥(实际选取的密钥很长，长度至少不小于明文长度)。</p>
<p>加密过程：加密过程和维吉尼亚密码加密过程相同</p>
<p>密文:<code>XYV ELAEK OFQYH WWK BYHTJ OGTC TJI DAK YESR</code></p>
<p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/running-key/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="14-Porta密码"><a href="#14-Porta密码" class="headerlink" title="14.Porta密码"></a>14.Porta密码</h4><p><strong>（1）介绍</strong></p>
<p>Porta密码(Porta Cipher)是一个由意大利那不勒斯的医生Giovanni Battista della Porta发明的多表代换密码，Porta密码具有加密解密过程的是相同的特点。</p>
<p>密表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">KEYS| A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</div><div class="line">----|----------------------------------------------------</div><div class="line">A,B | N O P Q R S T U V W X Y Z A B C D E F G H I J K L M</div><div class="line">C,D | O P Q R S T U V W X Y Z N M A B C D E F G H I J K L</div><div class="line">E,F | P Q R S T U V W X Y Z N O L M A B C D E F G H I J K</div><div class="line">G,H | Q R S T U V W X Y Z N O P K L M A B C D E F G H I J</div><div class="line">I,J | R S T U V W X Y Z N O P Q J K L M A B C D E F G H I</div><div class="line">K,L | S T U V W X Y Z N O P Q R I J K L M A B C D E F G H</div><div class="line">M,N | T U V W X Y Z N O P Q R S H I J K L M A B C D E F G</div><div class="line">O,P | U V W X Y Z N O P Q R S T G H I J K L M A B C D E F</div><div class="line">Q,R | V W X Y Z N O P Q R S T U F G H I J K L M A B C D E</div><div class="line">S,T | W X Y Z N O P Q R S T U V E F G H I J K L M A B C D</div><div class="line">U,V | X Y Z N O P Q R S T U V W D E F G H I J K L M A B C</div><div class="line">W,X | Y Z N O P Q R S T U V W X C D E F G H I J K L M A B</div><div class="line">Y,Z | Z N O P Q R S T U V W X Y B C D E F G H I J K L M A</div></pre></td></tr></table></figure>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密钥(循环使用，密钥越长相对破解难度越大)：<code>CULTURE</code></p>
<p>加密过程：明文字母’T’列与密钥字母’C’行交点就是密文字母’F’,以此类推。</p>
<p>密文：<code>FRW HKQRY YMFMF UAA OLWHD ALWI JPT ZXHC NGV</code></p>
<p>已知密钥在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/porta/" target="_blank" rel="external">传送门</a></p>
<p><strong>（2）破解</strong></p>
<p>Porta密码可以被以<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher-part-2/" target="_blank" rel="external">维吉尼亚密码</a>破解相类似方式进行自动攻破，破解Porta密码第一步是先确定密钥长度，这里推荐一篇关于使用<a href="https://en.wikipedia.org/wiki/Index_of_coincidence" target="_blank" rel="external">重合指数算法</a>确定为维吉尼亚密钥长度<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-vigenere-cipher/" target="_blank" rel="external">文章</a>。</p>
<hr>
<h4 id="15-同音替换密码"><a href="#15-同音替换密码" class="headerlink" title="15.同音替换密码"></a>15.同音替换密码</h4><p><strong>（1）介绍</strong></p>
<p>同音替换密码(Homophonic Substitution Cipher)是单字母可以被其他几种密文字母同时替换的密码，通常要比标准替换密码破解更加困难，破解标准替换密码最简单的方法就是分析字母出现频率，通常在英语中字母’E’(或’T’)出现的频率是最高的，如果我们允许字母’E’可以同时被3种不同字符代替，那么就不能还是以普通字母的频率来分析破解，如果允许可代替字符越多，那么密文就会更难破译。</p>
<p>常见代换规则表：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3163726836.png" alt="同音替换密码.png"></p>
<p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>密文(其中一种)：<code>6CZ KOVST XJ0MA EQY IOGL4 0W1J UC7 P9NB F0H</code></p>
<p><strong>（2）破解</strong></p>
<p>如果同音替换密码的同音词个数很多，那么破解它难度很大，通常的方法采取类似破解替换密码的”爬山算法”，除了找到一个明文字母映射几个字符之外，我们还需要确定映射了那些字符，可以尝试<a href="http://www.cs.sjsu.edu/faculty/stamp/RUA/homophonic.pdf" target="_blank" rel="external">2层嵌套”爬山算法”</a>来破解，外层确定映射的数量，内层确定映射字符。</p>
<hr>
<h4 id="16-仿射密码"><a href="#16-仿射密码" class="headerlink" title="16.仿射密码"></a>16.仿射密码</h4><p><strong>（1）介绍</strong></p>
<p>仿射密码(Affine Cipher)是一种单表代换密码，字母表中的每个字母相应的值使用一个简单的数学函数映射到对应的数值，再把对应数值转换成字母。这个公式意味着每个字母加密都会返回一个相同的字母，意义着这种加密方式本质上是一种标准替代密码。因此，它具有所有替代密码的弱点。每一个字母都是通过函数（ax + b）mod m加密，其中B是位移量，为了保证仿射密码的可逆性，a和m需要满足gcd(a , m)=1，一般m为设置为26。更多<a href="https://en.wikipedia.org/wiki/Affine_cipher" target="_blank" rel="external">参考</a></p>
<p>常见的字母对应关系：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/297129379.png" alt="常见的字母对应关系.png"></p>
<p>下面我们以E(x) = (5x + 8) mod 26函数为例子</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/4130743045.png" alt="仿射密码.png"></p>
<p>至于解密我们知道</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3422534989.png" alt="仿射密码解密1.png"></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3535566502.png" alt="仿射密码解密2.png"></p>
<p>即可得出解密结果</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2787731818.png" alt="仿射密码解密结果.png"></p>
<p>以E(x) = (5x + 8) mod 26加密，通过计算可得D(x)=21(x - 8) mod 26，这样便可以得到明文。</p>
<p>可参考的Python脚本</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/488561424.png" alt="仿射密码解密脚本.png"></p>
<p>加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/affine/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="17-培根密码"><a href="#17-培根密码" class="headerlink" title="17.培根密码"></a>17.培根密码</h4><p><strong>（1）介绍</strong></p>
<p>培根密码(Baconian Cipher)是一种替换密码，每个明文字母被一个由5字符组成的序列替换，最初的加密方式就是由’A’和’B’组成序列替换明文(所以你当然也可以用别的字母)，比如字母’D’替换成”aaabb”，以下是全部的对应关系(另一种对于关系是每个字母都有唯一对应序列，I和J与U/V各自都有不同对应序列)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">A = aaaaa  I/J = abaaa  R = baaaa</div><div class="line"> </div><div class="line">B = aaaab  K = abaab    S = baaab</div><div class="line"> </div><div class="line">C = aaaba  L = ababa    T = baaba</div><div class="line"> </div><div class="line">D = aaabb  M = ababb    U/V = baabb</div><div class="line"> </div><div class="line">E = aabaa  N = abbaa    W = babaa</div><div class="line"> </div><div class="line">F = aabab  O = abbab    X = babab</div><div class="line"> </div><div class="line">G = aabba  P = abbba    Y = babba</div><div class="line"> </div><div class="line">H = aabbb  Q = abbbb    Z = babbb</div></pre></td></tr></table></figure>
<p>明文：<code>T H E F O X</code></p>
<p>密文：<code>baaba aabbb aabaa aabab abbab babab</code></p>
<p>加解密<a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="18-ADFGX和ADFGVX密码"><a href="#18-ADFGX和ADFGVX密码" class="headerlink" title="18.ADFGX和ADFGVX密码"></a>18.ADFGX和ADFGVX密码</h4><p><strong>（1）ADFGX密码</strong></p>
<p>ADFGX密码(ADFGX Cipher)是结合了改良过的Polybius方格替代密码与单行换位密码的矩阵加密密码，使用了5个合理的密文字母：A，D，F，G，X，这些字母之所以这样选择是因为当转译成摩尔斯电码(ADFGX密码是德国军队在一战发明使用的密码)不易混淆，目的是尽可能减少转译过程的操作错误。</p>
<p>加密矩阵示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    A  D  F  G   X</div><div class="line">  ----------------</div><div class="line">A | p  h  q  g   m </div><div class="line">D | e  a  y  n   o </div><div class="line">F | f  d  x  k   r</div><div class="line">G | c  v  s  z   w </div><div class="line">X | b  u  t  i/j l</div></pre></td></tr></table></figure>
<p>明文：<code>THE QUICK BROWN FOX</code></p>
<p>结果矩阵加密：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XF AD DA   AF XD XG GA FG   XA FX DX GX DG   FA DX FF</div></pre></td></tr></table></figure>
<p>列移位密钥：<code>how are u</code></p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3686106504.png" alt="ADFGX密码.png"></p>
<p>密文：<code>DXADF AGXF XFFXD FXGGX DGFG AADA ADXXF</code></p>
<p>已知密钥加解密：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import ADFGX</div><div class="line">&gt;&gt;&gt;a = ADFGX(&apos;phqgmeaynofdxkrcvszwbutil&apos;,&apos;HOWAREU&apos;)</div><div class="line">&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)</div><div class="line">&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;</div><div class="line">&gt;&gt;&gt;a.decipher(&apos;DXADFAGXFXFFXDFXGGXDGFGAADAADXXF&apos;)</div><div class="line">&apos;THEQUICKBROWNFOX&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/adfgx-cipher/" target="_blank" rel="external">传送门</a></p>
<p><strong>（2）ADFGVX密码</strong></p>
<p>ADFGVX密码实际上就是ADFGX密码的扩充升级版，一样具有ADFGX密码相同的特点，加密过程也类似，不同的是密文字母增加了V，使得可以再使用10数字来替换明文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    A D F G V X</div><div class="line">  -------------</div><div class="line">A | p h 0 q g 6</div><div class="line">D | 4 m e a 1 y</div><div class="line">F | l 2 n o f d</div><div class="line">G | x k r 3 c v</div><div class="line">V | s 5 z w 7 b</div><div class="line">X | j 9 u t i 8</div></pre></td></tr></table></figure>
<p>由于两种加密过程完全类似这里就不再重复给出加密过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import ADFGVX</div><div class="line">&gt;&gt;&gt;a = ADFGVX(&apos;ph0qg64mea1yl2nofdxkr3cvs5zw7bj9uti8&apos;,&apos;HOWAREU&apos;)</div><div class="line">&gt;&gt;&gt;a.encipher(&apos;THE QUICK BROWN FOX&apos;)</div><div class="line">&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;</div><div class="line">&gt;&gt;&gt;a.decipher(&apos;DXXFAFGFFXGGGFGXDVGDVGFAVFVAFVGG&apos;)</div><div class="line">&apos;THEQUICKBROWNFOX&apos;</div></pre></td></tr></table></figure>
<hr>
<h4 id="19-双密码"><a href="#19-双密码" class="headerlink" title="19.双密码"></a>19.双密码</h4><p><strong>（1）双密码</strong></p>
<p>双密码(Bifid Cipher)结合了波利比奥斯方阵换位密码，并采用分级实现扩散，这里的“双”是指用2个密钥进行加密。双密码是由法国Felix Delastelle发明，除此之外Felix Delastelle还发明了三分密码(Trifid Cipher)，四方密码(Four-Square Cipher)。还有一个<a href="https://en.wikipedia.org/wiki/Two-square_cipher" target="_blank" rel="external">两方密码</a>(Two-Square)与四方密码类似，<a href="http://www.thonky.com/kryptos/cm-bifid-cipher" target="_blank" rel="external">共轭矩阵双密码</a>(Conjugated Matrix Bifid Cipher)也是双密码的变种。</p>
<p>示例密阵:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">   1 2 3 4 5</div><div class="line">1| p h q g m</div><div class="line">2| e a y l n</div><div class="line">3| o f d x k</div><div class="line">4| r c v s z</div><div class="line">5| w b u t i/j</div></pre></td></tr></table></figure>
<p>明文:<code>THE QUICK BROWN FOX</code></p>
<p>经过密阵转换：</p>
<p>行:<code>512 15543 54352 333</code></p>
<p>列:<code>421 33525 21115 214</code></p>
<p>分组:</p>
<p><code>51215 54354 35233 3</code></p>
<p><code>42133 52521 11521 4</code></p>
<p>合并：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5121542133 5435452521 3523311521 34</div></pre></td></tr></table></figure>
<p>在经过密阵转换后密文:<code>WETED TKZNE KYOME X</code></p>
<p><strong>（2）已知密阵加解密</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import</div><div class="line">&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).encipher(&apos;THE QUICK BROWN FOX&apos;)</div><div class="line">&apos;WETEDTKZNEKYOMEX&apos;</div><div class="line">&gt;&gt;&gt;Bifid(&apos;phqgmeaylnofdxkrcvszwbuti&apos;,5).decipher(&apos;WETEDTKZNEKYOMEX&apos;)</div><div class="line">&apos;THEQUICKBROWNFOX&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/bifid/" target="_blank" rel="external">传送门</a></p>
<p><strong>（3）未知密阵破解</strong></p>
<p>手工分析破解双密码是有一定难度的，每个字母都是同过3个数字进行非线性代替转换，而且之后还会对字母顺序进行打乱，这样使双密码比一些替换密码和换位密码更难破解。然而，现在是计算机时代，这张加密方式没有安全性可言，通过<a href="http://baike.baidu.com/link?url=mkceUr0W4L7B7UVQxc-dUkXKPJbj9v4YyBh_hrskt5iXk99UdnjW6mZ_YxoJO1PkT1zdjEZD2hd7TCMiSxpOma" target="_blank" rel="external">模拟退火</a>算法就能快速找到双密码的密阵。</p>
<p>这里推荐一篇详细的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-bifid-cipher/" target="_blank" rel="external">双密码破解分析</a>的文章，基于模拟退火算法实现的工具破解示例：</p>
<p>密文:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KWTAZQLAWWZCPONIVBTTBVQUZUGRNHAYIYGIAAYURCUQLDFTYVHTNQEENUPAIFCUNQTNGITEFUSHFDWHRIFSVTBISYDHHASQSROMUEVPQHHCCRBYTQBHWYRRHTEPEKHOBFSZUQBTSYRSQUDCSAOVUUGXOAUYWHPGAYHDNKEZPFKKWRIEHDWPEIOTBKESYETPBPOGTHQSPUMDOVUEQAUPCPFCQHRPHSOPQRSSLPEVWNIQDIOTSQESDHURIEREN</div></pre></td></tr></table></figure>
<p>解密：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/4255378402.png" alt="双密码解密.png"></p>
<p>得到加密矩阵:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">G B C M K</div><div class="line">D H U E T</div><div class="line">L V Y W I</div><div class="line">X O Z S P</div><div class="line">N F A R Q</div></pre></td></tr></table></figure>
<p>明文:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CRYPTANALYS IS OF BIFID BY HAND IS ACTUALLY FAIRLY DIFFICULT THE FRACTIONATING NATURE OF THE CIPHER IE EACH LETTER IS SUBSTITUTED BY CHARACTERS THEN THESE CHARACTERS ARE IUM BLED WHICH WILL PULL THEM APART MAKES THE CIPHER MUCH STRONGER THAN SUBSTITUTION CIPHERS OR TRANSPOSITION CIPHER SON THEIR OWN</div></pre></td></tr></table></figure>
<hr>
<h4 id="20-三分密码"><a href="#20-三分密码" class="headerlink" title="20.三分密码"></a>20.三分密码</h4><p>三分密码(Trifid Cipher)结合换位和替换，三分密码与双密码非常相似，差别之处就是用除了3×3×3的密阵代替5×5密阵。</p>
<p>示例密阵:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">密阵顺序 = EPSDUCVWYM.ZLKXNBTFGORIJHAQ      </div><div class="line">                          </div><div class="line">方阵 1      方阵 2      方阵 3                                     </div><div class="line">  1 2 3      1 2 3      1 2 3    </div><div class="line">1 E P S    1 M . Z    1 F G O    </div><div class="line">2 D U C    2 L K X    2 R I J    </div><div class="line">3 V W Y    3 N B T    3 H A Q</div></pre></td></tr></table></figure>
<p>明文:<code>THE QUICK BROWN FOX.</code></p>
<p>经过密阵转换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">T H E Q U I C K B R O W N F O X .</div><div class="line">2 3 1 3 1 3 1 2 2 3 3 1 2 3 3 2 2</div><div class="line">3 3 1 3 2 2 2 2 3 2 1 3 3 1 1 2 1</div><div class="line">3 1 1 3 2 2 3 2 2 1 3 2 1 1 3 3 2</div></pre></td></tr></table></figure>
<p>T(233)表示T在第一个方阵第三行第三列的位置</p>
<p>分组(分组密钥以5为例):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">THEQU ICKBR OWNFO X.</div><div class="line">23131 31223 31233 22</div><div class="line">33132 22232 13311 21</div><div class="line">31132 23221 32113 32</div></pre></td></tr></table></figure>
<p>合并：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23131 33132 31132 31223 22232 23221 31233 13311 32113 22 21 32</div></pre></td></tr></table></figure>
<p>在经过密阵转换后密文:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">231313313231132312232223223221312331331132113222132</div><div class="line">N  O  O  N  W  G  B  X  X  L  G  H  H  W  S  K  W</div></pre></td></tr></table></figure>
<p>想要深入了解三分密码并破解三分密码的小伙伴推荐去看LANIKI教授的一篇密码课程章节的<a href="http://www.und.nodak.edu/org/crypto/crypto/lanaki.crypt.class/lessons/lesson17.zip" target="_blank" rel="external">讲义</a>。</p>
<hr>
<h4 id="21-四方密码"><a href="#21-四方密码" class="headerlink" title="21.四方密码"></a>21.四方密码</h4><p><strong>（1）介绍</strong></p>
<p>四方密码(Four-Square Cipher)是类似普莱菲尔密码双字母加密密码，这样使加密效果强于其他替换密码，因为频率分析变得更加困难了。</p>
<p>四方密码使用4个预先设置的5×5字母矩阵，每个矩阵包括25个字母，通常字母’j’被融入到’i’中(维基百科上说’q’被忽略，不过这不重要，因为’q’和’j’都是很少出现的字母)，通常左上和右下矩阵式是标准字母排序明文矩阵，右上和左下矩阵是打乱顺序的密钥矩阵。</p>
<p>示例矩阵：</p>
<p>![四方密码.png][47]</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>整理明文(分组不够时用’X’填充)：<code>TH EQ UI CK BR OW NF OX JU MP SO VE RT HE LA ZY DO GX</code></p>
<p>加密过程：分别在明文矩阵中找到’TH’，分别找到他们在右上矩阵有左下矩阵的交点字母’ES’就是密文，以此类推。</p>
<p>密文：<code>ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ</code></p>
<p><strong>（2）已知密钥矩阵加解密</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;from pycipher import Foursquare</div><div class="line">&gt;&gt;&gt;fs = Foursquare(&apos;zgptfoihmuwdrcnykeqaxvsbl&apos;,&apos;mfnbdcrhsaxyogvituewlqzkp&apos;)</div><div class="line">&gt;&gt;&gt;fs.encipher(&apos;THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG&apos;)</div><div class="line">&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;</div><div class="line">&gt;&gt;&gt;fs.decipher(&apos;ESZWQAFHGTDKWHRKUENYQOLMQTUNWMBPTGHQ&apos;)</div><div class="line">&apos;THEQUICKBROWNFOXJUMPSOVERTHELAZYDOG&apos;</div></pre></td></tr></table></figure>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/four-square/" target="_blank" rel="external">传送门</a></p>
<p><strong>（3）未知密钥矩阵破解</strong></p>
<p>推荐一篇关于采用<a href="http://blog.csdn.net/xianlingmao/article/details/7798647" target="_blank" rel="external">模拟退火算法</a>的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">四方密码分析</a>文章，如果有足够多的密文那么四方密码可以轻易被破解，如果知道了明文和密文推出密钥是很容易的，猜测部分明文是一个有效的方法去破解四方密码，如果一部分明文已知或者可以被猜测出</p>
<p>那么我们首先要确定尽可能多可利用的密钥，然后才可以进行更多的推测或者用其他的方法破译。基于四方密码分析一文实现的<a href="http://www.practicalcryptography.com/cryptanalysis/stochastic-searching/cryptanalysis-foursquare-cipher/" target="_blank" rel="external">C代码</a>破解示例：</p>
<p>密文(密文最好在200个字符以上)：</p>
<p>HMMKEQESDTMDHLAWFWMNKSOSFOMRFNLWLKHNSQGGEKXEOLLVDXNRSQQGARTFKSAVNUDLFNDHESPZGQ</p>
<p>TWESAGPGSQSQSTPKUSBBQLQHESAGPGSQSQGXLNAVHTPMHMKKNYGSUGDMTPDGFNKYAVHXLWGEKRILESLZ</p>
<p>ZOFNAVIHRHRKAGHSMYUGEGNSRGAVMVOQPRLNKRXLMYLQPXILESQYBNRHRKAGKYQXDIHMPGPYOERZOLBEZ</p>
<p>LURFWLWUOLDDPNSQYAGMUQPQWESBEZVEQESDTMDBQLWDIUSHB</p>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc -O3 -lm foursquarecrack2.c scoreText_2.c -o fsc</div><div class="line">./fsc</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Running foursquarecrack, this could take a few minutes... </div><div class="line">best score so far: -1239.505249, on iteration 1</div><div class="line">Key: &apos;KFMLUGWSQEPOZTNRBHDAVXCIY&apos;,&apos;UGSVKFIZMOYXPQRWTHLNCABED&apos;     </div><div class="line">plaintext: &apos;THECIPHERTEXTSQUARESCANBEGENERATEDUSINGAKEYWORDDROPPINGDUPLICAT</div><div class="line">            ELETTERSTHENFILLTHEREMAININGSPACESWITHTHEREMAININGLETTERSOFTHEA</div><div class="line">            LPHABETINORDERALTERNATIVELYTHECIPHERTEXTSQUARESCANBEGENERATEDCO</div><div class="line">            MPLETELYRANDOMLYTHEFOURSQUAREALGORITHMALLOWSFORTWOSEPARATEKEYSO</div><div class="line">            NEFOREACHOFTHETWOCIPHERTEXTMATRICESX&apos;</div></pre></td></tr></table></figure>
<hr>
<h4 id="22-棋盘密码"><a href="#22-棋盘密码" class="headerlink" title="22.棋盘密码"></a>22.棋盘密码</h4><p>棋盘密码（Checkerboard Cipher)是使用一个波利比奥斯方阵和两个密钥作为密阵的替换密码，通常在波利比奥斯方阵中J字母往往被包含在I字母中。</p>
<p>示例密阵：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   Q  U  I  C  K</div><div class="line">  --------------</div><div class="line">B |K  N I/J G  H</div><div class="line">R |P  Q  R  S  T</div><div class="line">O |O  Y  Z  U  A</div><div class="line">W |M  X  W  V  B</div><div class="line">N |L  F  E  D  C</div></pre></td></tr></table></figure>
<p>经过密阵替换:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O  X</div><div class="line">密文:RK BK RU OC OC BI NK BQ WK RI OQ WI BU NU OQ WU</div></pre></td></tr></table></figure>
<hr>
<h4 id="23-跨棋盘密码"><a href="#23-跨棋盘密码" class="headerlink" title="23.跨棋盘密码"></a>23.跨棋盘密码</h4><p>跨棋盘密码(Straddle Checkerboard Cipher)是一种替换密码，当这种密码在结合其他加密方式，加密效果会更好。</p>
<p>棋盘示例(选择3和7作为变换):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   0 1 2 3 4 5 6 7 8 9</div><div class="line">   f k m   c p d   y e</div><div class="line">3: h b i g q r o s a z</div><div class="line">7: l u t j n w v x</div></pre></td></tr></table></figure>
<p>明文: <code>T H E Q U I C K B R O W N F O X</code></p>
<p>经过加密棋盘替换得到密文:<code>72 30 9 34 71 32 4 1 31 35 36 75 74 0 36 77</code></p>
<p>当然我们还可以继续用其他的加密方式在对跨棋盘密码加密出的结果再进行加密:</p>
<p>示例变换密钥:83729</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">8372983729837298372983729837</div><div class="line">+7230934713241313536757403677</div><div class="line">-----------------------------</div><div class="line"> 5502817432078501808630122404</div></pre></td></tr></table></figure>
<p>在经过棋盘转换后:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">5502817432078501808630122404</div><div class="line">ppfmyk n if  pfkyfyd hkmmcfc</div></pre></td></tr></table></figure>
<p>最终得到密文: ppfmyk n if  pfkyfyd hkmmcfc</p>
<p>在线加解密<a href="http://www.practicalcryptography.com/ciphers/classical-era/straddle-checkerboard/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="24-分组摩尔斯替换密码"><a href="#24-分组摩尔斯替换密码" class="headerlink" title="24.分组摩尔斯替换密码"></a>24.分组摩尔斯替换密码</h4><p>分组摩尔斯替换密码(Fractionated Morse Cipher)首先把明文转换为莫尔斯电码，不过每个字母之间用<code>x</code>分开，每个单词用<code>xx</code>分开。然后使用密钥生成一个替换密表，这个密表包含所有<code>. - x</code>组合的情况(因为不会出现<code>xxx</code>的情况，所以一共26种组合)。</p>
<p>密钥:<code>MORSECODE</code></p>
<p>密表:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MORSECDABFGHIJKLNPQTUVWXYZ</div><div class="line">.........---------XXXXXXXX</div><div class="line">...---XXX...---XXX...---XX</div><div class="line">.-X.-X.-X.-X.-X.-X.-X.-X.-</div></pre></td></tr></table></figure>
<p>说明:密表下半部分是固定的，密表的安全性以及加密效果主要取决于使用的密钥。</p>
<p>明文：<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>(类似)摩尔斯电码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-x....x.xx--.-x..-x..x-.-.x-.-xx-...x.-.x---x.--x-.xx..-.x---x-..-xx.---x..- --x.--.x...xx---x...-x.x.-.xx-x....x.xx.-..x.-x--..x-.--xx-..x---x--.</div></pre></td></tr></table></figure>
<p>说明:明文在转换为(类似)摩尔斯电码后进行每3个字符分组，再进行密表的查表。</p>
<p>密文(经过密表替换):<code>LMUWC OQVHG ZMTAK EVYSW NOYJQ NLIQB JQCDH XMDYF TWRGP FWNH</code></p>
<p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/fractmorse_tool.html" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="25-Bazeries密码"><a href="#25-Bazeries密码" class="headerlink" title="25.Bazeries密码"></a>25.Bazeries密码</h4><p>Bazeries密码(Bazeries Cipher)是换位密码和替换密码的组合，使用两个波利比奥斯方阵，一个明文字母方阵，使用一个随机的数字(一般小于1000000)的生成一个密钥矩阵同时作为第一轮明文划分分组，比如2333这个数字翻译为英文便是TWO THOUSAND THREE HUNDRED THIRTY THREE,从第一个字母T开始选取不重复的字母，之后再从字母表中按序选取没有出现的字母组成密钥矩阵。</p>
<p>明文:<code>THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG</code></p>
<p>随机数字:<code>2333</code></p>
<p>明文矩阵:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">A  F  L  Q  V</div><div class="line">B  G  M  R  W</div><div class="line">C  H  N  S  X</div><div class="line">D I/J O  T  Y</div><div class="line">E  K  P  U  Z</div></pre></td></tr></table></figure>
<p>示例密钥矩阵:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">T  W  O  H  U</div><div class="line">S  A  N  D  R</div><div class="line">E I/J Y  B  C</div><div class="line">F  G  K  L  M</div><div class="line">P  Q  V  X  Z</div></pre></td></tr></table></figure>
<p>明文分组:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2   3   3   3   2   3   3   3  2   3   3  3</div><div class="line">TH EQU ICK BRO WN FOX JUM PSO VE RTH ELA ZYD OG</div></pre></td></tr></table></figure>
<p>分组明文反序:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HT UQE KCI ORB WN XOF MUJ OSP EV EHT ALE DYZ GO</div></pre></td></tr></table></figure>
<p>使用密钥矩阵替换:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IL XHP QEG KDS YR CKW NXG KBV PU ILD TOP FMZ AK</div></pre></td></tr></table></figure>
<p>(比如’H’在明文矩阵对应到密钥矩阵的位置就是’I’）</p>
<p>已知密钥在线加解密<a href="http://ruffnekk.stormloader.com/bazeries_tool.html" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="26-Digrafid密码"><a href="#26-Digrafid密码" class="headerlink" title="26.Digrafid密码"></a>26.Digrafid密码</h4><p>Digrafid密码(Digrafid Cipher)使用两个密钥生成分别生成类似波利比奥斯方阵的3x9方格的密表。，主要有3分组和4分组两类。</p>
<p>第一个方阵密钥:<code>digrafid</code></p>
<p>第二个方阵密钥:<code>cipher</code></p>
<p>密表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">1 2 3 4 5 6 7 8 9</div><div class="line">D I G R A F D B C 1 2 3</div><div class="line">E H J L M N O P Q 4 5 6</div><div class="line">S T U V W X Y Z # 7 8 9</div><div class="line">                  c f s 1</div><div class="line">                  i g t 2</div><div class="line">                  p j u 3</div><div class="line">                  h k v 4</div><div class="line">                  e l w 5</div><div class="line">                  r m x 6</div><div class="line">                  a n y 7</div><div class="line">                  b o z 8</div><div class="line">                  d q # 9</div></pre></td></tr></table></figure>
<p>明文:<code>THE QUICK BROWN FOX</code></p>
<p>密表转换(以4分组为例):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Th Eq Ui Ck   Br Ow Nf Ox</div><div class="line">2  1  3  9    8  7  6  7</div><div class="line">7  5  7  2    1  6  5  6</div><div class="line">4  9  2  4    6  5  1  6</div></pre></td></tr></table></figure>
<p>说明:T在第一矩阵第2列，h在第二矩阵第4行，T所在的行与h所在的列相交的位置数字为7，所以Th表示为274。</p>
<p>转换密文:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">213 975 724 924   876 716 566 516</div><div class="line">Ip  #e  Dk  Ck    Zr  Dr  Mx  Ar</div></pre></td></tr></table></figure>
<hr>
<p>####27.格朗普雷密码####</p>
<p>格朗普雷密码(Grandpré Cipher)是替换密码的一种，一般使用8个8字母的单词横向填充8x8方阵，且第一列为一个单词，并且在方阵中26个字母都必须出现一次以上。</p>
<p>示例密阵:</p>
<p>![格朗普雷密码.jpg][48]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">明文:T  H  E  Q  U  I  C  K  B  R  O  W  N  F  O </div><div class="line">密文:84 27 82 41 51 66 31 36 15 71 67 73 52 34 67</div></pre></td></tr></table></figure>
<p>说明：明文中的字母在密阵位置可能不止一个，所以加密结果可能有多种，但是不影响解密。密阵还有6x6，7x7，9x9,10x10几种。显然密阵越大每个字母被替换的情况就可能越多，那么加密效果就更好。</p>
<hr>
<h4 id="28-比尔密码"><a href="#28-比尔密码" class="headerlink" title="28.比尔密码"></a>28.比尔密码</h4><p>比尔密码(Beale ciphers)有三份密码，当然这里说的是已被破解第二份，是一种类似书密码的替换密码。</p>
<p>![比尔密码.png][49]</p>
<p>以第二密码为例，每一个数字代表美国《独立宣言》的文本中的第几个词的首字母，如1代表第1个词的首字母“w”，2代表第2个词首字母“i”。解密后的文字如下：</p>
<p>I have deposited in the county of Bedford…</p>
<p>比尔密码还有一段有趣的故事，感兴趣可以看一下比尔密码的<a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E5%B0%94%E5%AF%86%E7%A0%81" target="_blank" rel="external">详细介绍</a>。</p>
<h4 id="29-键盘密码"><a href="#29-键盘密码" class="headerlink" title="29.键盘密码"></a>29.键盘密码</h4><p>一般用到的键盘密码就是手机键盘和电脑键盘两种，2014 0ctf比赛里Crypto类型中Classic一题就是电脑键盘密码，详细可以<a href="http://www.programlife.net/0ops-ctf-writeup.html" target="_blank" rel="external">参考</a>，另外给出另外一些<a href="http://www.secbox.cn/hacker/ctf/8078.html" target="_blank" rel="external">参考</a>情况。</p>
<h3 id="其他有趣的机械密码"><a href="#其他有趣的机械密码" class="headerlink" title="其他有趣的机械密码"></a>其他有趣的机械密码</h3><hr>
<h4 id="1-恩尼格玛密码"><a href="#1-恩尼格玛密码" class="headerlink" title="1.恩尼格玛密码"></a>1.恩尼格玛密码</h4><p>恩尼格玛密码机（德语：Enigma，又译哑谜机，或“谜”式密码机）是一种用于加密与解密文件的密码机。确切地说，恩尼格玛是对二战时期纳粹德国使用的一系列相似的转子机械加解密机器的统称，它包括了许多不同的型号，为密码学对称加密算法的流加密。详细工作原理参考<a href="https://zh.wikipedia.org/wiki/%E6%81%A9%E5%B0%BC%E6%A0%BC%E7%8E%9B%E5%AF%86%E7%A0%81%E6%9C%BA" target="_blank" rel="external">维基百科</a>。</p>
<p>![恩尼格玛密码.jpg][50]</p>
<p>在线模拟<a href="http://enigmaco.de/enigma/enigma.html" target="_blank" rel="external">传送门</a></p>
<p>感兴趣可以观看<a href="http://list.youku.com/albumlist/show?id=23400097&amp;ascending=1&amp;page=1" target="_blank" rel="external">播单:计算机历史文化课</a></p>
<hr>
<h3 id="代码混淆加密"><a href="#代码混淆加密" class="headerlink" title="代码混淆加密"></a>代码混淆加密</h3><p>1.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">asp混淆加密</a></p>
<p>2.<a href="http://www.zhaoyuanma.com/phpjmvip.html" target="_blank" rel="external">php混淆加密</a></p>
<p>3.<a href="http://tool.css-js.com/" target="_blank" rel="external">css/js混淆加密</a></p>
<p>4.<a href="http://www.zhaoyuanma.com/aspfix.html" target="_blank" rel="external">VBScript.Encode混淆加密</a></p>
<hr>
<h4 id="5-ppencode"><a href="#5-ppencode" class="headerlink" title="5.ppencode"></a>5.ppencode</h4><p>ppencode-Perl把Perl代码转换成只有英文字母的字符串。</p>
<p>![ppencode.png][51]</p>
<p>ppencode<a href="http://namazu.org/~takesako/ppencode/demo.html" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="6-rrencode"><a href="#6-rrencode" class="headerlink" title="6.rrencode"></a>6.rrencode</h4><p>rrencode可以把ruby代码全部转换成符号。</p>
<p>![rrencode.jpg][52]</p>
<p>rrencode<a href="http://www.lab2.kuis.kyoto-u.ac.jp/~yyoshida/rrencode.html" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="7-jjencode-aaencode"><a href="#7-jjencode-aaencode" class="headerlink" title="7.jjencode/aaencode"></a>7.jjencode/aaencode</h4><p>jjencode将JS代码转换成只有符号的字符串，类似于rrencode，介绍的<a href="http://utf-8.jp/public/20090710/jjencode.pps" target="_blank" rel="external">PPT</a>，aaencode可以将JS代码转换成常用的网络表情，也就是我们说的颜文字js加密。</p>
<p>![aaencode.png][53]</p>
<p>aaencode<a href="http://utf-8.jp/public/aaencode.html" target="_blank" rel="external">传送门</a></p>
<p>jjencode/aaencode的解密直接在浏览器的控制台里输入密文即可执行解密，想要详细了解jjencode是如何进行请<a href="http://pferrie2.tripod.com/papers/jjencode.pdf" target="_blank" rel="external">参考</a>，你也可以在github上<a href="https://github.com/jacobsoo/Decoder-JJEncode" target="_blank" rel="external">下载</a>实现jjdecoder的源码进行分析。</p>
<p>![aaencode解密.png][54]</p>
<hr>
<h4 id="8-JSfuck"><a href="#8-JSfuck" class="headerlink" title="8.JSfuck"></a>8.JSfuck</h4><p>JSFuck 可以让你只用 6 个字符<code>[ ]( ) ! +</code>来编写 JavaScript 程序。</p>
<p>![JSfuck.png][55]</p>
<p>JSfuck<a href="http://www.jsfuck.com/" target="_blank" rel="external">传送门</a></p>
<hr>
<h4 id="9-jother"><a href="#9-jother" class="headerlink" title="9.jother"></a>9.jother</h4><p>jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括：<code>! + ( ) [ ] { }</code>。只用这些字符就能完成对任意字符串的编码。</p>
<p><a href="http://drops.wooyun.org/author/do9gy" target="_blank" rel="external">do9gy</a>的<a href="http://drops.wooyun.org/web/4410" target="_blank" rel="external">jother编码之谜</a></p>
<p>![jother.png][56]</p>
<p>jother编码<a href="http://tmxk.org/jother/" target="_blank" rel="external">传送门</a></p>
<p>jother直接在浏览器(IE可以)的控制台里输入密文即可执行解密：</p>
<p>![jother解密.png][57]</p>
<hr>
<h3 id="10-brainfuck"><a href="#10-brainfuck" class="headerlink" title="10.brainfuck"></a>10.brainfuck</h3><p>Brainfuck是一种极小化的计算机语言，按照”Turing complete（完整图灵机）”思想设计的语言，它的主要设计思路是：用最小的概念实现一种“简单”的语言，BrainF**k 语言只有八种符号，所有的操作都由这八种符号(<code>&amp;gt; &amp;lt; + - . , [ ]</code>)的组合来完成。</p>
<p>明文：hello!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ .---. +++++ ++..+ ++.&lt;+ +++++ +++++</div><div class="line">[-&gt;++ +++++ ++++&lt; ]&gt;+++ ++++. &lt;++++ +++[- &gt;---- ---&lt;] &gt;--.&lt; +++++ ++[-&gt;</div><div class="line">----- --&lt;]&gt; ----- ----- .&lt;</div></pre></td></tr></table></figure>
<p>brainfuck<a href="http://www.splitbrain.org/services/ook" target="_blank" rel="external">传送门</a></p>
<p>其他稀奇古怪的编程语言请<a href="http://news.mydrivers.com/1/190/190926.htm" target="_blank" rel="external">参考</a></p>
<h3 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h3><hr>
<p><a href="http://www.wechall.net/applet/JPK_406.jar" target="_blank" rel="external">JPK神器</a></p>
<p><a href="https://github.com/jameslyons/python_cryptanalysis" target="_blank" rel="external">密码破解脚本</a></p>
<p><a href="https://dl.packetstormsecurity.net/shellcode/shellcodeencdec.py.txt" target="_blank" rel="external">shellcode转换脚本</a></p>
<h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><hr>
<p><a href="https://en.wikipedia.org/wiki/Classical_cipher" target="_blank" rel="external">Wikipedia Classical Cipher</a></p>
<p><a href="http://cryptogram.org/cipher_types.html" target="_blank" rel="external">Cryptogram Cipher Types</a></p>
<p><a href="http://www.practicalcryptography.com/" target="_blank" rel="external">Practical Cryptography</a></p>
<p><a href="http://rumkin.com/tools/cipher/" target="_blank" rel="external">Rumkin Cipher Tools</a></p>
<p><a href="https://encode-decode.appspot.com/" target="_blank" rel="external">encode-decode</a></p>
<p><a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n Blog</a></p>
<p><a href="http://wordsmith.org/anagram/" target="_blank" rel="external">Anagram</a></p>
<p></p><p><a href="http://www.thonky.com/kryptos/" target="_blank" rel="external">Thonky</a></p>
<ul>
<li>转载自<a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n’s Blog</a>文章<a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external">《CTF中那些脑洞大开的编码和加密》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CTF中那些脑洞大开的编码和加密&quot;&gt;&lt;a href=&quot;#CTF中那些脑洞大开的编码和加密&quot; class=&quot;headerlink&quot; title=&quot;CTF中那些脑洞大开的编码和加密&quot;&gt;&lt;/a&gt;CTF中那些脑洞大开的编码和加密&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF中图片隐藏文件分离方法总结</title>
    <link href="http://uknow.top/undefined/CTF%E4%B8%AD%E5%9B%BE%E7%89%87%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%E5%88%86%E7%A6%BB%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%9320160812/"/>
    <id>http://uknow.top/undefined/CTF中图片隐藏文件分离方法总结20160812/</id>
    <published>2016-08-12T10:03:22.000Z</published>
    <updated>2016-08-12T10:27:13.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CTF中图片隐藏文件分离方法总结"><a href="#CTF中图片隐藏文件分离方法总结" class="headerlink" title="CTF中图片隐藏文件分离方法总结"></a>CTF中图片隐藏文件分离方法总结</h1><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>在安全的大趋势下，信息安全越来越来受到国家和企业的重视，所以CTF比赛场次越来越多，而且比赛形式也不断的创新，题目也更加新颖有趣，对选手的综合信息安全能力有一个较好的考验，当然更好的是能从比赛有所收获，不断学习和总结提升自己的信息安全能力与技术。转到CTF比赛上，通常在CTF比赛中常有与隐写术(Steganography)相关的题目出现，这里我们讨论总结图片隐藏文件分离的方法，欢迎大家补充和交流:P</p>
<a id="more"></a>
<h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>这里我们以图片为载体，给了这样的一样图片：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1574897276.jpg" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>首先我们需要对图片进行分析，这里我们需要用到一个工具<a href="https://github.com/devttys0/binwalk" target="_blank" rel="external">binwalk</a>，想要了解这个工具可以参考这篇<a href="http://www.freebuf.com/sectool/15266.html" target="_blank" rel="external">Binwalk：后门（固件）分析利器</a>文章，以及<a href="http://tools.kali.org/forensics/binwalk" target="_blank" rel="external">kali官方对binwalk的概述和使用介绍</a>。</p>
<p>这里我们就是最简单的利用，在binwalk后直接提供固件文件路径和文件名即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># binwalk carter.jpg</div></pre></td></tr></table></figure></p>
<p>当我们使用这行命令后，binwalk就会自动分析这个jpg文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># binwalk carter.jpg</div><div class="line">  </div><div class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">0             0x0             JPEG image data, JFIF standard 1.01</div><div class="line">382           0x17E           Copyright string: &quot;Copyright (c) 1998 Hewlett-Packard Company&quot;</div><div class="line">3192          0xC78           TIFF image data, big-endian, offset of first image directory: 8</div><div class="line">140147        0x22373         JPEG image data, JFIF standard 1.01</div><div class="line">140177        0x22391         TIFF image data, big-endian, offset of first image directory: 8</div></pre></td></tr></table></figure>
<p>从上面的内容显然看得出来这个jpg文件还隐藏着另一个jpg文件，从140147块偏移开始就是另一张jpg。</p>
<h2 id="0x02-分离"><a href="#0x02-分离" class="headerlink" title="0x02 分离"></a>0x02 分离</h2><p>在得到隐藏信息之后我们下一步就是把另一张jpg分离出，以下讨论几种方法：</p>
<p><strong>（1）使用dd命令分离(linux/unix下)</strong></p>
<p>我们可以使用dd命令分离出隐藏文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># dd if=carter.jpg of=carter-1.jpg skip=140147 bs=1</div></pre></td></tr></table></figure>
<p>可以参考<a href="http://www.cnblogs.com/qq78292959/archive/2012/02/23/2364760.html" target="_blank" rel="external">dd命令详解</a>，这里if是指定输入文件，of是指定输出文件，skip是指定从输入文件开头跳过140147个块后再开始复制，bs设置每次读写块的大小为1字节 。</p>
<p>最后我们可以得到这样的一张carter-1.jpg图片：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1035901972.jpg" alt="CTF中图片隐藏文件分离方法总结"></p>
<p><strong>（2）使用foremost工具分离</strong></p>
<p>foremost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，win可以下载地址，Linux可以</p>
<p>通过下面命令安装使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># apt-get install foremost</div></pre></td></tr></table></figure>
<p>安装foremost后你可以使用foremost -help查看使用帮助，这里最简单分离文件的命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># foremost carter.jpg</div></pre></td></tr></table></figure>
<p>当我们使用这行命令后，foremost会自动生成output目录存放分离出文件：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/462577935.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<p><strong>（3）hex编辑器分析文件</strong></p>
<p>至于hex编辑器有很多，win下有用得较多的winhex,UltraEdit等，linux下有hexeditor等，这里我们以winhex为例手动分离，在分离之前我们需要知道一点关于jpg文件格式的知识，jpg格式文件开始的2字节是图像开始SOI(Start of Image,SOI)为FF D8，之后2个字节是JFIF应用数据块APPO(JFIF application segment)为FF E0 ，最后2个字节是图像文件结束标记EOI(end-of-file)为FF D9 ，如果你想详细了解更多关于这方面的知识可以参考<a href="http://blog.csdn.net/liuqz2009/article/details/8270355" target="_blank" rel="external">jpg文件格式分析</a>一文。</p>
<p>用winhex打开图片，通过Alt+G快捷键输入偏移地址22373跳转到另一张jpg的图像开始块，可以看到FF D8图像开始块。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/468017981.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>而图像结束块FF D9</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1634850613.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>选取使用Alt+1快捷键选取FF为开始的块，Alt+2选取D9为结束块，然后右键-&gt;Edit-&gt;Copy Block-&gt;Into New File保存相应的文件后缀，例如new.jpg</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/2866727204.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<h2 id="0x03-其他"><a href="#0x03-其他" class="headerlink" title="0x03 其他"></a>0x03 其他</h2><p>还有一种特例，它是事先制作一个hide.zip，里面放入隐藏的文件，再需要一张jpg图片example.jpg，然后再通过命令 copy /b example.jpg+hide.zip output.jpg生成output.jpg的新文件，原理是利用了copy命令，将两个文件以二进制方式连接起来，正常的jpg文件结束标志是FF D9，而图片查看器会忽视jpg结束符之后的内容，所以我们附加的hide.zip就不会影响到图像的正常显示。(参考AppLeU0的<a href="http://drops.wooyun.org/tips/4862" target="_blank" rel="external">隐形术总结</a>)</p>
<p>针对这种特例我们可以直接将jpg文件改为zip文件后缀(其他文件如rar文件也类似)，就可以看到hide.zip压缩包里隐藏的文件。</p>
<p>比如当我们得到一张wh3r3_is_f14g.jpg文件：</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/3019396614.jpg" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>当我们用winhex打开文件，发现wh3r3_is_f14g.jpg文件最后数据块不是FF D9 jpg文件的结束标志，而是zip文件的结束标志。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/857085314.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>我们直接将文件改名为wh3r3_is_f14g.zip，打开得到flag.txt。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/1649307525.png" alt="CTF中图片隐藏文件分离方法总结"></p>
<p>最后打开flag.txt得到flag。</p>
<p><img src="https://www.hackfun.org/usr/uploads/2016/07/4207904990.jpg" alt="CTF中图片隐藏文件分离方法总结"></p>
<h2 id="0x03-后话"><a href="#0x03-后话" class="headerlink" title="0x03 后话"></a>0x03 后话</h2><p>图片隐写方式有很多种，在此只介绍了这一种，如果以后有机会会写其他的图片隐写，如果对隐写感兴趣这里推荐一本机械工业出版社的《数据隐藏技术揭秘：破解多媒体、操作系统、移动设备和网络协议中的隐秘数据》，如果你不想购买实体书，可以<a href="http://www.jb51.net/books/434273.html" target="_blank" rel="external">下载pdf版</a>。</p>
<p>这里我把所有图片打包了zip，如果有需要自行下载吧: P</p>
<p></p><p><a href="https://www.hackfun.org/usr/uploads/2016/07/3701056190.zip" target="_blank" rel="external">Steganography_Pictures.zip</a></p>
<ul>
<li>转载自<a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n’s Blog</a>文章<a href="https://www.hackfun.org/CTF/summary-of-image-hiding-files-in-CTF.html" target="_blank" rel="external">《CTF中图片隐藏文件分离方法总结》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;CTF中图片隐藏文件分离方法总结&quot;&gt;&lt;a href=&quot;#CTF中图片隐藏文件分离方法总结&quot; class=&quot;headerlink&quot; title=&quot;CTF中图片隐藏文件分离方法总结&quot;&gt;&lt;/a&gt;CTF中图片隐藏文件分离方法总结&lt;/h1&gt;&lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;在安全的大趋势下，信息安全越来越来受到国家和企业的重视，所以CTF比赛场次越来越多，而且比赛形式也不断的创新，题目也更加新颖有趣，对选手的综合信息安全能力有一个较好的考验，当然更好的是能从比赛有所收获，不断学习和总结提升自己的信息安全能力与技术。转到CTF比赛上，通常在CTF比赛中常有与隐写术(Steganography)相关的题目出现，这里我们讨论总结图片隐藏文件分离的方法，欢迎大家补充和交流:P&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解JPEG图像格式Jphide隐写</title>
    <link href="http://uknow.top/undefined/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JPEG%E5%9B%BE%E5%83%8F%E6%A0%BC%E5%BC%8FJphide%E9%9A%90%E5%86%9920160812/"/>
    <id>http://uknow.top/undefined/深入理解JPEG图像格式Jphide隐写20160812/</id>
    <published>2016-08-12T09:56:19.000Z</published>
    <updated>2016-08-12T09:58:46.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解JPEG图像格式Jphide隐写"><a href="#深入理解JPEG图像格式Jphide隐写" class="headerlink" title="深入理解JPEG图像格式Jphide隐写"></a>深入理解JPEG图像格式Jphide隐写</h1><h2 id="0x00-隐写原理"><a href="#0x00-隐写原理" class="headerlink" title="0x00 隐写原理"></a>0x00 隐写原理</h2><p>Jphide是基于最低有效位LSB的<a href="http://www.cnblogs.com/leaven/archive/2010/04/06/1705846.html" target="_blank" rel="external">JPEG格式</a>图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在<a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform" target="_blank" rel="external">DCT变换域</a>上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时<a href="http://baike.baidu.com/link?url=OWM-kQRYlFaJ2Sy7m1E_Z_-fnvknJTRSHwk1f3eoabLsbht1TJa07GmvWRoiOg6U7-0-Ey3vb_UHcDm9Pc7Mgq" target="_blank" rel="external">Blowfish算法</a>有较强的抗统计检测能力。</p>
<p>由于JPEG图像格式使用<a href="http://baike.baidu.com/view/391624.htm?fr=aladdin&amp;fromtitle=DCT&amp;fromid=4184&amp;type=syn" title="DCT&amp;fromid=4184&amp;type=syn" target="_blank" rel="external">离散余弦变换</a>（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种<a href="http://baike.baidu.com/link?url=7eIl--nFUaz-amKaY9jatpW4J-J2JyZEXy8dYJM4Py1CspzR9mUATKgTyXOCt7M6AjFSv4JmF3YKtXTTAauHm_" target="_blank" rel="external">有损压缩</a>（Loss Compression）技术，但一般不会影响图像的视觉效果。</p>
<h2 id="0x01-隐写过程"><a href="#0x01-隐写过程" class="headerlink" title="0x01 隐写过程"></a>0x01 隐写过程</h2><p>Jphide隐写过程大致为：先解压压缩JPEG图像，得到DCT系数；然后对隐藏信息用户给定的密码进行Blowfish加密；再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片，下面是个人对隐写过程理解画出的大致流程图。</p>
<p><img src="http://i.imgur.com/kb6USbH.png" alt=""></p>
<a id="more"></a>
<h2 id="0x02-隐写实现"><a href="#0x02-隐写实现" class="headerlink" title="0x02 隐写实现"></a>0x02 隐写实现</h2><p><strong>（1）Stegdetect</strong></p>
<p>实现JPEG图像Jphide隐写算法工具有多个，比如由Neils Provos开发通过统计分析技术评估JPEG文件的DCT频率系数的隐写工具<a href="https://github.com/abeluck/stegdetect" target="_blank" rel="external">Stegdetect</a>，它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过Jphide、outguess和jsteg-shell方式嵌入的隐藏信息。</p>
<p><strong>（2）JPHS</strong></p>
<p>而这里介绍另一款JPEG图像的信息隐藏软件<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/programs.htm" target="_blank" rel="external">JPHS</a>，它是由Allan Latham开发设计实现在Windows和Linux系统平台针对有损压缩JPEG文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序JPHIDE和JPSEEK， JPHIDE程序主要是实现将信息文件加密隐藏到JPEG图像功能，而JPSEEK程序主要实现从用JPHIDE程序加密隐藏得到的JPEG图像探测提取信息文件，Windows版本的JPHS里的JPHSWIN程序具有图形化操作界面且具备JPHIDE和JPSEEK的功能。</p>
<p><img src="http://i.imgur.com/BzbsFlS.png" alt=""></p>
<p>1.Windows用户请下载<a href="http://io.acad.athabascau.ca/~grizzlie/Comp607/jphs05.zip" target="_blank" rel="external">JPHS-05 for Windows</a>,同时也提供下载<a href="http://linux01.gwdg.de/~alatham/stego.html" target="_blank" rel="external">Linux版本</a>。</p>
<p>2.分别准备一个JPEG格式的图片（example.jpg）和一个文本文件（flag.txt）。</p>
<p><img src="http://i.imgur.com/C8DQKFo.png" alt=""></p>
<p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。</p>
<p>这里简单介绍JPEG文件交换格式的JPEG图片的图像开始标记SOI（Start of Image）和应用程序保留标记APP0（Application 0），JPEG文件交换格式的JPEG图片开始前2个字节是图像开始标记为0xFFD8，之后2个字节接着便是应用程序保留标记为0xFFE0，应用程序保留标记APP0包含9个具体字段，这里介绍前三个字段，第一个字段是数据长度占2个字节，表示包括本字段但不包括标记代码的总长度，这里为10个字节，第二个字段是标识符占5个字节0x4A46494600表示“JFIF0”字符串，第三个字段是版本号占2个字节，这里是0X0101，表示JFIF的版本号为1.1，但也可能为其它数值，从而代表了其它版本号。</p>
<p><img src="http://i.imgur.com/ciEvX2s.png" alt=""></p>
<p>3.Windows版本可以使用具有图形化操作界面的Jphswin，选择“Open jpeg”打开示例JPEG格式图片example.jpg</p>
<p><img src="http://i.imgur.com/kipH6L0.png" alt=""></p>
<p>如果你选择的不是JPEG格式的图片程序会自动退出，你可以16进制编辑器如Winhex查看图片的图像开始标记SOI和应用程序保留标记APP0，当载入JPEG格式图片会显示一些图片的属性。</p>
<p><img src="http://i.imgur.com/ImK54U1.png" alt=""></p>
<p>4.选择“Hide”选项之后在两次文本框输入相同的密码，这里以输入flag作为密码为例，然后输入要包含隐藏信息的文本。</p>
<p><img src="http://i.imgur.com/QYrSVtE.png" alt=""></p>
<p>5.选择将要隐藏的信息如flag.txt。</p>
<p><img src="http://i.imgur.com/XfbEvQS.png" alt=""></p>
<p>6.选择“Save jpeg as”选项将图片另存为jpeg格式并输入文件的名称为新的图像文件如C4n-u-find-f14g.jpg。</p>
<p><img src="http://i.imgur.com/sj8X3aP.png" alt=""></p>
<p>7.之后便可以看到生成结果和相关信息。</p>
<p><img src="http://i.imgur.com/HPkvnci.png" alt=""></p>
<p>8.第2步到第7步做的是Jhide方式信息隐藏，接下来我们从C4n-u-find-f14g.jpg图片提取出隐藏信息。</p>
<p><img src="http://i.imgur.com/H9QJnHU.jpg" alt=""></p>
<p>9.如果之前你并不知道图片是基于什么方式进行信息隐藏，你可以使用Stegdetect先进行探测。</p>
<p>Stegdetect的主要选项如下：</p>
<blockquote>
<p>-q  仅显示可能包含隐藏内容的图像。</p>
<p>-n  启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</p>
<p>-s  修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</p>
<p>-d  打印带行号的调试信息。</p>
<p>-t  设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</p>
<ul>
<li>j  检测图像中的信息是否是用jsteg嵌入的。</li>
<li>o  检测图像中的信息是否是用outguess嵌入的。</li>
<li>p  检测图像中的信息是否是用jphide嵌入的。</li>
<li>i  检测图像中的信息是否是用invisible secrets嵌入的。</li>
</ul>
<p>-V 显示软件版本号。</p>
<p>如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识</p>
<p>隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</p>
</blockquote>
<p>从下图可以看出很可能是Jphide的信息隐藏方式：</p>
<p><img src="http://i.imgur.com/i3zeRUx.png" alt=""></p>
<p>10.在知道隐藏方式之后可以开始进行信息提取，和使用JPHS进行信息隐藏过程类似，打开需要提取隐藏信息的图片C4n-u-find-f14g.jpg，输入对应密码（在不知道密码的情况不可以尝试Stegdetect工具里的Stegbreak程序进行基于字典的暴力攻击）flag，密码验证通过JPHS会自动提取隐藏信息，之后便可以另存提取出的信息。</p>
<p><img src="http://i.imgur.com/aCnBL4u.png" alt=""></p>
<p>11.打开提取得到的find.txt便可以得到我们想要的隐藏信息。</p>
<p><img src="http://i.imgur.com/1whWnla.png" alt=""></p>
<h2 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h2><p><a href="http://mall.cnki.net/magazine/article/JSJC201006056.htm" target="_blank" rel="external">Jphide原理剖析及检测</a></p>
<p></p><p><a href="http://www.cnki.com.cn/Article/CJFDTotal-JSJC200707054.htm" target="_blank" rel="external">基于二次加密的JPhide隐写检测方法</a></p>
<ul>
<li>转载自<a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n’s Blog</a>文章<a href="https://www.hackfun.org/CTF/jphide-steganography.html" target="_blank" rel="external">《深入理解JPEG图像格式Jphide隐写》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深入理解JPEG图像格式Jphide隐写&quot;&gt;&lt;a href=&quot;#深入理解JPEG图像格式Jphide隐写&quot; class=&quot;headerlink&quot; title=&quot;深入理解JPEG图像格式Jphide隐写&quot;&gt;&lt;/a&gt;深入理解JPEG图像格式Jphide隐写&lt;/h1&gt;&lt;h2 id=&quot;0x00-隐写原理&quot;&gt;&lt;a href=&quot;#0x00-隐写原理&quot; class=&quot;headerlink&quot; title=&quot;0x00 隐写原理&quot;&gt;&lt;/a&gt;0x00 隐写原理&lt;/h2&gt;&lt;p&gt;Jphide是基于最低有效位LSB的&lt;a href=&quot;http://www.cnblogs.com/leaven/archive/2010/04/06/1705846.html&quot;&gt;JPEG格式&lt;/a&gt;图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在&lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_cosine_transform&quot;&gt;DCT变换域&lt;/a&gt;上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时&lt;a href=&quot;http://baike.baidu.com/link?url=OWM-kQRYlFaJ2Sy7m1E_Z_-fnvknJTRSHwk1f3eoabLsbht1TJa07GmvWRoiOg6U7-0-Ey3vb_UHcDm9Pc7Mgq&quot;&gt;Blowfish算法&lt;/a&gt;有较强的抗统计检测能力。&lt;/p&gt;
&lt;p&gt;由于JPEG图像格式使用&lt;a href=&quot;http://baike.baidu.com/view/391624.htm?fr=aladdin&amp;amp;fromtitle=DCT&amp;amp;fromid=4184&amp;amp;type=syn&quot; title=&quot;DCT&amp;amp;fromid=4184&amp;amp;type=syn&quot;&gt;离散余弦变换&lt;/a&gt;（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种&lt;a href=&quot;http://baike.baidu.com/link?url=7eIl--nFUaz-amKaY9jatpW4J-J2JyZEXy8dYJM4Py1CspzR9mUATKgTyXOCt7M6AjFSv4JmF3YKtXTTAauHm_&quot;&gt;有损压缩&lt;/a&gt;（Loss Compression）技术，但一般不会影响图像的视觉效果。&lt;/p&gt;
&lt;h2 id=&quot;0x01-隐写过程&quot;&gt;&lt;a href=&quot;#0x01-隐写过程&quot; class=&quot;headerlink&quot; title=&quot;0x01 隐写过程&quot;&gt;&lt;/a&gt;0x01 隐写过程&lt;/h2&gt;&lt;p&gt;Jphide隐写过程大致为：先解压压缩JPEG图像，得到DCT系数；然后对隐藏信息用户给定的密码进行Blowfish加密；再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片，下面是个人对隐写过程理解画出的大致流程图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/kb6USbH.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CTF工具以及脚本的整理 </title>
    <link href="http://uknow.top/undefined/CTF%E5%B7%A5%E5%85%B7%E4%BB%A5%E5%8F%8A%E8%84%9A%E6%9C%AC%E7%9A%84%E6%95%B4%E7%90%8620160811/"/>
    <id>http://uknow.top/undefined/CTF工具以及脚本的整理20160811/</id>
    <published>2016-08-10T16:15:14.000Z</published>
    <updated>2016-08-10T16:19:37.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="密码学-cryptology"><a href="#密码学-cryptology" class="headerlink" title="密码学 cryptology"></a><a href="#密码学-cryptology"></a>密码学 <code>cryptology</code></h1><p><a href="http://www.practicalcryptography.com/" target="_blank" rel="external">各种密码学的在线解密</a></p>
<h2 id="简单的位移密码"><a href="#简单的位移密码" class="headerlink" title="简单的位移密码"></a><a href="#简单的位移密码"></a>简单的位移密码</h2><p><code>默认位移13 即rot13</code></p>
<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-<em>- coding:utf-8 -</em>-</span></div><div class="line">str =raw_input(<span class="string">‘put flag:’</span>)</div><div class="line">new_str = <span class="string">“”</span></div><div class="line">yi = <span class="number">13</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str:</div><div class="line">    <span class="keyword">if</span> i&gt;=<span class="string">‘a’</span> <span class="keyword">and</span> i&lt;=<span class="string">‘z’</span>:</div><div class="line">        i = ord(i)</div><div class="line">        i = ((i-yi)<span class="number">-97</span>)%<span class="number">26</span>+<span class="number">97</span></div><div class="line">        i = chr(i)</div><div class="line">        new_str = new_str+i</div><div class="line">        print(new_str)</div></pre></td></tr></tbody></table></figure>

<h2 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a><a href="#培根密码"></a>培根密码</h2><p>培根是根据字体的斜体 大小写转化成AB等字符 然后每五个对应一个字母的脚本  我还没写大小写转化脚本 这里只有 五个字母对应一个字母脚本<br>（1）<a href="http://rumkin.com/tools/cipher/baconian.php" target="_blank" rel="external">在线加解密</a><br>（2）<code>Python脚本</code></p>
<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/Bin/env python</span></div><div class="line"><span class="comment"># -<em>- coding: utf-8 -</em>-</span></div><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -<em>- coding: utf-8 -</em>-</span></div><div class="line"><span class="comment">#<strong>author</strong> = ‘tyomcat’</span></div><div class="line"><span class="comment"># 培根解密代码</span></div><div class="line"><span class="comment"># 两种加密方式</span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">peig1</span><span class="params">(m)</span>:</span></div><div class="line">    basic1 = {</div><div class="line">    <span class="string">‘AAAAA’</span> : <span class="string">‘A’</span>,</div><div class="line">    <span class="string">‘AAAAB’</span> : <span class="string">‘B’</span>,</div><div class="line">    <span class="string">‘AAABA’</span> : <span class="string">‘C’</span>,</div><div class="line">    <span class="string">‘AAABB’</span> : <span class="string">‘D’</span>,</div><div class="line">    <span class="string">‘AABAA’</span> : <span class="string">‘E’</span>,</div><div class="line">    <span class="string">‘AABAB’</span> : <span class="string">‘F’</span>,</div><div class="line">    <span class="string">‘AABBA’</span> : <span class="string">‘G’</span>,</div><div class="line">    <span class="string">‘AABBB’</span> : <span class="string">‘H’</span>,</div><div class="line">    <span class="string">‘ABAAA’</span> : <span class="string">‘I’</span>,</div><div class="line">    <span class="string">‘ABAAB’</span> : <span class="string">‘J’</span>,</div><div class="line">    <span class="string">‘ABABA’</span> : <span class="string">‘K’</span>,</div><div class="line">    <span class="string">‘ABABB’</span> : <span class="string">‘L’</span>,</div><div class="line">    <span class="string">‘ABBAB’</span> : <span class="string">‘N’</span>,</div><div class="line">    <span class="string">‘ABBBA’</span> : <span class="string">‘O’</span>,</div><div class="line">    <span class="string">‘ABBBB’</span> : <span class="string">‘P’</span>,</div><div class="line">    <span class="string">‘BAAAA’</span> : <span class="string">‘Q’</span>,</div><div class="line">    <span class="string">‘BAAAB’</span> : <span class="string">‘R’</span>,</div><div class="line">    <span class="string">‘BAABA’</span> : <span class="string">‘S’</span>,</div><div class="line">    <span class="string">‘BAABB’</span> : <span class="string">‘T’</span>,</div><div class="line">    <span class="string">‘BABAA’</span> : <span class="string">‘U’</span>,</div><div class="line">    <span class="string">‘BABAB’</span> : <span class="string">‘V’</span>,</div><div class="line">    <span class="string">‘BABBA’</span> : <span class="string">‘W’</span>,</div><div class="line">    <span class="string">‘BABBB’</span> : <span class="string">‘X’</span>,</div><div class="line">    <span class="string">‘BBAAA’</span> : <span class="string">‘Y’</span>,</div><div class="line">    <span class="string">‘BBAAB’</span> : <span class="string">‘Z’</span></div><div class="line">    }</div><div class="line">    output = <span class="string">‘’</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(m) - <span class="number">4</span>, <span class="number">5</span>):</div><div class="line">        temp = m[i: i + <span class="number">5</span>]</div><div class="line">        output += basic1[temp]</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">peig2</span><span class="params">(m)</span>:</span></div><div class="line"></div><div class="line">    basic2 = {</div><div class="line">    <span class="string">‘AAAAA’</span> : <span class="string">‘A’</span>,</div><div class="line">    <span class="string">‘AAAAB’</span> : <span class="string">‘B’</span>,</div><div class="line">    <span class="string">‘AAABA’</span> : <span class="string">‘C’</span>,</div><div class="line">    <span class="string">‘AAABB’</span> : <span class="string">‘D’</span>,</div><div class="line">    <span class="string">‘AABAA’</span> : <span class="string">‘E’</span>,</div><div class="line">    <span class="string">‘AABAB’</span> : <span class="string">‘F’</span>,</div><div class="line">    <span class="string">‘AABBA’</span> : <span class="string">‘G’</span>,</div><div class="line">    <span class="string">‘AABBB’</span> : <span class="string">‘H’</span>,</div><div class="line">    <span class="string">‘ABAAA’</span> : <span class="string">‘I’</span>,</div><div class="line">    <span class="string">‘ABAAA’</span> : <span class="string">‘J’</span>,</div><div class="line">    <span class="string">‘ABAAB’</span> : <span class="string">‘K’</span>,</div><div class="line">    <span class="string">‘ABABA’</span> : <span class="string">‘L’</span>,</div><div class="line">    <span class="string">‘ABABB’</span> : <span class="string">‘M’</span>,</div><div class="line">    <span class="string">‘ABBAA’</span> : <span class="string">‘N’</span>,</div><div class="line">    <span class="string">‘ABBAB’</span> : <span class="string">‘O’</span>,</div><div class="line">    <span class="string">‘ABBBA’</span> : <span class="string">‘P’</span>,</div><div class="line">    <span class="string">‘ABBBB’</span> : <span class="string">‘Q’</span>,</div><div class="line">    <span class="string">‘BAAAA’</span> : <span class="string">‘R’</span>,</div><div class="line">    <span class="string">‘BAAAB’</span> : <span class="string">‘S’</span>,</div><div class="line">    <span class="string">‘BAABA’</span> : <span class="string">‘T’</span>,</div><div class="line">    <span class="string">‘BAABB’</span> : <span class="string">‘U’</span>,</div><div class="line">    <span class="string">‘BAABB’</span> : <span class="string">‘V’</span>,</div><div class="line">    <span class="string">‘BABAA’</span> : <span class="string">‘W’</span>,</div><div class="line">    <span class="string">‘BABAB’</span> : <span class="string">‘X’</span>,</div><div class="line">    <span class="string">‘BABBA’</span> : <span class="string">‘Y’</span>,</div><div class="line">    <span class="string">‘BABBB’</span> : <span class="string">‘Z’</span></div><div class="line">    }</div><div class="line">    output = <span class="string">‘’</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(m) - <span class="number">4</span>, <span class="number">5</span>):</div><div class="line">        temp = m[i: i + <span class="number">5</span>]</div><div class="line">        output += basic2[temp]</div><div class="line">    <span class="keyword">return</span> output</div><div class="line"></div><div class="line"><span class="keyword">if</span> <strong>name</strong> == <span class="string">‘<strong>main</strong>‘</span>:</div><div class="line">    </div><div class="line">    m = raw_input(<span class="string">“请输入密文:”</span>)</div><div class="line">    mode = input(<span class="string">“选择密文对应的方式 1 or 2：”</span>)</div><div class="line">    <span class="keyword">if</span> len(m)%<span class="number">5</span> == <span class="number">0</span>:</div><div class="line">        l = []</div><div class="line">        k = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(len(m)/<span class="number">5</span>):</div><div class="line">            l.append(m[:<span class="number">5</span>])</div><div class="line">            m = m[<span class="number">5</span>:]</div><div class="line">        <span class="keyword">if</span> mode == <span class="number">1</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">                <span class="keyword">if</span> i.isupper():</div><div class="line">                    k.append(peig1(i))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    i = i.upper()</div><div class="line">                    k.append(peig1(i))</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> mode == <span class="number">2</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">                <span class="keyword">if</span> i.isupper():</div><div class="line">                    k.append(peig2(i))</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    i = i.upper()</div><div class="line">                    k.append(peig2(i))</div><div class="line">        flag = <span class="string">‘’</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> k:</div><div class="line">            flag+=i[<span class="number">0</span>]</div><div class="line">        <span class="keyword">print</span> flag</div></pre></td></tr></tbody></table></figure>

<h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a><a href="#栅栏密码"></a>栅栏密码</h2><p>(1) 一个win平台下的<a href="http://oayoilchh.bkt.clouddn.com/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81%E5%8A%A0%E8%A7%A3%E5%AF%861.10.exe" target="_blank" rel="external">软件</a><br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/14:49:39%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/14:49:39%20" alt=""></a><br>（2）<code>python脚本</code></p>
<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#author:Swing</span></div><div class="line"><span class="comment">#通用脚本</span></div><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -<em>- coding: utf_8 -</em>-</span></div><div class="line">e = raw_input(<span class="string">‘请输入要解密的字符串\n’</span>)</div><div class="line">elen = len(e)</div><div class="line">field=[]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,elen):</div><div class="line">            <span class="keyword">if</span>(elen%i==<span class="number">0</span>):</div><div class="line">                field.append(i)</div><div class="line"><span class="keyword">for</span> f <span class="keyword">in</span> field:</div><div class="line">    b = elen / f</div><div class="line">    result = {x:<span class="string">‘’</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(b)}</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(elen):</div><div class="line">        a = i % b;</div><div class="line">        result.update({a:result[a] + e[i]})</div><div class="line">    d = <span class="string">‘’</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(b):</div><div class="line">        d = d + result[i]</div><div class="line">    <span class="keyword">print</span> <span class="string">‘分为\t’</span>+str(f)+<span class="string">‘\t’</span>+<span class="string">‘栏时，解密结果为：  ‘</span>+d</div></pre></td></tr></tbody></table></figure>

<h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a><a href="#凯撒密码"></a>凯撒密码</h2><p>凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推，更多<a href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="external">参考</a><br>位移参考<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:00:45%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:00:45%20" alt=""></a><br>(1)<a href="http://planetcalc.com/1434/" target="_blank" rel="external">网站链接</a> 这个网站可以列出1-26的可能性<br>(1)还有一种方法就是利用<a href="http://" target="_blank" rel="external">JPK</a>这个工具<br>使用方法看图就够了吧 <a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:32:31%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:32:31%20" alt=""></a><br>(3)<code>Python实现</code></p>
<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#! /usr/bin/env python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment">#<strong>author</strong> = ‘tyomcat’</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(c, key, start = <span class="string">‘a’</span>, n = <span class="number">26</span>)</span>:</span></div><div class="line">    a = ord(start)</div><div class="line">    offset = ((ord(c) - a + key)%n)</div><div class="line">    <span class="keyword">return</span> chr(a + offset)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesarEncode</span><span class="params">(s, key)</span>:</span></div><div class="line">    o = <span class="string">“”</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> c.islower():</div><div class="line">            o+= convert(c, key, <span class="string">‘a’</span>)</div><div class="line">        <span class="keyword">elif</span> c.isupper():</div><div class="line">            o+= convert(c, key, <span class="string">‘A’</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            o+= c</div><div class="line">    <span class="keyword">return</span> o</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">caesarDecode</span><span class="params">(s, key)</span>:</span></div><div class="line">    <span class="keyword">return</span> caesarEncode(s, -key)</div><div class="line"><span class="keyword">if</span> <strong>name</strong> == <span class="string">‘<strong>main</strong>‘</span>:</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(<span class="number">27</span>):</div><div class="line">       e=<span class="string">‘Jr1p0zr2VfPp’</span>     <span class="comment">#写这里</span></div><div class="line">       d = caesarDecode(e, key)</div><div class="line"></div><div class="line">       <span class="keyword">print</span> d</div><div class="line">       <span class="keyword">print</span> <span class="string">‘\n’</span></div><div class="line"><code>python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 简单替换密码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;简单换位密码(Simple Substitution Cipher)加密方式是以每个明文字母被与之唯一对应且不同的字母替换的方式实现的，它不同于恺撒密码，因为密码字母表的字母不是简单的移位，而是完全是混乱的 例如：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;</code>code</div><div class="line">明文字母 : abcdefghijklmnopqrstuvwxyz</div><div class="line">明文字母 : phqgiumeaylnofdxjkrcvstzwb</div></pre></td></tr></tbody></table></figure>

<p>其实我感觉有点像是词频攻击就可以解决所以我（麦香师傅告诉我才知道的）推荐一个词频攻击的网站<code>要有梯子</code><a href="http://quipqiup.com/index.php" target="_blank" rel="external">http://quipqiup.com/index.php</a></p>
<h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a><a href="#猪圈密码"></a>猪圈密码</h2><p>猪圈密码(Pigpen Cipher或称九宫格密码、朱高密码、共济会密码或共济会员密码)，是一种以格子为基础的简单替代式密码<br>明文和密文对应：<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:51:15%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:51:15%20" alt=""></a><br>在线解密<a href="http://www.simonsingh.net/The_Black_Chamber/pigpen.html" target="_blank" rel="external">飞机票</a><br>上面是正常的对应 我见过一种变形的 与其说是猪圈不如说是替换<br>替换规则是 左右字母替换<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:56:11%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/15:56:11%20" alt=""></a><br>右边的跟左边的一一对应，在左边的换成右边<br><code>2015年广东强网杯 小心猪圈</code>的题目就是这样的<br>附上我的脚本</p>
<figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line">s=raw_input()</div><div class="line">Key = {</div><div class="line">    <span class="string">‘a’</span>:<span class="string">‘j’</span>,</div><div class="line">    <span class="string">‘b’</span>:<span class="string">‘k’</span>,</div><div class="line">    <span class="string">‘c’</span>:<span class="string">‘l’</span>,</div><div class="line">    <span class="string">‘d’</span>:<span class="string">‘m’</span>,</div><div class="line">    <span class="string">‘e’</span>:<span class="string">‘n’</span>,</div><div class="line">    <span class="string">‘f’</span>:<span class="string">‘o’</span>,</div><div class="line">    <span class="string">‘g’</span>:<span class="string">‘p’</span>,</div><div class="line">    <span class="string">‘h’</span>:<span class="string">‘q’</span>,</div><div class="line">    <span class="string">‘i’</span>:<span class="string">‘r’</span>,</div><div class="line">    <span class="string">‘s’</span>:<span class="string">‘w’</span>,</div><div class="line">    <span class="string">‘t’</span>:<span class="string">‘x’</span>,</div><div class="line">    <span class="string">‘u’</span>:<span class="string">‘y’</span>,</div><div class="line">    <span class="string">‘v’</span>:<span class="string">‘z’</span>,</div><div class="line">    <span class="string">‘-‘</span>:<span class="string">‘-‘</span>,</div><div class="line">    <span class="string">‘{‘</span>:<span class="string">‘{‘</span>,</div><div class="line">    <span class="string">‘}’</span>:<span class="string">‘}’</span>,</div><div class="line">    <span class="string">‘j’</span>:<span class="string">‘a’</span>,</div><div class="line">    <span class="string">‘k’</span>:<span class="string">‘b’</span>,</div><div class="line">    <span class="string">‘l’</span>:<span class="string">‘c’</span>,</div><div class="line">    <span class="string">‘m’</span>:<span class="string">‘d’</span>,</div><div class="line">    <span class="string">‘n’</span>:<span class="string">‘e’</span>,</div><div class="line">    <span class="string">‘o’</span>:<span class="string">‘f’</span>,</div><div class="line">    <span class="string">‘p’</span>:<span class="string">‘g’</span>,</div><div class="line">    <span class="string">‘q’</span>:<span class="string">‘h’</span>,</div><div class="line">    <span class="string">‘r’</span>:<span class="string">‘i’</span>,</div><div class="line">    <span class="string">‘w’</span>:<span class="string">‘s’</span>,</div><div class="line">    <span class="string">‘x’</span>:<span class="string">‘t’</span>,</div><div class="line">    <span class="string">‘y’</span>:<span class="string">‘u’</span>,</div><div class="line">    <span class="string">‘z’</span>:<span class="string">‘v’</span></div><div class="line">}</div><div class="line">output1 = <span class="string">‘’</span></div><div class="line"><span class="keyword">for</span> i  <span class="keyword">in</span> range(<span class="number">0</span>,len(s)):</div><div class="line">     temp=s[i]</div><div class="line">     output1+=Key[temp]</div><div class="line"><span class="keyword">print</span> output1</div></pre></td></tr></tbody></table></figure>

<p>更多关于密码学和编码的问题可以参考<a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external">4ido10n表哥的博文</a></p>
<h1 id="隐写工具"><a href="#隐写工具" class="headerlink" title="隐写工具"></a><a href="#隐写工具"></a>隐写工具</h1><h2 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a><a href="#Stegsolve"></a>Stegsolve</h2><p>图片隐写的神器 <a href="https://yunpan.cn/c6jV9E9ZevwdF" target="_blank" rel="external">下载的传送门</a>（提取码：c146）<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:20:30%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:20:30%20" alt=""></a><br>具体可以自己尝试 简单介绍几下两个功能</p>
<ol>
<li>Stereogram Solver<br>这个功能可以从不同通道去分析图片</li>
<li>Frame Browser<br>这个功能是如果这张图片里面还藏这另外一张图片的话 他可以分离出来</li>
<li><p>Image Combiner<br>这个功能可以对比两张图片 最终Sub出不一样的地方</p>
<h2 id="pngcheck"><a href="#pngcheck" class="headerlink" title="pngcheck"></a><a href="#pngcheck"></a>pngcheck</h2><p><code>pngcheck.exe -v sctf.png</code><br><code>这个是Dos下的工具 win32平台的</code><br><a href="https://yunpan.cn/c6jjU9MsIWkWv" target="_blank" rel="external">下载传送门</a> （提取码：f47b）<br>他的功能是检测png格式图片的损坏位置 一般用来对PNG隐写进行修复会用到</p>
<h2 id="stegdetect"><a href="#stegdetect" class="headerlink" title="stegdetect"></a><a href="#stegdetect"></a>stegdetect</h2><p>这个东西是用来检测图片的隐写方式的 它可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息<br><a href="https://yunpan.cn/c6jwUT7EA9ywW" target="_blank" rel="external">下载传送门</a> （提取码：4c2e）<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:35:39%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:35:39%20" alt=""></a><br>比如图中就可以看出他是<code>Jphide</code>隐写<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">使用规则:</div><div class="line">    q 仅显示可能包含隐藏内容的图像。</div><div class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。</div><div class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</div><div class="line">-d 打印带行号的调试信息。</div><div class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</div><div class="line">j 检测图像中的信息是否是用jsteg嵌入的。</div><div class="line">o 检测图像中的信息是否是用outguess嵌入的。</div><div class="line">p 检测图像中的信息是否是用jphide嵌入的。</div><div class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</div><div class="line">-V 显示软件版本号。</div><div class="line">如果检测结果显示该文件可能包含隐藏信息，那么Stegdetect会在检测结果后面使用1～3颗星来标识</div><div class="line">隐藏信息存在的可能性大小，3颗星表示隐藏信息存在的可能性最大。</div></pre></td></tr></tbody></table></figure></p>
</li>
</ol>
<h2 id="Jphide"><a href="#Jphide" class="headerlink" title="Jphide"></a><a href="#Jphide"></a>Jphide</h2><p>先推荐表哥的博文 他写得好详细<a href="https://www.hackfun.org/CTF/jphide-steganography.html" target="_blank" rel="external">传送门</a><br><a href="http://linux01.gwdg.de/~alatham/stego.html" target="_blank" rel="external">下载传送门</a><br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:45:16%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:45:16%20" alt=""></a><br><code>左边是隐写 右边是提取隐写文件</code></p>
<h2 id="Winhex"><a href="#Winhex" class="headerlink" title="Winhex"></a><a href="#Winhex"></a>Winhex</h2><p>二进制文件打开方式</p>
<h2 id="wbs43open"><a href="#wbs43open" class="headerlink" title="wbs43open"></a><a href="#wbs43open"></a>wbs43open</h2><p><code>PDF</code>文件隐写的不二选择 <a href="https://yunpan.cn/c6jcYbgFjajmp" target="_blank" rel="external">下载传送门</a> （提取码：2336）<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:53:39%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/16:53:39%20" alt=""></a></p>
<h2 id="Iamge-Stganograpy"><a href="#Iamge-Stganograpy" class="headerlink" title="Iamge Stganograpy"></a><a href="#Iamge-Stganograpy"></a>Iamge Stganograpy</h2><p>这也是一个图片的隐写工具<br>当初死活在谷歌 百度等地方都找不到 最后<code>白师傅</code>在搜狗找到了…<br><a href="http://imagesteganography.codeplex.com/" target="_blank" rel="external">下载传送门</a></p>
<h2 id="F5算法隐写实现"><a href="#F5算法隐写实现" class="headerlink" title="F5算法隐写实现"></a><a href="#F5算法隐写实现"></a>F5算法隐写实现</h2><p><a href="https://yunpan.cn/c6jdvEtep8guk" target="_blank" rel="external">下载传送门</a> （提取码：c033)</p>
<h2 id="silenteye-音频隐写）"><a href="#silenteye-音频隐写）" class="headerlink" title="silenteye(音频隐写）"></a><a href="#silenteye-音频隐写）"></a>silenteye(音频隐写）</h2><p><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:13:24%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:13:24%20" alt=""></a></p>
<h2 id="MP3Stego"><a href="#MP3Stego" class="headerlink" title="MP3Stego"></a><a href="#MP3Stego"></a>MP3Stego</h2><p>顾名思义 这是一个款音频隐写工具<a href="http://www.petitcolas.net/steganography/mp3stego/" target="_blank" rel="external">下载传送门</a></p>
<figure class="highlight tp"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">用MP3Stego进行加密解密：</div><div class="line"></div><div class="line">加密：encode -E 加密文本 -<span class="keyword">P</span> 密码  mp<span class="number">3</span>文件</div><div class="line"></div><div class="line">解密：decode -<span class="keyword">X</span> -<span class="keyword">P</span>  密码  mp<span class="number">3</span>文件</div></pre></td></tr></tbody></table></figure>

<h2 id="Outguess"><a href="#Outguess" class="headerlink" title="Outguess"></a><a href="#Outguess"></a>Outguess</h2><p>2016-08-04 21:07:46<br>今天遇到的一个隐写工具 CSDN有源码</p>
<figure class="highlight plain"><figcaption><span>code</span></figcaption><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure &amp;&amp; make &amp;&amp; make install</div></pre></td></tr></tbody></table></figure>

<p>使用方法<code>outguess</code>就能看到使用方法啦</p>
<figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">outguess -r bystudent.jpg outfile.txt</div></pre></td></tr></tbody></table></figure>

<p><strong>这个隐写方式也是可以通过stegdetect</strong>检测出来的</p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a><a href="#Other"></a>Other</h1><h2 id="Yafu"><a href="#Yafu" class="headerlink" title="Yafu"></a><a href="#Yafu"></a>Yafu</h2><p>大整数分解 <a href="https://yunpan.cn/c6jHKGCbiwEPJ" target="_blank" rel="external">下载传送门</a>（提取码：16f4）<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:19:36%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:19:36%20" alt=""></a></p>
<figure class="highlight stylus"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">factor</span><span class="params">(要分解的整数)</span></span></div></pre></td></tr></tbody></table></figure>

<h2 id="Ziperello"><a href="#Ziperello" class="headerlink" title="Ziperello"></a><a href="#Ziperello"></a>Ziperello</h2><p><code>ZIP</code>压缩包暴力破解 <a href="https://yunpan.cn/c6jFbIaYXFQxw" target="_blank" rel="external">下载传送门</a>（提取码：324a)<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:43:00%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:43:00%20" alt=""></a></p>
<h2 id="ARPR-ha"><a href="#ARPR-ha" class="headerlink" title="ARPR-ha"></a><a href="#ARPR-ha"></a>ARPR-ha</h2><p><code>RAR</code>暴力破解 <a href="https://yunpan.cn/c6jFCzLhVDGbX" target="_blank" rel="external">下载传送门</a> （提取码：6092）</p>
<h2 id="AAPasswordRecovery"><a href="#AAPasswordRecovery" class="headerlink" title="AAPasswordRecovery"></a><a href="#AAPasswordRecovery"></a>AAPasswordRecovery</h2><p>ZIP /RAR等压缩软件的破解工具 <a href="https://yunpan.cn/c6jL27k6Nvfvc" target="_blank" rel="external"></a> （提取码：f6c7)<br>可支持多种破解方式<br>包括</p>
<p><ol></ol></p>
<p><li>明文攻击</li></p>
<p><li>暴力破解</li></p>
<p><li>字典攻击<br><a href="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:49:27%20" target="_blank" rel="external"><img src="http://oayoilchh.bkt.clouddn.com/2016/07/27/17:49:27%20" alt=""></a></li></p>
<h2 id="PKCrack"><a href="#PKCrack" class="headerlink" title="PKCrack"></a><a href="#PKCrack"></a>PKCrack</h2><p><code>ZIP</code>明文破解工具 <a href="http://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html" target="_blank" rel="external">下载传送门</a><br><a href="http://blog.csdn.net/jiangwlee/article/details/6911087" target="_blank" rel="external">详细使用方法请看这</a></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a><a href="#最后"></a>最后</h1><p><a href="http://www.codefrom.com/c/43" target="_blank" rel="external"><code>CTF常用工具集合</code></a><br><a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external"><code>表哥的编码解码博文</code></a><br><a href="http://bobao.360.cn/learning/detail/243.html" target="_blank" rel="external"><code>CTF隐写总结</code></a></p>
<ul>
<li>转载自<a href="http://www.wing3.cn" target="_blank" rel="external">Swing’s Blog</a>文章<a href="http://www.wing3.cn/2016/04/25/tools/" target="_blank" rel="external">《工具以及脚本的整理》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;密码学-cryptology&quot;&gt;&lt;a href=&quot;#密码学-cryptology&quot; class=&quot;headerlink&quot; title=&quot;密码学 cryptology&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#密码学-cryptology&quot;&gt;&lt;/a&gt;密码学 &lt;code&gt;cryp
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>入CTF坑必不可少的地方</title>
    <link href="http://uknow.top/undefined/%E5%85%A5CTF%E5%9D%91%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E5%9C%B0%E6%96%B920160810/"/>
    <id>http://uknow.top/undefined/入CTF坑必不可少的地方20160810/</id>
    <published>2016-08-10T14:57:31.000Z</published>
    <updated>2016-08-10T16:19:54.167Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.hackfun.org/usr/uploads/2016/05/4242872726.png" alt="ctf"><br><strong>0x00 前言</strong></p>
<p>没有交易，没有买卖，没有排名，纯属分享</p>
<p><strong>0x01 CTF介绍</strong></p>
<ul>
<li><a href="http://blog.idf.cn/2015/02/ctf-field-guide/" target="_blank" rel="external">CTF领域指南</a></li>
<li><a href="http://tieba.baidu.com/p/3933947157" target="_blank" rel="external">CTF介绍大全</a></li>
<li><a href="https://ctftime.org/event/list/upcoming" target="_blank" rel="external">CTF赛事预告</a></li>
</ul>
<p><strong>0x02 CTF练习</strong></p>
<ul>
<li><strong>BIN:</strong></li>
<li><a href="http://reversing.kr/" target="_blank" rel="external">reversing</a></li>
<li><a href="http://pwnable.kr/" target="_blank" rel="external">pwnable</a></li>
<li><a href="http://crackmes.de/" target="_blank" rel="external">crackmes</a></li>
<li><a href="http://exploit-exercises.com/" target="_blank" rel="external">exploit-exercises</a></li>
<li><a href="http://overthewire.org/" target="_blank" rel="external">overthewire</a></li>
<li><a href="https://io.netgarage.org" target="_blank" rel="external">netgarage</a></li>
<li><a href="http://security.cs.rpi.edu/courses/binexp-spring2015/" target="_blank" rel="external">bin干货</a></li>
<li><a href="http://www.52pojie.cn/forum-67-1.html" target="_blank" rel="external">2014CrackMe大赛</a></li>
<li><a href="http://www.52pojie.cn/forum-71-1.html" target="_blank" rel="external">吾爱破解2016安全挑战赛</a></li>
<li><p><a href="http://bbs.pediy.com/forumdisplay.php?f=109" target="_blank" rel="external">看雪安全论坛历年安全大赛</a></p>
</li>
<li><p><strong> SQL:</strong></p>
</li>
<li><a href="https://github.com/Audi-1/sqli-labs" target="_blank" rel="external">sqli-labs</a></li>
<li><p><a href="http://redtiger.labs.overthewire.org/" target="_blank" rel="external">RedTigers Hackit</a></p>
</li>
<li><p><strong>XSS:</strong></p>
</li>
<li><a href="http://xss.pkav.net/xss/" target="_blank" rel="external">乌云XSS互动学习平台</a></li>
<li><a href="http://prompt.ml/" target="_blank" rel="external">prompt</a></li>
<li><a href="http://xss-quiz.int21h.jp/http://escape.alf.nu/" target="_blank" rel="external">XSS Challenges</a></li>
<li><a href="http://escape.alf.nu/" target="_blank" rel="external">escape</a></li>
<li><p><a href="https://xss-game.appspot.com/" target="_blank" rel="external">xss-game</a></p>
</li>
<li><p><strong>国内综合练习：</strong></p>
</li>
<li><a href="http://www.sangebaimao.com/challenge/list" target="_blank" rel="external">三个白帽</a></li>
<li><a href="http://hackinglab.cn/" target="_blank" rel="external">网络信息安全攻防学习平台</a></li>
<li><a href="http://captf.com/" target="_blank" rel="external">CTF题目</a></li>
<li><a href="http://cafebabe.cc/nazo/" target="_blank" rel="external">脑洞开发</a></li>
<li><a href="http://1111.segmentfault.com/" target="_blank" rel="external">光棍节程序员闯关秀</a></li>
<li><a href="http://www.helloisa.com/test/" target="_blank" rel="external">ISA Test</a></li>
<li><a href="http://www.fj543.com/hack/" target="_blank" rel="external">黑客丛林之旅</a></li>
<li><a href="http://monyer.com/game/game1/" target="_blank" rel="external">梦之光芒小游戏</a></li>
<li><a href="http://oj.xctf.org.cn/" target="_blank" rel="external">XCTF_OJ练习平台</a></li>
<li><a href="http://hackgame.blackbap.org/" target="_blank" rel="external">习科黑客游戏</a></li>
<li><a href="http://ctf.3sec.cn/" target="_blank" rel="external">Jlu.CTF</a></li>
<li><a href="http://www.baimaoxueyuan.com/ctf" target="_blank" rel="external">白帽学院CTF挑战赛</a></li>
<li><a href="http://www.ichunqiu.com/tiaozhans" target="_blank" rel="external">i春秋CTF挑战</a></li>
<li><a href="http://ctf.idf.cn/" target="_blank" rel="external">idf 实验室</a></li>
<li><a href="http://ctf.moonsos.com/pentest/index.php" target="_blank" rel="external">米安CTF</a></li>
<li><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="external">合天CTF</a></li>
<li><a href="http://www.shiyanbar.com/ctf/index" target="_blank" rel="external">西普CTF</a></li>
<li><a href="http://hkyx.myhack58.com/" target="_blank" rel="external">红客闯关游戏</a></li>
<li><a href="http://202.108.211.5/" target="_blank" rel="external">实训竞赛系统</a></li>
<li><p><a href="http://ctf.nuptsast.com/" target="_blank" rel="external">南邮CTF</a></p>
</li>
<li><p><strong>国外综合练习:</strong></p>
</li>
<li><a href="http://www.wechall.net/" target="_blank" rel="external">wechall</a></li>
<li><a href="http://insight-labs.org/" target="_blank" rel="external">insight-labs</a></li>
<li><a href="http://webhacking.kr/" target="_blank" rel="external">webhacking</a></li>
<li><a href="http://wargame.kr/" target="_blank" rel="external">wargame</a></li>
<li><a href="http://canyouhack.it/" target="_blank" rel="external">canyouhack</a></li>
<li><a href="http://hackit.sinaapp.com/" target="_blank" rel="external">hackit</a></li>
<li><a href="http://webhacking.kr/" target="_blank" rel="external">webhacking</a></li>
<li><a href="http://fun.coolshell.cn/" target="_blank" rel="external">coolshell</a></li>
<li><a href="http://ringzer0team.com/challenge" target="_blank" rel="external">ringzer0team</a></li>
<li><a href="https://backdoor.sdslabs.co/" target="_blank" rel="external">backdoor</a></li>
<li><a href="http://smashthestack.org/" target="_blank" rel="external">smashthestack</a></li>
<li><a href="http://overthewire.org/wargames/" target="_blank" rel="external">overthewire</a></li>
<li><a href="https://w3challs.com/" target="_blank" rel="external">w3challs</a></li>
<li><a href="https://chall.stypr.com/?chall" target="_blank" rel="external">chall.stypr</a></li>
<li><a href="https://pentesterlab.com/" target="_blank" rel="external">pentesterlab</a></li>
<li><a href="https://id0-rsa.pub" target="_blank" rel="external">id0-rsa</a></li>
</ul>
<p><strong>0x03 CTF-writeup(WP):</strong></p>
<ul>
<li><strong>各种搜索:ctf writeup</strong></li>
<li><a href="http://drops.wooyun.org/?s=writeup&amp;submit=%E6%90%9C%E7%B4%A2" target="_blank" rel="external">乌云WP</a></li>
<li><a href="http://bobao.360.cn/ctf/" target="_blank" rel="external">360安全播报WP</a></li>
<li><a href="https://github.com/ctfs/" target="_blank" rel="external">github WP</a></li>
<li><a href="http://sec.yka.me/" target="_blank" rel="external">CTF Writeup Summary</a></li>
<li><a href="https://ctf-team.vulnhub.com/" target="_blank" rel="external">Write Ups</a></li>
</ul>
<p><strong>0x04 后话</strong></p>
<ul>
<li><p>学习的地方很多，不能一一列举，一些其他优秀的平台没有提到，欢迎大家补充</p>
</li>
<li><p>转载自<a href="https://www.hackfun.org/" target="_blank" rel="external">4ido10n’s Blog</a>文章<a href="https://www.hackfun.org/CTF/ctf-website.html" target="_blank" rel="external">《入CTF坑必不可少的地方-保持更新》</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.hackfun.org/usr/uploads/2016/05/4242872726.png&quot; alt=&quot;ctf&quot;&gt;&lt;br&gt;&lt;strong&gt;0x00 前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没有交易，没有买卖，没有排名，纯属分享&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://uknow.top/undefined/hello-world20160809/"/>
    <id>http://uknow.top/undefined/hello-world20160809/</id>
    <published>2016-08-08T16:39:12.323Z</published>
    <updated>2016-08-08T16:39:12.387Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
